#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{prettyref}
\newrefformat{}{section~\ref{#1}}
\sloppy
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 0
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
The Prudence Manual
\end_layout

\begin_layout Author
Version @VERSION@
\begin_inset Newline newline
\end_inset

Main text written by Tal Liron
\end_layout

\begin_layout Standard
\noindent
\align center
Copyright 2009-2013 by Three Crickets LLC.
\begin_inset Newline newline
\end_inset

This work is licensed under a
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License"
target "http://creativecommons.org/licenses/by-nc-sa/3.0/"

\end_inset

.
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Tutorial
\end_layout

\begin_layout Subsection
Installing Prudence
\end_layout

\begin_layout Standard
Download a distribution
\end_layout

\begin_layout Standard
Starting Prudence
\end_layout

\begin_layout Subsubsection
Further Exploration
\end_layout

\begin_layout Itemize
Start Prudence as a system service
\end_layout

\begin_layout Itemize
Logging
\end_layout

\begin_layout Subsection
At a Glance
\end_layout

\begin_layout Subsubsection
/component/
\end_layout

\begin_layout Standard
A 
\begin_inset Quotes eld
\end_inset

component
\begin_inset Quotes erd
\end_inset

 is the largest logical entity REST.
 It can encapsulate many servers and clients.
\end_layout

\begin_layout Standard
In Prudence, the component is bootstrapped using straightforward JavaScript
 code, starting with default.js.
 The code makes sure to initialize all your applications, servers and clients,
 as well as related services, and bind them to your component.
\end_layout

\begin_layout Subsubsection
/component/applications/
\end_layout

\begin_layout Subsubsection
/component/libraries/scripturian/
\end_layout

\begin_layout Subsubsection
/component/libraries/prudence/
\end_layout

\begin_layout Subsubsection
/component/libraries/web/
\end_layout

\begin_layout Standard
Here you can put static resources that you wish to have shared by all your
 applications.
\end_layout

\begin_layout Standard
It's a good place to put client-side JavaScript frameworks such as Ext JS
 and jQuery.
\end_layout

\begin_layout Subsubsection
/component/libraries/jars/
\end_layout

\begin_layout Standard
This is where JVM libraries are installed.
 This includes all of Prudence's dependencies, and you can add your own,
 too.
\end_layout

\begin_layout Standard
You can use JVM APIs from JavaScript almost identically to how they are
 used in Java.
\end_layout

\begin_layout Subsubsection
/cache/
\end_layout

\begin_layout Subsubsection
Further Exploration
\end_layout

\begin_layout Itemize
Learn about bootstrapping with Sincerity
\end_layout

\begin_layout Itemize
Configure your component
\end_layout

\begin_layout Subsection
Your First Application
\end_layout

\begin_layout Subsubsection
The 
\begin_inset Quotes eld
\end_inset

prudence
\begin_inset Quotes erd
\end_inset

 Command
\end_layout

\begin_layout Subsubsection
/mapped/
\end_layout

\begin_layout Subsubsection
/fragments/
\end_layout

\begin_layout Subsubsection
/libraries/
\end_layout

\begin_layout Subsubsection
Further Exploration
\end_layout

\begin_layout Itemize
Configure your application
\end_layout

\begin_layout Itemize
Managing the URI-space
\end_layout

\begin_layout Subsection
Generating HTML
\end_layout

\begin_layout Subsubsection
Further Exploration
\end_layout

\begin_layout Itemize
Textual Resources
\end_layout

\begin_layout Itemize
Adding more languages
\end_layout

\begin_layout Subsection
A Manual Resource
\end_layout

\begin_layout Subsubsection
Further Exploration
\end_layout

\begin_layout Itemize
Manual Resources
\end_layout

\begin_layout Section
Managing the URI-space
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

URI-space
\begin_inset Quotes erd
\end_inset

 represents the published (publicly or internally: more on that later) set
 of all URIs supported by your server.
 
\begin_inset Quotes eld
\end_inset

Supported
\begin_inset Quotes erd
\end_inset

 here means that unsupported URIs should return a 
\begin_inset Quotes eld
\end_inset

not found
\begin_inset Quotes erd
\end_inset

 error (404).
 Importantly, the URI-space can be potentially 
\emph on
infinite
\emph default
, in that you may support URI templates that match any number of actual
 URIs (within the limitations of maximum URI length).
\end_layout

\begin_layout Standard
Prudence offers three built-in ways for you to support a URI or a URI template:
\end_layout

\begin_layout Enumerate

\series bold
Resource Dispatching
\series default
: In your application's routing.js you can map URIs or URI templates to a
 custom ID, which is then dispatched to your resource handling code.
 Dispatching provides the cleanest and most flexible separation between
 URIs and their implementation.
\end_layout

\begin_layout Enumerate

\series bold
Resource Mapping
\series default
: The filesystem hierarchy under an application's 
\begin_inset Quotes eld
\end_inset

/mapped/
\begin_inset Quotes erd
\end_inset

 subdirectory is directly mapped to URIs (but not URI templates).
 Both directory- and file-names are mapped in order of depth.
 By default, Prudence hides filename extensions from the published URIs,
 but uses these extensions to extracts MIME-type information for the resources.
 Also, mapping adds trailing slashes by default, by redirecting URIs without
 trailing slash to include them (on the client's side).
 Filesystem mapping provides the most 
\begin_inset Quotes eld
\end_inset

transparent
\begin_inset Quotes erd
\end_inset

 management of your URI-space, because you do not need to edit any configuration
 file: to change URIs, you simply move or rename files and directories.
\end_layout

\begin_layout Enumerate

\series bold
URI Capturing
\series default
: Capturing lets you map URI templates to fixed URIs, as well as perform
 other kinds of internal URI rewrites that are invisible to clients, allowing
 you to provide a published URI-space, which is different from your internal
 mapping structure.
 Its most common use case is to provide a convenient way to combine the
 transparency of filesystem mapping with support for URI templates.
\end_layout

\begin_layout Standard
A common question when embarking on a new project is whether you should
 organize your code around 
\emph on
dispatching
\emph default
 or 
\emph on
mapping
\emph default
.
\end_layout

\begin_layout Standard
Generally, we would say that dispatching should be preferred for larger
 applications, because it allows you full control over you code organization.
 Mapping forces you into the filesystem structure, at least in the final,
 front-facing URI handler---of course, these files can import libraries
 that are structured as you see fit, but the requirement of having an individual
 file per supported URI can be cumbersome, even with smart use of 
\emph on
capturing
\emph default
.
\end_layout

\begin_layout Standard
Note that some Prudence features work 
\emph on
only
\emph default
 in mapping, such as textual and static resources, so it may make sense
 to use both methods in a single application.
\end_layout

\begin_layout Subsection
Resource Dispatching
\end_layout

\begin_layout Subsection
Resource Mapping
\end_layout

\begin_layout Subsection
URI Capturing
\end_layout

\begin_layout Subsection
Virtual Hosts
\end_layout

\begin_layout Section
Implementing Resources
\end_layout

\begin_layout Subsection
Manual Resources
\end_layout

\begin_layout Subsubsection
Dispatched vs.
 Mapped
\end_layout

\begin_layout Subsubsection
handleGetInfo
\end_layout

\begin_layout Subsubsection
Controlling the Formats
\end_layout

\begin_layout Standard
Negotiated via handleInit: the order matters
\end_layout

\begin_layout Standard
You can check what was negotiated
\end_layout

\begin_layout Standard
But you can set it to whatever you want later
\end_layout

\begin_layout Subsubsection
Client-Side Caching
\end_layout

\begin_layout Standard
conversation.modificationDate, conversation.tag
\end_layout

\begin_layout Subsubsection
Server-Side Caching
\end_layout

\begin_layout Standard
Not supported directly.
\end_layout

\begin_layout Subsubsection
Integrating Textual Resources
\end_layout

\begin_layout Subsection
Static Resources
\end_layout

\begin_layout Standard
Must be mapped.
\end_layout

\begin_layout Subsubsection
Controlling the Format
\end_layout

\begin_layout Subsubsection
Client-Side Caching
\end_layout

\begin_layout Subsubsection
CSS and JavaScript
\end_layout

\begin_layout Subsection
Textual Resources
\end_layout

\begin_layout Standard
Must be mapped.
 In the future may be dispatched.
\end_layout

\begin_layout Subsubsection
Scriptlets
\end_layout

\begin_layout Subsubsection
Working with Different Programming Languages
\end_layout

\begin_layout Subsubsection
Controlling the Format
\end_layout

\begin_layout Standard
Rely on the extension (see static resources) or change it in code.
\end_layout

\begin_layout Subsubsection
Server-Side Caching
\end_layout

\begin_layout Subsubsection
Client-Side Caching
\end_layout

\begin_layout Subsubsection
Scriptlet Plugins
\end_layout

\begin_layout Subsection
Integrating Java
\end_layout

\begin_layout Standard
Resources
\end_layout

\begin_layout Standard
Other Restlets
\end_layout

\begin_layout Section
Caching
\end_layout

\begin_layout Subsection
Introduction: Integrated Caching
\end_layout

\begin_layout Subsection
Server-Side Caching
\end_layout

\begin_layout Subsection
Client-Side Caching
\end_layout

\begin_layout Subsubsection
Content Negotiation
\end_layout

\begin_layout Section
Programming
\end_layout

\begin_layout Subsection
Introduction: Scripturian
\end_layout

\begin_layout Subsection
JavaScript
\end_layout

\begin_layout Subsection
Other Languages
\end_layout

\begin_layout Subsection
Execution Environments
\end_layout

\begin_layout Subsubsection
Bootstrap
\end_layout

\begin_layout Standard
Straightforward beginning-to-end script
\end_layout

\begin_layout Standard
Except for initialization tasks
\end_layout

\begin_layout Subsubsection
Manual Resources and Handlers
\end_layout

\begin_layout Subsubsection
Textual Resources
\end_layout

\begin_layout Subsubsection
Cron Tasks
\end_layout

\begin_layout Standard
Two options!
\end_layout

\begin_layout Subsection
APIs
\end_layout

\begin_layout Subsubsection
Scripturian API
\end_layout

\begin_layout Standard
executable
\end_layout

\begin_layout Subsubsection
Resource API
\end_layout

\begin_layout Standard
application
\end_layout

\begin_layout Standard
document
\end_layout

\begin_layout Subsubsection
JavaScript Libraries
\end_layout

\begin_layout Paragraph
Sincerity JavaScript Library
\end_layout

\begin_layout Itemize
/sincerity/calendar/
\end_layout

\begin_layout Itemize
/sincerity/classes/
\end_layout

\begin_layout Itemize
/sincerity/cryptography/
\end_layout

\begin_layout Itemize
/sincerity/files/
\end_layout

\begin_layout Itemize
/sincerity/iterators/
\end_layout

\begin_layout Itemize
/sincerity/json/
\end_layout

\begin_layout Itemize
/sincerity/jvm/
\end_layout

\begin_layout Itemize
/sincerity/localization/
\end_layout

\begin_layout Itemize
/sincerity/lucene/
\end_layout

\begin_layout Itemize
/sincerity/mail/
\end_layout

\begin_layout Itemize
/sincerity/objects/
\end_layout

\begin_layout Itemize
/sincerity/rhino/
\end_layout

\begin_layout Itemize
/sincerity/templates/
\end_layout

\begin_layout Itemize
/sincerity/xml/
\end_layout

\begin_layout Paragraph
Prudence JavaScript Library
\end_layout

\begin_layout Itemize
/prudence/blocks/
\end_layout

\begin_layout Itemize
/prudence/lazy/
\end_layout

\begin_layout Itemize
/prudence/logging/
\end_layout

\begin_layout Itemize
/prudence/resources/
\end_layout

\begin_layout Itemize
/prudence/tasks/
\end_layout

\begin_layout Paragraph
Libraries for Bootstrap and Configuration
\end_layout

\begin_layout Itemize
/sincerity/annotations/
\end_layout

\begin_layout Itemize
/sincerity/container/
\end_layout

\begin_layout Itemize
/prudence/routing/
\end_layout

\begin_layout Itemize
/prudence/lazy/
\end_layout

\begin_layout Section
Working in a Cluster
\end_layout

\begin_layout Subsection
Shared Globals
\end_layout

\begin_layout Subsection
Task Farming
\end_layout

\begin_layout Section
Accepting Uploads
\end_layout

\begin_layout Section
Cookies
\end_layout

\begin_layout Section
Filtering
\end_layout

\begin_layout Subsection
How Routing Works
\end_layout

\begin_layout Subsection
Built-in Filters
\end_layout

\begin_layout Section
Configuring Applications
\end_layout

\begin_layout Subsection
settings.js
\end_layout

\begin_layout Subsubsection
app.settings
\end_layout

\begin_layout Subsubsection
app.settings.description
\end_layout

\begin_layout Subsubsection
app.settings.errors
\end_layout

\begin_layout Subsubsection
app.settings.code
\end_layout

\begin_layout Subsubsection
app.settings.uploads
\end_layout

\begin_layout Subsubsection
app.settings.mediaTypes
\end_layout

\begin_layout Subsubsection
app.globals
\end_layout

\begin_layout Subsection
routing.js
\end_layout

\begin_layout Subsubsection
app.hosts
\end_layout

\begin_layout Subsubsection
app.routes
\end_layout

\begin_layout Subsubsection
app.dispatchers
\end_layout

\begin_layout Subsection
Scheduling Tasks (Cron)
\end_layout

\begin_layout Subsection
Default Directories
\end_layout

\begin_layout Standard
/mapped/
\end_layout

\begin_layout Standard
/fragments/
\end_layout

\begin_layout Standard
/libraries/
\end_layout

\begin_layout Standard
/uploads/
\end_layout

\begin_layout Section
Configuring the Component
\end_layout

\begin_layout Standard
Order: applications, services, starts component, then runs initialization
 tasks
\end_layout

\begin_layout Subsection
/component/servers/
\end_layout

\begin_layout Subsection
/component/clients/
\end_layout

\begin_layout Subsection
/component/hosts/
\end_layout

\begin_layout Standard
See virtual hosts in managing URI space.
\end_layout

\begin_layout Subsection
/component/services/
\end_layout

\begin_layout Standard
Run 
\emph on
after
\emph default
 the component is configured but 
\emph on
before
\emph default
 it is started.
\end_layout

\begin_layout Subsubsection
caching
\end_layout

\begin_layout Standard
Configure the caching backend
\end_layout

\begin_layout Subsubsection
distributed
\end_layout

\begin_layout Standard
Load the Hazelcast configuration
\end_layout

\begin_layout Subsubsection
executor
\end_layout

\begin_layout Standard
Configures thread pools for task execution.
\end_layout

\begin_layout Subsubsection
log
\end_layout

\begin_layout Standard
Configures the component's log service, which is used for logging client
 requests.
 (By default web.log)
\end_layout

\begin_layout Subsubsection
singleton
\end_layout

\begin_layout Standard
Prudence assumes a single Restlet Component instance.
 If for some reason you have a more complex setup, you can configure Prudence's
 initialization here.
\end_layout

\begin_layout Subsubsection
scheduler
\end_layout

\begin_layout Standard
Configure the cron scheduler (cron4j)
\end_layout

\begin_layout Subsubsection
status
\end_layout

\begin_layout Standard
Configures Restlet's status service to use Prudence's implementation.
\end_layout

\begin_layout Subsubsection
version
\end_layout

\begin_layout Standard
Provides access to Prudence and Restlet versions.
\end_layout

\begin_layout Subsection
/component/templates/
\end_layout

\begin_layout Section
Debugging
\end_layout

\begin_layout Subsection
Logging
\end_layout

\begin_layout Subsubsection
application.logger
\end_layout

\begin_layout Subsubsection
application.getSubLogger
\end_layout

\begin_layout Subsubsection
Configuring Logging
\end_layout

\begin_layout Standard
/configuration/logging/
\end_layout

\begin_layout Standard
See Sincerity Manual
\end_layout

\begin_layout Subsection
Debug Page
\end_layout

\begin_layout Section
Deployment
\end_layout

\begin_layout Subsection
The Joys of Sincerity
\end_layout

\begin_layout Subsubsection
Configuration-by-Script
\end_layout

\begin_layout Subsubsection
Plugins
\end_layout

\begin_layout Subsection
Deployment Strategies
\end_layout

\begin_layout Subsubsection
Synchronization
\end_layout

\begin_layout Standard
Unison, rsync
\end_layout

\begin_layout Subsubsection
Packaging
\end_layout

\begin_layout Paragraph
Maven
\end_layout

\begin_layout Standard
Using your own repository (Nexus)
\end_layout

\begin_layout Paragraph
Debian/RPM
\end_layout

\begin_layout Subsubsection
Version Control
\end_layout

\begin_layout Paragraph
Subversion
\end_layout

\begin_layout Paragraph
Git
\end_layout

\begin_layout Standard
What to ignore
\end_layout

\begin_layout Subsection
Directory Organization
\end_layout

\begin_layout Subsubsection
Sincerity Standalone
\end_layout

\begin_layout Subsection
Operating System Service
\end_layout

\begin_layout Standard
See Sincerity Manual
\end_layout

\begin_layout Subsection
Monitoring
\end_layout

\begin_layout Subsection
Security
\end_layout

\begin_layout Subsubsection
SSL
\end_layout

\begin_layout Standard
Howto
\end_layout

\begin_layout Subsubsection
HTTP Authentication
\end_layout

\begin_layout Subsubsection
Locked-Down User
\end_layout

\begin_layout Standard
Service Plugin
\end_layout

\begin_layout Subsubsection
Firewall
\end_layout

\begin_layout Standard
HTTP ports
\end_layout

\begin_layout Standard
Hazelcast ports
\end_layout

\begin_layout Standard
Cache backends
\end_layout

\begin_layout Standard
Database and other services
\end_layout

\begin_layout Subsection
Proxying
\end_layout

\begin_layout Subsubsection
Nginx
\end_layout

\begin_layout Subsubsection
Apache
\end_layout

\begin_layout Subsection
Deploying Clusters
\end_layout

\begin_layout Subsubsection
Loadbalancing
\end_layout

\begin_layout Standard
Perlbal
\end_layout

\begin_layout Subsubsection
Security Concerns
\end_layout

\begin_layout Subsubsection
Configuring Hazelcast
\end_layout

\begin_layout Standard
/configuration/hazelcast/prudence/
\end_layout

\begin_layout Standard
or
\end_layout

\begin_layout Standard
/configuration/hazelcast.alt.conf
\end_layout

\begin_layout Subsection
Cache Backends
\end_layout

\end_body
\end_document
