#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{prettyref}
\newrefformat{}{section~\ref{#1}}
\sloppy
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 0
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
The Prudence Manual
\end_layout

\begin_layout Author
Version @VERSION@
\begin_inset Newline newline
\end_inset

Main text written by Tal Liron
\end_layout

\begin_layout Standard
\noindent
\align center
Copyright 2009-2013 by Three Crickets LLC.
\begin_inset Newline newline
\end_inset

This work is licensed under a
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License"
target "http://creativecommons.org/licenses/by-nc-sa/3.0/"

\end_inset

.
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Tutorial
\end_layout

\begin_layout Subsection
Installing Prudence
\end_layout

\begin_layout Standard
Download a distribution
\end_layout

\begin_layout Standard
Starting Prudence
\end_layout

\begin_layout Subsubsection
Further Exploration
\end_layout

\begin_layout Itemize
Start Prudence as a system service
\end_layout

\begin_layout Itemize
Logging
\end_layout

\begin_layout Subsection
At a Glance
\end_layout

\begin_layout Subsubsection
/component/
\end_layout

\begin_layout Standard
A 
\begin_inset Quotes eld
\end_inset

component
\begin_inset Quotes erd
\end_inset

 is the largest logical entity REST.
 It can encapsulate many servers and clients.
\end_layout

\begin_layout Standard
In Prudence, the component is bootstrapped using straightforward JavaScript
 code, starting with default.js.
 The code makes sure to initialize all your applications, servers and clients,
 as well as related services, and bind them to your component.
\end_layout

\begin_layout Subsubsection
/component/applications/
\end_layout

\begin_layout Subsubsection
/component/libraries/scripturian/
\end_layout

\begin_layout Subsubsection
/component/libraries/prudence/
\end_layout

\begin_layout Subsubsection
/component/libraries/web/
\end_layout

\begin_layout Standard
Here you can put static resources that you wish to have shared by all your
 applications.
\end_layout

\begin_layout Standard
It's a good place to put client-side JavaScript frameworks such as Ext JS
 and jQuery.
\end_layout

\begin_layout Subsubsection
/component/libraries/jars/
\end_layout

\begin_layout Standard
This is where JVM libraries are installed.
 This includes all of Prudence's dependencies, and you can add your own,
 too.
\end_layout

\begin_layout Standard
You can use JVM APIs from JavaScript almost identically to how they are
 used in Java.
\end_layout

\begin_layout Subsubsection
/cache/
\end_layout

\begin_layout Subsubsection
Further Exploration
\end_layout

\begin_layout Itemize
Learn about bootstrapping with Sincerity
\end_layout

\begin_layout Itemize
Configure your component
\end_layout

\begin_layout Subsection
Your First Application
\end_layout

\begin_layout Subsubsection
The 
\begin_inset Quotes eld
\end_inset

prudence
\begin_inset Quotes erd
\end_inset

 Command
\end_layout

\begin_layout Subsubsection
/resources/
\end_layout

\begin_layout Subsubsection
/libraries/
\end_layout

\begin_layout Subsubsection
/libraries/
\end_layout

\begin_layout Subsubsection
Further Exploration
\end_layout

\begin_layout Itemize
Configure your application
\end_layout

\begin_layout Itemize
Managing the URI-space
\end_layout

\begin_layout Subsection
Generating HTML
\end_layout

\begin_layout Subsubsection
Further Exploration
\end_layout

\begin_layout Itemize
Textual Resources
\end_layout

\begin_layout Itemize
Adding more languages
\end_layout

\begin_layout Subsection
A Manual Resource
\end_layout

\begin_layout Subsubsection
Further Exploration
\end_layout

\begin_layout Itemize
Manual Resources
\end_layout

\begin_layout Section
Managing the URI-space
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

URI-space
\begin_inset Quotes erd
\end_inset

 represents the published set of all URIs supported by your server.
 
\begin_inset Quotes eld
\end_inset

Supported
\begin_inset Quotes erd
\end_inset

 here means that unsupported URIs should return a 404 (
\begin_inset Quotes eld
\end_inset

not found
\begin_inset Quotes erd
\end_inset

) error.
\end_layout

\begin_layout Standard
Importantly, the URI-space can be potentially 
\emph on
infinite
\emph default
, in that you may support URI templates that match any number of actual
 URIs (within the limitations of maximum URI length).
 For example, 
\begin_inset Quotes eld
\end_inset

/service/{id}/
\begin_inset Quotes erd
\end_inset

 could match 
\begin_inset Quotes eld
\end_inset

/service/1/
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

/service/23664/
\begin_inset Quotes erd
\end_inset

, etc.
 All matched URIs belong to your URI-space.
\end_layout

\begin_layout Standard
The URI-space is mostly configured in the application's routing.js.
 However, the resource implementations can add their own special handling.
 For example, in the above example we can make sure in code that 
\begin_inset Quotes eld
\end_inset

{id}
\begin_inset Quotes erd
\end_inset

 would always be a decimal integer, thus limiting the extent of the URI-space.
 More generally, Prudence supports 
\begin_inset Quotes eld
\end_inset

wildcard
\begin_inset Quotes erd
\end_inset

 URI templates, allowing you to delegate the parsing of the URI entirely
 to your resource code.
\end_layout

\begin_layout Subsection
Routing Paradigms
\end_layout

\begin_layout Standard
Prudence offers three built-in techniques for you to support a URI or a
 URI template, reflecting two different routing paradigms:
\end_layout

\begin_layout Enumerate

\series bold
Resource mapping
\series default
: The filesystem hierarchy under an application's 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

 subdirectory is directly mapped to URIs (but not URI templates).
 Both directory- and file-names are mapped in order of depth.
 By default, Prudence hides filename extensions from the published URIs,
 but uses these extensions to extracts MIME-type information for the resources.
 Also, mapping adds trailing slashes by default, by redirecting URIs without
 trailing slash to include them (on the client's side).
 Filesystem mapping provides the most 
\begin_inset Quotes eld
\end_inset

transparent
\begin_inset Quotes erd
\end_inset

 management of your URI-space, because you do not need to edit any configuration
 file: to change URIs, you simply move or rename files and directories.
\end_layout

\begin_layout Enumerate

\series bold
URI/resource separation:
\end_layout

\begin_deeper
\begin_layout Enumerate

\series bold
URI capturing
\series default
: Capturing lets you map URI templates to fixed URIs, as well as perform
 other kinds of internal URI rewrites that are invisible to clients, allowing
 you to provide a published URI-space, which is different from your internal
 mapping structure.
 (Note that another common use for capturing is to add support for URI templates
 in resource mapping, as is explained under Resource Mapping.
 This use case does not belong to the URI/resource separation paradigm.)
\end_layout

\begin_layout Enumerate

\series bold
Resource dispatching
\series default
: In your application's routing.js you can map URIs or URI templates to a
 custom ID, which is then dispatched to your resource handling code.
 Dispatching provides the cleanest and most flexible separation between
 URIs and their implementation.
\end_layout

\end_deeper
\begin_layout Standard
When embarking on a new project, you may want to give some thought as to
 whether you should organize your code around 
\emph on
resource mapping 
\emph default
or
\emph on
 URI/resource separation
\emph default
.
 Generally, URI/resource separation is preferred for larger applications
 because it allows you full control over you code organization.
 However, it does add an extra layer of configuration and is not as transparent
 as resource mapping.
 It may make sense to use both paradigms.
 Read on, and make sure you understand how to use all three routing techniques.
\end_layout

\begin_layout Subsection
routing.js
\end_layout

\begin_layout Standard
Before discussing the routing techniques, let's look at how routing is configure
d.
\end_layout

\begin_layout Standard
By convention, routing is configured in your application's routing.js file
 (which is executed by its default.js file).
 The file should configure at least app.hosts and app.routes, and app.dispatchers
 and app.preheat if you are using those optional features.
\end_layout

\begin_layout Standard
Though routing.js may look a bit like a JSON configuration file, it's important
 to remember that it's really full JavaScript source! You can include any
 JavaScript code to dynamically configure your application's routing during
 the bootstrap process.
\end_layout

\begin_layout Standard
Reproduced below is the routing.js used in the 
\begin_inset Quotes eld
\end_inset

default
\begin_inset Quotes erd
\end_inset

 application template, demonstrating many of the main route type configurations,
 including how to chain and nest types.
 It will be explained in detail in the rest of this chapter.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.hosts = {
\end_layout

\begin_layout Plain Layout

	'default': '/myapp/',
\end_layout

\begin_layout Plain Layout

	internal: '/myapp/'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	'/*': [
\end_layout

\begin_layout Plain Layout

		'manual',
\end_layout

\begin_layout Plain Layout

		'scriptlet',
\end_layout

\begin_layout Plain Layout

		{type: 'cacheControl', 'default': -1, mediaTypes: {'image/png': 'farFuture',
 'image/jpeg': 'farFuture', 'image/gif': 'farFuture'}, next:
\end_layout

\begin_layout Plain Layout

			{type: 'javaScriptUnifyMinify', next:
\end_layout

\begin_layout Plain Layout

				{type: 'zuss', next: [
\end_layout

\begin_layout Plain Layout

					'static',
\end_layout

\begin_layout Plain Layout

					{type: 'static', root: sincerity.container.getLibrariesFile('web')}]}}}
\end_layout

\begin_layout Plain Layout

	],
\end_layout

\begin_layout Plain Layout

	'/sample1/': '@sample1', // (dispatched)
\end_layout

\begin_layout Plain Layout

	'/sample2/': '/resources/sample/' // (captured)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

app.dispatchers = {
\end_layout

\begin_layout Plain Layout

	javascript: '/resources/'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
app.routes
\end_layout

\begin_layout Standard
Routes are configured in your application's routing.js, in the 
\begin_inset Quotes eld
\end_inset

app.routes
\begin_inset Quotes erd
\end_inset

 dict.
\end_layout

\begin_layout Standard
The keys of this dict are 
\emph on
URI templates
\emph default
 (see 
\begin_inset CommandInset href
LatexCommand href
name "IETF RFC 6570"
target "http://tools.ietf.org/html/rfc6570"

\end_inset

), which look like URIs, but support the following two features:
\end_layout

\begin_layout Itemize

\series bold
Variables
\series default
 are strings wrapped in curly brackets.
 For example, here is a URI template with two variables: 
\begin_inset Quotes eld
\end_inset

/profile/{user}/{service}/
\begin_inset Quotes erd
\end_inset

.
 The variables will match [TODO].
 You can access the string values of there variables in your resource via
 the conversation.locals API.
\end_layout

\begin_layout Itemize
A 
\series bold
wildcard
\series default
 can be used as the last character in the URI template.
 For example, 
\begin_inset Quotes eld
\end_inset

/archive/*
\begin_inset Quotes erd
\end_inset

 will match 
\emph on
any
\emph default
 URI that begins with 
\begin_inset Quotes eld
\end_inset

/archive/
\begin_inset Quotes erd
\end_inset

.
 You can access the remainder of the URI via the [TODO] API.
 Note that Prudence will attempt to match 
\emph on
non
\emph default
-wildcard URI templates first, so a wildcard URI template can be used as
 a general fallback for URIs.
\end_layout

\begin_layout Standard
The possible values of the 
\begin_inset Quotes eld
\end_inset

app.routes
\begin_inset Quotes erd
\end_inset

 dict are 
\emph on
route type 
\emph default
configurations.
 These are usually defined as JavaScript dicts, where the 
\begin_inset Quotes eld
\end_inset

type
\begin_inset Quotes erd
\end_inset

 key is the name of the route type configuration, and the rest of the keys
 configure the type.
 During the application's bootstrap process, these dicts are turned in instances
 of classes in the Prudence.Routing API namespace (note that the class names
 have the first character of the type capitalized).
 The values set in the dict are sent to the class constructor.
\end_layout

\begin_layout Standard
As a shortcut, you can just use a string value (the 
\begin_inset Quotes eld
\end_inset

type
\begin_inset Quotes erd
\end_inset

 name) instead of a full dict, however when used this way you must accept
 the default configuration.
 There are also special alternate forms for some of the commonly used types,
 such as 
\begin_inset Quotes eld
\end_inset

!
\begin_inset Quotes erd
\end_inset

 for the 
\begin_inset Quotes eld
\end_inset

hidden
\begin_inset Quotes erd
\end_inset

 type and JavaScript arrays for the 
\begin_inset Quotes eld
\end_inset

chain
\begin_inset Quotes erd
\end_inset

 type.
\end_layout

\begin_layout Standard
We will summarize all the route types briefly here, arranged according to
 usage categories, and will refer you to the API documentation for a complete
 reference.
 Note that some route type configurations allow nesting of further route
 type configurations.
\end_layout

\begin_layout Subsubsection
Routing
\end_layout

\begin_layout Paragraph
dispatch
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

dispatch
\begin_inset Quotes erd
\end_inset

 type with an 
\begin_inset Quotes eld
\end_inset

id
\begin_inset Quotes erd
\end_inset

 param, or any string starting with the 
\begin_inset Quotes eld
\end_inset

@
\begin_inset Quotes erd
\end_inset

 character, to configure a dispatch mapping.
 For example, {type: 'dispatch', id: 'person'} is identical to '@person'.
 If you use 
\begin_inset Quotes eld
\end_inset

@
\begin_inset Quotes erd
\end_inset

, you can also optionally use a 
\begin_inset Quotes eld
\end_inset

:
\begin_inset Quotes erd
\end_inset

 to specify the 
\begin_inset Quotes eld
\end_inset

dispatcher
\begin_inset Quotes erd
\end_inset

 param, for example: 
\begin_inset Quotes eld
\end_inset

@profile:person
\begin_inset Quotes erd
\end_inset

 is identical to {type: 'dispatch', dispatcher: 'profile', id: 'person'}.
 If 
\begin_inset Quotes eld
\end_inset

dispatcher
\begin_inset Quotes erd
\end_inset

 is not specified, it defaults to 
\begin_inset Quotes eld
\end_inset

javascript
\begin_inset Quotes erd
\end_inset

.
 The unique ID should match a manual resource handle by your dispatcher,
 otherwise a 404 error (
\begin_inset Quotes eld
\end_inset

not found
\begin_inset Quotes erd
\end_inset

) will result.
 The 
\begin_inset Quotes eld
\end_inset

dispatcher
\begin_inset Quotes erd
\end_inset

 param's value can be any key from the app.dispatchers dict.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Dispatch"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Dispatch"

\end_inset

 class.
\end_layout

\begin_layout Paragraph
capture
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

capture
\begin_inset Quotes erd
\end_inset

 type with a 
\begin_inset Quotes eld
\end_inset

uri
\begin_inset Quotes erd
\end_inset

 param, or any string starting with the 
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset

 character, to configure a capture.
 For example, {type: 'capture', uri: '/user/profile/'} is identical to '/user/pr
ofile/'.
 Note that adding a 
\begin_inset Quotes eld
\end_inset

!
\begin_inset Quotes erd
\end_inset

 character at the end of the URI (not considered as part of the actual target
 URI) is a shortcut for 
\emph on
also
\emph default
 hiding the target URI.
 Capturing-and-hiding is a common use case.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Capture"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Capture"

\end_inset

 class.
\end_layout

\begin_layout Paragraph

\series bold
hidden
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

!
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

hidden
\begin_inset Quotes erd
\end_inset

 string values to hide a URI template.
 Prudence will always return a 404 error (
\begin_inset Quotes eld
\end_inset

not found
\begin_inset Quotes erd
\end_inset

) for this match.
 Note that internal requests always bypass this limitation, and so this
 functionality is useful if you want some URIs available in the internal
 URI-space but not the public one.
 This special value is not actually handled by a class, but rather is configured
 into the current router.
\end_layout

\begin_layout Paragraph
addSlash
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

addSlash
\begin_inset Quotes erd
\end_inset

 type for a permanent client redirect from the URI template to the original
 URI with a trailing slash added.
 An easy way to enforce trailing slashes in your application.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.AddSlash"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.AddSlash"

\end_inset

 class.
\end_layout

\begin_layout Paragraph
resource
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

resource
\begin_inset Quotes erd
\end_inset

 type with a 
\begin_inset Quotes eld
\end_inset

class
\begin_inset Quotes erd
\end_inset

 param to attach a Restlet 
\begin_inset CommandInset href
LatexCommand href
name "ServerResource"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/resource/ServerResource.html"

\end_inset

.
 This is an easy way to combine Java-written Restlet libraries into your
 Prudence applications.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Resource"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Resource"

\end_inset

 class.
\end_layout

\begin_layout Subsubsection
Mapping
\end_layout

\begin_layout Paragraph
static
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

static
\begin_inset Quotes erd
\end_inset

 type to create a static resource handler.
 By default uses the application's 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

 subdirectory for its 
\begin_inset Quotes eld
\end_inset

root
\begin_inset Quotes erd
\end_inset

.
 Note that if you include it in a 
\begin_inset Quotes eld
\end_inset

chain
\begin_inset Quotes erd
\end_inset

 with 
\begin_inset Quotes eld
\end_inset

manual
\begin_inset Quotes erd
\end_inset

 and/or 
\begin_inset Quotes eld
\end_inset

scriptlet
\begin_inset Quotes erd
\end_inset

, it should be the last entry in the chain.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Static"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Static"

\end_inset

 class.
\end_layout

\begin_layout Paragraph
manual
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

manual
\begin_inset Quotes erd
\end_inset

 type to create a static resource handler.
 By default uses the application's 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

 subdirectory for its 
\begin_inset Quotes eld
\end_inset

root
\begin_inset Quotes erd
\end_inset

.
 Important limitation: 
\emph on
All
\emph default
 uses of this class in the same application share the same configuration.
 Only the first found configuration will take hold and will be shared by
 other instances.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Manual"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Manual"

\end_inset

 class.
 [See Implementing Resources]
\end_layout

\begin_layout Paragraph
scriptlet
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

scriptlet
\begin_inset Quotes erd
\end_inset

 type to create a static resource handler.
 By default uses the application's 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

 subdirectory for its 
\begin_inset Quotes eld
\end_inset

root
\begin_inset Quotes erd
\end_inset

.
 Important limitation: 
\emph on
All
\emph default
 uses of this class in the same application share the same configuration.
 Only the first found configuration will take hold and will be shared by
 other instances.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Scriptlet"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Scriptlet"

\end_inset

 class.
 [See Implementing Resources]
\end_layout

\begin_layout Subsubsection
Combining
\end_layout

\begin_layout Paragraph
chain
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

chain
\begin_inset Quotes erd
\end_inset

 type with a 
\begin_inset Quotes eld
\end_inset

restlets
\begin_inset Quotes erd
\end_inset

 param (a JavaScript array), or just a JavaScript array, to create a fallback
 chain.
 The values of the array can be any route type configuration, allowing for
 nesting.
 They will be tested in order: the first value that 
\emph on
doesn't
\emph default
 return a 404 (
\begin_inset Quotes eld
\end_inset

not found
\begin_inset Quotes erd
\end_inset

) error will have its value returned.
 This is very commonly used to combine mapping types, for example: ['manual',
 'scriptlet', 'static'].
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Chain"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Chain"

\end_inset

 class.
\end_layout

\begin_layout Paragraph
router
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

router
\begin_inset Quotes erd
\end_inset

 type with a 
\begin_inset Quotes eld
\end_inset

routes
\begin_inset Quotes erd
\end_inset

 param (a JavaScript dict) to create a router.
 The values of the dict can be any route type configuration, allowing for
 nesting.
 This is in fact how Prudence creates the root router (app.routes).
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Router"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Router"

\end_inset

 class.
\end_layout

\begin_layout Subsubsection
Filtering
\end_layout

\begin_layout Paragraph
filter
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

filter
\begin_inset Quotes erd
\end_inset

 type with the 
\begin_inset Quotes eld
\end_inset

library
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 params to create a filter.
 
\begin_inset Quotes eld
\end_inset

library
\begin_inset Quotes erd
\end_inset

 is the document name (from the application's 
\begin_inset Quotes eld
\end_inset

/libraries/
\begin_inset Quotes erd
\end_inset

 subdirectory), while 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 is any route type configuration, allowing for nesting.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Filter"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Filter"

\end_inset

 class.
 [See Filtering]
\end_layout

\begin_layout Paragraph
cacheControl
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

cacheControl
\begin_inset Quotes erd
\end_inset

 type with a 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 param to create a cache control filter.
 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 is any route type configuration, allowing for nesting.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.CacheControl"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.CacheControl"

\end_inset

 class.
\end_layout

\begin_layout Paragraph
javaScriptUnifyMinify
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

javaScriptUnifyMinify
\begin_inset Quotes erd
\end_inset

 type with a 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 param to create a JavaScript unify/minify filter.
 
\begin_inset Quotes eld
\end_inset

roots
\begin_inset Quotes erd
\end_inset

 defaults to your application's 
\begin_inset Quotes eld
\end_inset

/resources/scripts/
\begin_inset Quotes erd
\end_inset

 and your container 
\begin_inset Quotes eld
\end_inset

/libraries/web/scripts/
\begin_inset Quotes erd
\end_inset

 subdirectories.
 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 is any route type configuration, allowing for nesting.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.JavaScriptUnifyMinify"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.JavaScriptUnifyMinify"

\end_inset

 class.
\end_layout

\begin_layout Paragraph
cssUnifyMinify
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

cssScriptUnifyMinify
\begin_inset Quotes erd
\end_inset

 type with a 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 param to create a CSS unify/minify filter.
 
\begin_inset Quotes eld
\end_inset

roots
\begin_inset Quotes erd
\end_inset

 defaults to your application's 
\begin_inset Quotes eld
\end_inset

/resources/style/
\begin_inset Quotes erd
\end_inset

 and your container 
\begin_inset Quotes eld
\end_inset

/libraries/web/style/
\begin_inset Quotes erd
\end_inset

 subdirectories.
 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 is any route type configuration, allowing for nesting.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.CssUnifyMinify"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.CssUnifyMinify"

\end_inset

 class.
\end_layout

\begin_layout Paragraph
zuss
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

zuss
\begin_inset Quotes erd
\end_inset

 type with a 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 param to create a 
\begin_inset CommandInset href
LatexCommand href
name "ZUSS"
target "https://github.com/tomyeh/ZUSS"

\end_inset

 compiling filter.
 
\begin_inset Quotes eld
\end_inset

roots
\begin_inset Quotes erd
\end_inset

 defaults to your application's 
\begin_inset Quotes eld
\end_inset

/resources/style/
\begin_inset Quotes erd
\end_inset

 and your container 
\begin_inset Quotes eld
\end_inset

/libraries/web/style/
\begin_inset Quotes erd
\end_inset

 subdirectories.
 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 is any route type configuration, allowing for nesting.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Zuss"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Zuss"

\end_inset

 class.
\end_layout

\begin_layout Subsection
Resource Mapping
\end_layout

\begin_layout Standard
Resource mapping is the most straightforward and most familiar technique
 and paradigm to create your URI-space.
 It relies on a one-to-one mapping between the filesystem (by default files
 under your application's 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

 subdirectory) to the URI space.
 This is how static web servers, as well as the the PHP, ASP and JSP platforms
 work.
\end_layout

\begin_layout Standard
Prudence differs from the familiar paradigm in three ways:
\end_layout

\begin_layout Enumerate
For manual and scriptlet resources, Prudence hides filename extensions from
 the URIs by default.
 Thus, 
\begin_inset Quotes eld
\end_inset

/resources/myresource.m.js
\begin_inset Quotes erd
\end_inset

 would be mapped to 
\begin_inset Quotes eld
\end_inset

/resources/myresource/
\begin_inset Quotes erd
\end_inset

.
 The reasons are two: 1) clients should not have to know about your internal
 implementation of the resource, and 2) it allows for cleaner and more coherent
 URIs.
 Note the filename extensions are used internally by Prudence (differently
 for manual and scriptlet resources).
 Note that this does not apply to static resources: 
\begin_inset Quotes eld
\end_inset

/resources/images/logo.png
\begin_inset Quotes erd
\end_inset

 will be mapped to 
\begin_inset Quotes eld
\end_inset

/images/logo.png
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
For manual and scriptlet resources, Prudence by default 
\emph on
requires 
\emph default
trailing slashes for URIs.
 If clients do not include the trailing slash, they will receive a 404 (
\begin_inset Quotes eld
\end_inset

not found
\begin_inset Quotes erd
\end_inset

) error.
 Again, the reasons are two: 1) it makes relative URIs always unambiguous,
 which is especially relevant in HTML and CSS, and 2) it clarifies the extent
 of URI template variables.
 As a courtesy to sloppy clients, you can manually add a permanent redirection
 to a trailing slash, using the 
\begin_inset Quotes eld
\end_inset

addSlash
\begin_inset Quotes erd
\end_inset

 route type.
 For example:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/main', 'addSlash',
\end_layout

\begin_layout Plain Layout

	'/person/profile/{id}': 'addSlash'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
This mapped URI-space can be manipulated using URI hiding and URI capturing,
 allowing you to support URI templates and rewrite URIs.
\end_layout

\begin_layout Subsubsection
Capturing URI Templates
\end_layout

\begin_layout Standard
Later on we'll present URI capturing as an alternative paradigm to resource
 mapping.
 However, capturing also has a specific use case in conjunction with resource
 mapping, which we'll present here.
\end_layout

\begin_layout Standard
Specifically, URI templates can be captured to mapped resources.
 For example, let's say you have a scriptlet resource file at 
\begin_inset Quotes eld
\end_inset

/resources/user/profile.s.html
\begin_inset Quotes erd
\end_inset

, but instead of it being mapped to the URI 
\begin_inset Quotes eld
\end_inset

/user/profile/
\begin_inset Quotes erd
\end_inset

, you want to access it via a URI template: 
\begin_inset Quotes eld
\end_inset

/user/profile/{userId}/
\begin_inset Quotes erd
\end_inset

.
 Furthermore, you want to make sure that 
\begin_inset Quotes eld
\end_inset

/user/profile/
\begin_inset Quotes erd
\end_inset

 cannot be accessed 
\emph on
without
\emph default
 the user ID.
 To capture and hide together you can use the following shortcut:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/user/profile/{userId}/': '/user/profile/!'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can also configure capturing and hiding separately.
 The following is equivalent to the above:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/user/profile/{userId}/': '/user/profile/',
\end_layout

\begin_layout Plain Layout

	'/user/profile/': '!'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A URI such as 
\begin_inset Quotes eld
\end_inset

/user/profile/4431/
\begin_inset Quotes erd
\end_inset

 would then be internally redirected to the 
\begin_inset Quotes eld
\end_inset

/user/profile/
\begin_inset Quotes erd
\end_inset

 URI.
 Within your 
\begin_inset Quotes eld
\end_inset

profile.s.html
\begin_inset Quotes erd
\end_inset

 file, you could then access the captured value via the conversation.locals
 API:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<html>
\end_layout

\begin_layout Plain Layout

<body>
\end_layout

\begin_layout Plain Layout

<p>
\end_layout

\begin_layout Plain Layout

User profile for user <%= conversation.locals.get('userId') %>.
\end_layout

\begin_layout Plain Layout

</p>
\end_layout

\begin_layout Plain Layout

</body>
\end_layout

\begin_layout Plain Layout

</html>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We've used a scriptlet resource in this example, but capturing can be used
 for both scriptlet and manual resources.
 The same conversation.locals API is used in both cases.
\end_layout

\begin_layout Subsubsection
Problems with Resource Mapping
\end_layout

\begin_layout Standard
While resource mapping is very straightforward---one file per resource (or
 per type of resource if you capture URI templates)---it may be problematic
 in three ways:
\end_layout

\begin_layout Enumerate
In large URI-spaces you may suffer from having too many files.
 Though you can use 
\begin_inset Quotes eld
\end_inset

/libraries/
\begin_inset Quotes erd
\end_inset

 to share code between your resources, mapping still requires a file per
 resource type.
\end_layout

\begin_layout Enumerate
Mapped manual resources must have all their entry points (handleInit, handleGet,
 etc.) defined as global functions.
 This makes it awkward to use object oriented programming or other kinds
 of code reuse.
 If you define your resources as classes, you would have to hook your class
 instance via the global entry points.
\end_layout

\begin_layout Enumerate
The URI-space is your public-facing structure, but your internal implementation
 may benefit from an entirely different organization.
 For example, some resources my be backed by a relational database, others
 by a memory cache, and others by yet another subsystem.
 It may make sense for you to organize your code according to subsystems,
 rather than the public URI-space.
 For this reason, you would want the URI-space configuration to be separate
 from your code organization.
\end_layout

\begin_layout Standard
These problems might not be relevant to your application.
 But if they are, you may prefer the URI/resource separation paradigm, which
 can be implemented via URI capturing or resource dispatching, documented
 below.
\end_layout

\begin_layout Subsection
URI Capturing
\end_layout

\begin_layout Standard
URI capturing, for the purpose of the URI/resource separation paradigm,
 is only applicable to scriptlet resources.
 For manual resources, use resource dispatching (explained below) instead.
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

URI capturing
\begin_inset Quotes erd
\end_inset

 is implemented as server-side redirection (also called 
\begin_inset Quotes eld
\end_inset

URI rewriting
\begin_inset Quotes erd
\end_inset

), with the added ability to use hidden URIs as the destination.
 This includes both scriptlet resource files in you application's 
\begin_inset Quotes eld
\end_inset

/libraries/
\begin_inset Quotes erd
\end_inset

 subdirectory as well as URIs routed to the 
\begin_inset Quotes eld
\end_inset

hidden
\begin_inset Quotes erd
\end_inset

 route type.
\end_layout

\begin_layout Standard
This straightforward ability gives you complete control over URI/resource
 separation: you can put your scriptlet resources under 
\begin_inset Quotes eld
\end_inset

/libraries/
\begin_inset Quotes erd
\end_inset

, using any directory structure that makes sense to you, and capture the
 public-facing URI in your routing.js.
\end_layout

\begin_layout Standard
For example, let's assume that you have the following files in 
\begin_inset Quotes eld
\end_inset

/libraries/
\begin_inset Quotes erd
\end_inset

: 
\begin_inset Quotes eld
\end_inset

/database/profile.html
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

/database/preferences.html
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

/cache/session.html
\begin_inset Quotes erd
\end_inset

, which you organized in subdirectories according to the technologies used.
 Your URI-space can be defined thus:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/user/{userId}/preferences/': '/database/preferences/',
\end_layout

\begin_layout Plain Layout

	'/user/{userId}/profile/': '/database/profile/',
\end_layout

\begin_layout Plain Layout

	'/user/{userId}/session/': '/cache/session/'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Resource Dispatching
\end_layout

\begin_layout Standard
Resource dispatching is only available for manual resources.
 It just doesn't make sense for scriptlet and static resources: however,
 URI capturing (explained above) provides equivalent URI/resource separation
 and can be used for non-manual resources.
\end_layout

\begin_layout Standard
Configuring it is fairly straightforward.
 In routing.js, use the 
\begin_inset Quotes eld
\end_inset

dispatch
\begin_inset Quotes erd
\end_inset

 route type configuration, or the 
\begin_inset Quotes eld
\end_inset

@
\begin_inset Quotes erd
\end_inset

 shortcut:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/session/{sessionId}/': '@session',
\end_layout

\begin_layout Plain Layout

	'/user/{userId}/preferences/': '@user'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The IDs must each be unique in your application.
 You must furthermore configure your dispatchers.
 There is one dispatcher per programming language, and JavaScript is the
 default dispatcher.
 We can configure it like so:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.dispatchers = {
\end_layout

\begin_layout Plain Layout

	javascript: '/resources/'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

 value is the document name to be executed from your application's 
\begin_inset Quotes eld
\end_inset

/libraries/
\begin_inset Quotes erd
\end_inset

 subdirectory.
 In our case, we must thus also have a 
\begin_inset Quotes eld
\end_inset

/libraries/resources.js
\begin_inset Quotes erd
\end_inset

 file:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var UserResource = function() {
\end_layout

\begin_layout Plain Layout

	this.handleInit = function(conversation) {
\end_layout

\begin_layout Plain Layout

		conversation.addMediaTypeByName('text/plain')
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	this.handleGet = function(conversation) {
\end_layout

\begin_layout Plain Layout

		return 'This is user #' + conversation.locals.get('userId')
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

resources = {
\end_layout

\begin_layout Plain Layout

	session: {
\end_layout

\begin_layout Plain Layout

		handleInit: function(conversation) {
\end_layout

\begin_layout Plain Layout

			conversation.addMediaTypeByName('text/plain')
\end_layout

\begin_layout Plain Layout

		},
\end_layout

\begin_layout Plain Layout

		handleGet: function(conversation) {
\end_layout

\begin_layout Plain Layout

			return 'This is session #' + conversation.locals.get('sessionId')
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	},
\end_layout

\begin_layout Plain Layout

	user: new UserResource()
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The dispatcher will execute the above library and look for the 
\begin_inset Quotes eld
\end_inset

resources
\begin_inset Quotes erd
\end_inset

 dict, which maps dispatch IDs to resource implementations.
 In our example we've mapped the 
\begin_inset Quotes eld
\end_inset

session
\begin_inset Quotes erd
\end_inset

 dispatch ID to a dict, and used simple JavaScript object-oriented programming
 for the 
\begin_inset Quotes eld
\end_inset

user
\begin_inset Quotes erd
\end_inset

 dispatch ID.
 (Note that the Sincerity.Classes facility offers a comprehensive object-oriented
 system for JavaScript, but we preferred more straightforward code for this
 example.)
\end_layout

\begin_layout Standard
As you can see, the resource.js file does not refer to URIs, but instead
 to dispatch IDs, which you can dispatch as you see fit.
\end_layout

\begin_layout Subsubsection
Inversion of Control
\end_layout

\begin_layout Standard
Object-oriented inheritance is one useful way to reuse code while allowing
 for special implementations.
 Additionally, Prudence allows for a straightforward IoC (Inversion of Control)
 mechanism.
\end_layout

\begin_layout Standard
When defining the dispatch, you can also set conversation.locals to set values:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/user/{userId}/preferences': {type: 'dispatch', id: 'user', locals: {section:
 'preferences'}},
\end_layout

\begin_layout Plain Layout

	'/user/{userId}/profile: {type: 'dispatch', id: 'user', locals: {section:
 profile'}}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that both URI templates are dispatched to the exact same ID, but the
 
\begin_inset Quotes eld
\end_inset

locals
\begin_inset Quotes erd
\end_inset

 dict used is different for each.
 In your resource implementation, you can allow for different behavior according
 to the value of the 
\begin_inset Quotes eld
\end_inset

section
\begin_inset Quotes erd
\end_inset

 conversation.local.
 This allows you to configure your resource in routing.js, rather from its
 implementation in resource.js.
 In other words, 
\begin_inset Quotes eld
\end_inset

control
\begin_inset Quotes erd
\end_inset

 is 
\begin_inset Quotes eld
\end_inset

inverted,
\begin_inset Quotes erd
\end_inset

 via value injection.
\end_layout

\begin_layout Subsubsection
Other Programming Languages
\end_layout

\begin_layout Standard
Resource dispatching is also supported for Groovy, Python, Ruby, PHP and
 Clojure.
 To use them, you must specify the dispatcher together with the dispatch
 ID in routing.js, and configure that specific dispatcher.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/session/{sessionId}/': '@python:session'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

app.dispatchers = {
\end_layout

\begin_layout Plain Layout

	python: '/resources/'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Custom Dispatching
\end_layout

\begin_layout Standard
Dispatching is handled by special manual resources that can be found in
 the 
\begin_inset Quotes eld
\end_inset

/libraries/scripturian/prudence/dispatch/
\begin_inset Quotes erd
\end_inset

 directory of your container.
 For example, the JavaScript dispatcher is 
\begin_inset Quotes eld
\end_inset

/libraries/scripturian/prudence/dispatch/javascript.js
\begin_inset Quotes erd
\end_inset

.
 You are encouraged to look at the code there in order to understand how
 dispatching works: it's quite straightforward.
\end_layout

\begin_layout Standard
You can furthermore write your own dispatcher to handle more complex dispatching
 paradigms.
 To configure it:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.dispatchers = {
\end_layout

\begin_layout Plain Layout

	javascript: {
\end_layout

\begin_layout Plain Layout

		library: '/resources/',
\end_layout

\begin_layout Plain Layout

		manual: '/dispatchers/mydispatcher/'
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You would then need a 
\begin_inset Quotes eld
\end_inset

/libraries/dispatchers/mydispatcher.js
\begin_inset Quotes erd
\end_inset

 file under your application's subdirectory.
\end_layout

\begin_layout Subsection
app.hosts
\end_layout

\begin_layout Subsection
The Internal URI-space
\end_layout

\begin_layout Subsection
app.preheat
\end_layout

\begin_layout Subsection
Architecture Tips
\end_layout

\begin_layout Standard
REST does not standardize URI-spaces, and indeed has little to say about
 URI design.
 However, it does 
\emph on
imply
\emph default
 a preference for certain architectural principles.
\end_layout

\begin_layout Standard
It's a good idea to think very carefully about your URI-space.
 A RESTful URI-space can help you define well-encapsulated RESTful resources.
\end_layout

\begin_layout Subsubsection
Nouns vs.
 Verbs
\end_layout

\begin_layout Standard
It's useful to think of URIs as syntactic 
\emph on
nouns
\emph default
, a grammatical counterpart to HTTP's 
\emph on
verbs
\emph default
.
 In other worlds, make sure that you do not include verbs in your URIs.
 Examples:
\end_layout

\begin_layout Itemize
Good: 
\begin_inset Quotes eld
\end_inset

/service/{id}/status/
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Bad: 
\begin_inset Quotes eld
\end_inset

/service/{id}/start/
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

/service/{id}/stop/
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
What is wrong with verbs in URIs?
\end_layout

\begin_layout Standard
One potential problem is clarity.
 Which HTTP verb should be used on a verb URI? Do you need to POST, PUT
 or DELETE to 
\begin_inset Quotes eld
\end_inset

/service/{id}/stop/
\begin_inset Quotes erd
\end_inset

 in order to stop the service? Of course, you can support all and document
 this, but it won't be immediately obvious to the user.
\end_layout

\begin_layout Standard
A second potential problem is that you need to keep increasing the size
 of your URI-space the more actions of this sort you want to support.
 [SO?]
\end_layout

\begin_layout Standard
A third, more serious potential problem is idempotency.
 The idempotent verbs PUT and DELETE may be optimized by the HTTP infrastructure
 (for example, a smart load balancer) such that requests arrive more than
 once: this is allowed by the very definition of idempotency.
 However, your operations 
\emph on
may
\emph default
 not be semantically idempotent.
 For example, if a 
\begin_inset Quotes eld
\end_inset

stop
\begin_inset Quotes erd
\end_inset

 is sent to an already-stopped service, it may return an 
\begin_inset Quotes eld
\end_inset

already stopped
\begin_inset Quotes erd
\end_inset

 500 error.
 In this case, if the infrastructure allows for two 
\begin_inset Quotes eld
\end_inset

stop
\begin_inset Quotes erd
\end_inset

 commands to come through, then the user may get an error even though the
 operation succeeded for the first 
\begin_inset Quotes eld
\end_inset

stop.
\begin_inset Quotes erd
\end_inset

 There's an easy way around this: simply allow 
\emph on
only
\emph default
 POST, the non-idempotent verb, for all such operations.
 The infrastructure will never allow more than request to come through per
 POST.
 However, if you enforce the use of POST, you will lose the ability of the
 infrastructure to optimize for non-idempotency.
 POST is the least scalable HTTP verb.
\end_layout

\begin_layout Standard
The bottom line is that if you standardize on only using nouns for your
 URIs, you will avoid many of these semantic entanglements.
\end_layout

\begin_layout Standard
Note: Beware of gerunds! A URI such as 
\begin_inset Quotes eld
\end_inset

/service/{id}/stopping/
\begin_inset Quotes erd
\end_inset

 is technically a noun, but allows for some verb-related problems to creep
 in.
\end_layout

\begin_layout Subsubsection
Do You Really Need REST?
\end_layout

\begin_layout Standard
In the above section, it was suggested that you prefer nouns to verbs.
 However, this preference may not make much sense to apply in your application.
 Your application may be very command-oriented, such that you will end up
 with a very small set of 
\begin_inset Quotes eld
\end_inset

noun
\begin_inset Quotes erd
\end_inset

 URIs that need to support a vast amount of commands.
\end_layout

\begin_layout Standard
REST shines because it is based on a tiny set of very tightly defined verbs:
 GET, POST, PUT, DELETE.
 The entire infrastructure is highly optimized around them: load balancers,
 caches, browsers, gateways, etc., all should know how best to handle each
 of these for maximum scalability and reliability.
 But, it's entirely possible that your needs cannot be easily satisfied
 by just four verbs.
\end_layout

\begin_layout Standard
And that's OK.
 REST is not always the best solution for APIs.
\end_layout

\begin_layout Standard
Instead, take a look at RPC (Remote Procedure Call) mechanisms.
 The Diligence framework, based on Prudence, provides robust and powerful
 support for JSON-RPC, XML-RPC and ExtDirect, allowing you to hook a JavaScript
 function on the server directly to a URI.
 In terms of HTTP, these protocols all use HTTP POST, and do not leverage
 the HTTP infrastructure as well as a more fully RESTful API.
 But, one size does not fit all, an an RPC-based solution may prove a better
 match for your project.
\end_layout

\begin_layout Standard
It's also perfectly possible to allow for both REST and RPC.
 Use each approach where it is most appropriate.
\end_layout

\begin_layout Subsubsection
Hierarchies
\end_layout

\begin_layout Standard
It's entirely a matter of convention that the use of 
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset

 in URIs implies hierarchy.
 Historically, the convention was likely imported from filesystem paths,
 where a name before a 
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset

 signifies a directory rather than a file.
\end_layout

\begin_layout Standard
This convention is useful because it's very familiar to users, but additionally
 it implies semantic properties that can add clarity and power to your resource
 design.
 There are two possible semantic principles you may consider:
\end_layout

\begin_layout Enumerate
A descendant resource 
\emph on
belongs to
\emph default
 its ancestor, such that resources have cascading relationships in the hierarchy.
 This implies two rules:
\end_layout

\begin_deeper
\begin_layout Enumerate
Operations on a resource 
\emph on
may
\emph default
 affect descendants.
 This rule is most obvious when applied to the DELETE verb: for example,
 if you delete 
\begin_inset Quotes eld
\end_inset

/user/{id}/
\begin_inset Quotes erd
\end_inset

, then it is expected that the resources at 
\begin_inset Quotes eld
\end_inset

/user/{id}/profile/
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

/user/{id}/preferences/
\begin_inset Quotes erd
\end_inset

 also be deleted.
 A PUT, too, would also affect the descendant resources.
\end_layout

\begin_layout Enumerate
Operations on a resource 
\emph on
should not
\emph default
 affect ancestors.
 In other words, a descendant's state is isolated from its ancestors.
 For example, if I send a POST to 
\begin_inset Quotes eld
\end_inset

/user/{id}/profile/
\begin_inset Quotes erd
\end_inset

, the representation at 
\begin_inset Quotes eld
\end_inset

/user/{id}/
\begin_inset Quotes erd
\end_inset

 should remain unaltered.
\end_layout

\end_deeper
\begin_layout Enumerate
A descendant resource 
\emph on
belongs to
\emph default
 its ancestor and also represents 
\emph on
an aspect of
\emph default
 its ancestor, such that operations on a resource can be fine-tuned to particula
r aspects of it.
 This implies three rules:
\end_layout

\begin_deeper
\begin_layout Enumerate
Descendant representations 
\emph on
are included
\emph default
 in ancestor representations.
 For example, a GET on 
\begin_inset Quotes eld
\end_inset

/service/{id}/
\begin_inset Quotes erd
\end_inset

 would include information about the status that you would see if you GET
 on 
\begin_inset Quotes eld
\end_inset

/service/{id}/status/
\begin_inset Quotes erd
\end_inset

.
 The latter URI makes it easier for the client to direct operations at the
 status aspect.
\end_layout

\begin_layout Enumerate
Operations on a resource 
\emph on
may
\emph default
 affect descendants.
 See above.
\end_layout

\begin_layout Enumerate
Operations on a resource 
\emph on
will
\emph default
 affect ancestors.
 This is the 
\emph on
opposite 
\emph default
of the above: the descendant's state is 
\emph on
not isolated 
\emph default
from its ancestors.
 For example, a POST to 
\begin_inset Quotes eld
\end_inset

/service/{id}/status/
\begin_inset Quotes erd
\end_inset

 would surely also affect 
\begin_inset Quotes eld
\end_inset

/service/{id}/
\begin_inset Quotes erd
\end_inset

, which includes the status.
\end_layout

\end_deeper
\begin_layout Standard
You can see from the difference between rule 1.b and 2.c.
 that it's important to carefully define the 
\emph on
nature
\emph default
 of your hierarchical relationships.
 Unlike filesystem directory hierarchies, in a URI-space there is no single
 standard or interpretation of what of a hierarchy means.
\end_layout

\begin_layout Standard
Note that a format should not be considered 
\begin_inset Quotes eld
\end_inset

an aspect
\begin_inset Quotes erd
\end_inset

 in the sense used in principle 2.
 For example, 
\begin_inset Quotes eld
\end_inset

/service/{id}/html/
\begin_inset Quotes erd
\end_inset

 would not be a good way to support an HTML format for 
\begin_inset Quotes eld
\end_inset

/service/{id}/
\begin_inset Quotes erd
\end_inset

.
 The reason is that you would be allowing for more than one URI for the
 same encapsulated resource, creating confusion for users.
 For example, it's not immediately clear what would happen if they DELETE
 
\begin_inset Quotes eld
\end_inset

/service/{id}/html/
\begin_inset Quotes erd
\end_inset

.
 Would that just remove the ability to represent the service as HTML? Or
 delete the service itself?
\end_layout

\begin_layout Standard
Supporting multiple formats is best handled with content negotiation, within
 the REST architecture.
 If further formatting is required, URI query parameters can be used.
 For example: 
\begin_inset Quotes eld
\end_inset

/service/{id}/?indent=2
\begin_inset Quotes erd
\end_inset

 might return a JSON representation with 2-space indentation.
\end_layout

\begin_layout Subsubsection
Plural vs.
 Singular
\end_layout

\begin_layout Subsubsection
Documentation
\end_layout

\begin_layout Standard
If you create a programming language API, you will surely want to document
 it in a human language.
 You will want to define the acceptable types and usages of function arguments,
 describe return values, possible raises exceptions, add implementation
 and performance notes, etc.
 Many programming languages include tools for embedding such documentation
 as comments in the source code, and generating a reference manual from
 it.
\end_layout

\begin_layout Standard
Consider that documenting your URI-space is just as important.
 A tool to generate such documentation for you is being considered for a
 future version of Prudence.
 Until it is available, consider adopting a resource documentation standard
 for your project.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

 * This resource represents a service running on the server.
 Servers have unique
\end_layout

\begin_layout Plain Layout

 * IDs defined by integers.
 A service can be either active or inactive.
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * Use POST to change the name or status of an existing service.
 You may
\end_layout

\begin_layout Plain Layout

 * not use it change the ID of an existing service.
 PUT will create a new
\end_layout

\begin_layout Plain Layout

 * service, and DELETE will stop and remove it.
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * Implementation note: if you PUT a service with an ID that already exists,
 then
\end_layout

\begin_layout Plain Layout

 * it will only stop and restart the service rather than removing/recreate
 it,
\end_layout

\begin_layout Plain Layout

 * which would be too resource intensive.
 Use DELETE if you absolutely need the
\end_layout

\begin_layout Plain Layout

 * service to be removed first, or set the "clean" query param to "true"
 to
\end_layout

\begin_layout Plain Layout

 * force removal.
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * URI: /service/{id:decimal}/
\end_layout

\begin_layout Plain Layout

 * Aspects: /service/{id:decimal}/status/
\end_layout

\begin_layout Plain Layout

 * Verbs: GET, POST, PUT, DELETE
\end_layout

\begin_layout Plain Layout

 * Media types: application/json, application/xml, text/plain (as JSON)
\end_layout

\begin_layout Plain Layout

 * Query params:
\end_layout

\begin_layout Plain Layout

 *  indent: decimal - if non-zero will return a human-readable indented
 version
\end_layout

\begin_layout Plain Layout

 *          of the representation with lines indented by the integer value
\end_layout

\begin_layout Plain Layout

 *  clean: boolean - if "true" or "yes" or "1" wil force removal of an existing
\end_layout

\begin_layout Plain Layout

 *         service during a PUT operation on an existing service
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * Representation as application/json:
\end_layout

\begin_layout Plain Layout

 *  {
\end_layout

\begin_layout Plain Layout

 *   "id": number,
\end_layout

\begin_layout Plain Layout

 *   "name": string (the service name),
\end_layout

\begin_layout Plain Layout

 *   "status": string:"active"|"inactive"
\end_layout

\begin_layout Plain Layout

 *  }
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * POST/PUT payload as application/json:
\end_layout

\begin_layout Plain Layout

 *  {
\end_layout

\begin_layout Plain Layout

 *   "name": ...
\end_layout

\begin_layout Plain Layout

 *   "status": ...
\end_layout

\begin_layout Plain Layout

 *  }
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

 * This resource represents the status of a service.
 
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * DELETE on this resource is identical to PUT or POST with "inactive".
\end_layout

\begin_layout Plain Layout

 * PUT and POST are handled identically.
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * URI: /service/{id:decimal}/status/
\end_layout

\begin_layout Plain Layout

 * Aspect of: /service/{id:decimal}/
\end_layout

\begin_layout Plain Layout

 * Verbs: GET, POST, PUT, DELETE
\end_layout

\begin_layout Plain Layout

 * Media types: text/plain
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * Representation as text/plain:
\end_layout

\begin_layout Plain Layout

 *   "active"|"inactive"
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\end_inset


\end_layout

\begin_layout Section
Implementing Resources
\end_layout

\begin_layout Subsection
Comparison Table
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top" width="4cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Manual
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Scriptlet
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Static
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Supports URI Mapping
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Supports URI Dispatching
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Filename Extension
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Determines programming language
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Determines MIME type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Determines MIME type
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Filename Pre-extension
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*.m.*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*.s.*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Programming Languages
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Determined by filename extension
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Determined by scriptlet tags (multiple languages possible per resource)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Content Negotiation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Manually determined in handleInit; multiple MIME types possible
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Single MIME type determined by filename extension; multiple encodings automatica
lly supported and cached
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Single MIME type determined by filename extension; multiple encodings automatica
lly supported
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Server-Side Caching
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Manual (via API)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Automatic (handled by Prudence)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Client-Side Caching
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Manual (via API)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Automatic (determined by server-side caching)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Can be added with CacheControlFilter
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Manual Resources
\end_layout

\begin_layout Subsubsection
Mapping vs.
 Dispatching
\end_layout

\begin_layout Subsubsection
handleGetInfo
\end_layout

\begin_layout Subsubsection
Controlling the Formats
\end_layout

\begin_layout Standard
Negotiated via handleInit: the order matters
\end_layout

\begin_layout Standard
You can check what was negotiated
\end_layout

\begin_layout Standard
But you can set it to whatever you want later
\end_layout

\begin_layout Subsubsection
Client-Side Caching
\end_layout

\begin_layout Standard
conversation.modificationDate, conversation.tag
\end_layout

\begin_layout Subsubsection
Server-Side Caching
\end_layout

\begin_layout Standard
Not supported directly.
\end_layout

\begin_layout Subsubsection
Integrating Textual Resources
\end_layout

\begin_layout Subsection
Scriptlet Resources
\end_layout

\begin_layout Standard
Must be mapped.
 In the future may be dispatched.
\end_layout

\begin_layout Subsubsection
Scriptlets
\end_layout

\begin_layout Subsubsection
Working with Different Programming Languages
\end_layout

\begin_layout Subsubsection
Controlling the Format
\end_layout

\begin_layout Standard
Rely on the extension (see static resources) or change it in code.
\end_layout

\begin_layout Subsubsection
Server-Side Caching
\end_layout

\begin_layout Subsubsection
Client-Side Caching
\end_layout

\begin_layout Subsubsection
Scriptlet Plugins
\end_layout

\begin_layout Subsection
Static Resources
\end_layout

\begin_layout Standard
Must be mapped.
\end_layout

\begin_layout Subsubsection
Controlling the Format
\end_layout

\begin_layout Subsubsection
Client-Side Caching
\end_layout

\begin_layout Subsubsection
CSS and JavaScript
\end_layout

\begin_layout Subsection
Integrating Java
\end_layout

\begin_layout Standard
Resources
\end_layout

\begin_layout Standard
Other Restlets
\end_layout

\begin_layout Section
Caching
\end_layout

\begin_layout Subsection
Introduction: Integrated Caching
\end_layout

\begin_layout Subsection
Server-Side Caching
\end_layout

\begin_layout Subsection
Client-Side Caching
\end_layout

\begin_layout Subsubsection
Content Negotiation
\end_layout

\begin_layout Section
Programming
\end_layout

\begin_layout Subsection
Introduction: Scripturian
\end_layout

\begin_layout Subsection
JavaScript
\end_layout

\begin_layout Subsection
Other Languages
\end_layout

\begin_layout Subsection
Execution Environments
\end_layout

\begin_layout Subsubsection
Bootstrap
\end_layout

\begin_layout Standard
Straightforward beginning-to-end script
\end_layout

\begin_layout Standard
Except for initialization tasks
\end_layout

\begin_layout Subsubsection
Manual Resources and Handlers
\end_layout

\begin_layout Subsubsection
Textual Resources
\end_layout

\begin_layout Subsubsection
Cron Tasks
\end_layout

\begin_layout Standard
Two options!
\end_layout

\begin_layout Subsection
APIs
\end_layout

\begin_layout Subsubsection
Scripturian API
\end_layout

\begin_layout Standard
executable
\end_layout

\begin_layout Subsubsection
Resource API
\end_layout

\begin_layout Standard
application
\end_layout

\begin_layout Standard
document
\end_layout

\begin_layout Subsubsection
JavaScript Libraries
\end_layout

\begin_layout Paragraph
Sincerity JavaScript Library
\end_layout

\begin_layout Itemize
/sincerity/calendar/
\end_layout

\begin_layout Itemize
/sincerity/classes/
\end_layout

\begin_layout Itemize
/sincerity/cryptography/
\end_layout

\begin_layout Itemize
/sincerity/files/
\end_layout

\begin_layout Itemize
/sincerity/iterators/
\end_layout

\begin_layout Itemize
/sincerity/json/
\end_layout

\begin_layout Itemize
/sincerity/jvm/
\end_layout

\begin_layout Itemize
/sincerity/localization/
\end_layout

\begin_layout Itemize
/sincerity/lucene/
\end_layout

\begin_layout Itemize
/sincerity/mail/
\end_layout

\begin_layout Itemize
/sincerity/objects/
\end_layout

\begin_layout Itemize
/sincerity/rhino/
\end_layout

\begin_layout Itemize
/sincerity/templates/
\end_layout

\begin_layout Itemize
/sincerity/xml/
\end_layout

\begin_layout Paragraph
Prudence JavaScript Library
\end_layout

\begin_layout Itemize
/prudence/blocks/
\end_layout

\begin_layout Itemize
/prudence/lazy/
\end_layout

\begin_layout Itemize
/prudence/logging/
\end_layout

\begin_layout Itemize
/prudence/resources/
\end_layout

\begin_layout Itemize
/prudence/tasks/
\end_layout

\begin_layout Paragraph
Libraries for Bootstrap and Configuration
\end_layout

\begin_layout Itemize
/sincerity/annotations/
\end_layout

\begin_layout Itemize
/sincerity/container/
\end_layout

\begin_layout Itemize
/prudence/routing/
\end_layout

\begin_layout Itemize
/prudence/lazy/
\end_layout

\begin_layout Section
Working in a Cluster
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Subsection
Shared Globals
\end_layout

\begin_layout Subsection
Task Farming
\end_layout

\begin_layout Section
Accepting Uploads
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Section
Cookies
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Section
Filtering
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Subsection
How Routing Works
\end_layout

\begin_layout Subsection
Injection
\end_layout

\begin_layout Subsection
Built-in Filters
\end_layout

\begin_layout Section
Configuring Applications
\end_layout

\begin_layout Subsection
settings.js
\end_layout

\begin_layout Subsubsection
app.settings
\end_layout

\begin_layout Subsubsection
app.settings.description
\end_layout

\begin_layout Subsubsection
app.settings.errors
\end_layout

\begin_layout Subsubsection
app.settings.code
\end_layout

\begin_layout Subsubsection
app.settings.uploads
\end_layout

\begin_layout Subsubsection
app.settings.mediaTypes
\end_layout

\begin_layout Subsubsection
app.globals
\end_layout

\begin_layout Subsection
routing.js
\end_layout

\begin_layout Subsubsection
app.hosts
\end_layout

\begin_layout Subsubsection
app.routes
\end_layout

\begin_layout Subsubsection
app.errors
\end_layout

\begin_layout Subsubsection
app.dispatchers
\end_layout

\begin_layout Subsection
Scheduling Tasks (Cron)
\end_layout

\begin_layout Subsection
Default Directories
\end_layout

\begin_layout Standard
/resources/
\end_layout

\begin_layout Standard
/libraries/
\end_layout

\begin_layout Standard
/libraries/
\end_layout

\begin_layout Standard
/uploads/
\end_layout

\begin_layout Section
Configuring the Component
\end_layout

\begin_layout Standard
Order: applications, services, starts component, then runs initialization
 tasks
\end_layout

\begin_layout Subsection
/component/servers/
\end_layout

\begin_layout Subsection
/component/clients/
\end_layout

\begin_layout Subsection
/component/hosts/
\end_layout

\begin_layout Standard
See virtual hosts in managing URI space.
\end_layout

\begin_layout Subsection
/component/services/
\end_layout

\begin_layout Standard
Run 
\emph on
after
\emph default
 the component is configured but 
\emph on
before
\emph default
 it is started.
\end_layout

\begin_layout Subsubsection
caching
\end_layout

\begin_layout Standard
Configure the caching backend
\end_layout

\begin_layout Subsubsection
distributed
\end_layout

\begin_layout Standard
Load the Hazelcast configuration
\end_layout

\begin_layout Subsubsection
executor
\end_layout

\begin_layout Standard
Configures thread pools for task execution.
\end_layout

\begin_layout Subsubsection
log
\end_layout

\begin_layout Standard
Configures the component's log service, which is used for logging client
 requests.
 (By default web.log)
\end_layout

\begin_layout Subsubsection
singleton
\end_layout

\begin_layout Standard
Prudence assumes a single Restlet Component instance.
 If for some reason you have a more complex setup, you can configure Prudence's
 initialization here.
\end_layout

\begin_layout Subsubsection
scheduler
\end_layout

\begin_layout Standard
Configure the cron scheduler (cron4j)
\end_layout

\begin_layout Subsubsection
status
\end_layout

\begin_layout Standard
Configures Restlet's status service to use Prudence's implementation.
\end_layout

\begin_layout Subsubsection
version
\end_layout

\begin_layout Standard
Provides access to Prudence and Restlet versions.
\end_layout

\begin_layout Subsection
/component/templates/
\end_layout

\begin_layout Section
Debugging
\end_layout

\begin_layout Subsection
Logging
\end_layout

\begin_layout Subsubsection
application.logger
\end_layout

\begin_layout Subsubsection
application.getSubLogger
\end_layout

\begin_layout Subsubsection
Configuring Logging
\end_layout

\begin_layout Standard
/configuration/logging/
\end_layout

\begin_layout Standard
See Sincerity Manual
\end_layout

\begin_layout Subsection
Debug Page
\end_layout

\begin_layout Section
Deployment
\end_layout

\begin_layout Subsection
The Joys of Sincerity
\end_layout

\begin_layout Subsubsection
Configuration-by-Script
\end_layout

\begin_layout Subsubsection
Plugins
\end_layout

\begin_layout Subsection
Deployment Strategies
\end_layout

\begin_layout Subsubsection
Synchronization
\end_layout

\begin_layout Standard
Unison, rsync
\end_layout

\begin_layout Subsubsection
Packaging
\end_layout

\begin_layout Paragraph
Maven
\end_layout

\begin_layout Standard
Using your own repository (Nexus)
\end_layout

\begin_layout Paragraph
Debian/RPM
\end_layout

\begin_layout Subsubsection
Version Control
\end_layout

\begin_layout Paragraph
Subversion
\end_layout

\begin_layout Paragraph
Git
\end_layout

\begin_layout Standard
What to ignore
\end_layout

\begin_layout Subsection
Directory Organization
\end_layout

\begin_layout Subsubsection
Sincerity Standalone
\end_layout

\begin_layout Subsection
Operating System Service
\end_layout

\begin_layout Standard
See Sincerity Manual
\end_layout

\begin_layout Subsection
Monitoring
\end_layout

\begin_layout Subsection
Security
\end_layout

\begin_layout Subsubsection
SSL
\end_layout

\begin_layout Standard
Howto
\end_layout

\begin_layout Subsubsection
HTTP Authentication
\end_layout

\begin_layout Subsubsection
Locked-Down User
\end_layout

\begin_layout Standard
Service Plugin
\end_layout

\begin_layout Subsubsection
Firewall
\end_layout

\begin_layout Standard
HTTP ports
\end_layout

\begin_layout Standard
Hazelcast ports
\end_layout

\begin_layout Standard
Cache backends
\end_layout

\begin_layout Standard
Database and other services
\end_layout

\begin_layout Subsection
Proxying
\end_layout

\begin_layout Subsubsection
Nginx
\end_layout

\begin_layout Subsubsection
Apache
\end_layout

\begin_layout Subsection
Deploying Clusters
\end_layout

\begin_layout Subsubsection
Loadbalancing
\end_layout

\begin_layout Standard
Perlbal
\end_layout

\begin_layout Subsubsection
Security Concerns
\end_layout

\begin_layout Subsubsection
Configuring Hazelcast
\end_layout

\begin_layout Standard
/configuration/hazelcast/prudence/
\end_layout

\begin_layout Standard
or
\end_layout

\begin_layout Standard
/configuration/hazelcast.alt.conf
\end_layout

\begin_layout Subsection
Cache Backends
\end_layout

\begin_layout Section
Utilities for Restlet
\end_layout

\begin_layout Standard
If you are a Restlet Java programmer, Prudence may still be of use to use.
 Prudence is also available as a small standalone Java library (a jar),
 and as such has several well-documented classes useful for any Java-written
 Restlet application.
 They're all in the 
\begin_inset Quotes eld
\end_inset

com.threecrickets.prudence.util
\begin_inset Quotes erd
\end_inset

 package, and introduced below.
\end_layout

\begin_layout Subsection
Utility Restlets
\end_layout

\begin_layout Standard
We wish these general-purpose utilities existed in the standard Restlet
 library!
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "CacheControlFilter"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/CacheControlFilter.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Filter"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Filter.html"

\end_inset

 that adds cache control directives to responses.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Injector"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/Injector.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Filter"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Filter.html"

\end_inset

 that adds values to the request attributes before moving to the next restlet.
 It allows for a straightforward implementation of IoC (Inversion of Control).
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "StatusRestlet"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/StatusRestlet.html"

\end_inset

: A restlet that always sets a specific status and does nothing else.
\end_layout

\begin_layout Subsection
Client Data
\end_layout

\begin_layout Standard
These classes add no new functionality, but make working with some client
 data a bit easier.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "CompressedStringRepresentation"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/CompressedStringRepresentation.html"

\end_inset

: This is a 
\begin_inset CommandInset href
LatexCommand href
name "ByteArrayRepresentation"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/representation/ByteArrayRepresentation.html"

\end_inset

 that can be constructed using text and an encoding, which it then compresses
 into bytes according the encoding.
 This is an alternative to using an 
\begin_inset CommandInset href
LatexCommand href
name "Encoder"
target "http://restlet.org/learn/javadocs/2.1/jse/engine/index.html?org/restlet/engine/application/Encoder.html"

\end_inset

 filter, allowing you direct control over and access to the final representation.
 
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "ConversationCookie"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/ConversationCookie.html"

\end_inset

: A modifiable extension of a regular 
\begin_inset CommandInset href
LatexCommand href
name "Cookie"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/data/Cookie.html"

\end_inset

.
 Tracks modifications, and upon calling save() stores them as a 
\begin_inset CommandInset href
LatexCommand href
name "CookieSetting"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/data/CookieSetting.html"

\end_inset

, likely in the 
\begin_inset CommandInset href
LatexCommand href
name "Response"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/Response.html"

\end_inset

.
 Also supports cookie deletion via remove().
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "FormWithFiles"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/FormWithFiles.html"

\end_inset

: A form that can parse 
\begin_inset CommandInset href
LatexCommand href
name "MediaType.MULTIPART_FORM_DATA"
target "http://restlet.org/learn/javadocs/2.1/jse/api/org/restlet/data/MediaType.html#MULTIPART_FORM_DATA"

\end_inset

 entities by accepting file uploads.
 Files will appear as parameters of type 
\begin_inset CommandInset href
LatexCommand href
name "FileParameter"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/FileParameter.html"

\end_inset

.
\end_layout

\begin_layout Subsection
Redirection
\end_layout

\begin_layout Standard
Restlet's server-side redirection works by creating a new request.
 Unfortunately, this means that some information from the original request
 is lost.
 Prudence includes a set of classes that work together to preserve the original
 URI, which we here call the 
\begin_inset Quotes eld
\end_inset

captured
\begin_inset Quotes erd
\end_inset

 URI.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "CapturingRedirector"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/CapturingRedirector.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Redirector"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Redirector.html"

\end_inset

 that keeps track of the captured reference.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "NormalizingRedirector"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/NormalizingRedirector.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Redirector"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Redirector.html"

\end_inset

 that normalizes relative paths.
 This may be unnecessary in future versions of Restlet.
 See 
\begin_inset CommandInset href
LatexCommand href
name "Restlet issue 238"
target "https://github.com/restlet/restlet-framework-java/issues/238"

\end_inset

.
\end_layout

\begin_layout Subsection
Fallback Routing
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

Fallback
\begin_inset Quotes erd
\end_inset

 is a powerful new routing paradigm introduced in Prudence that lets you
 attach multiple restlets to a single route.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Fallback"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/Fallback.html"

\end_inset

: A restlet that delegates 
\begin_inset CommandInset href
LatexCommand href
name "Restlet.handle(Request, Response)"
target "http://restlet.org/learn/javadocs/2.1/jse/api/org/restlet/Restlet.html#handle(org.restlet.Request,%20org.restlet.Response)"

\end_inset

 to a series of targets in sequence, stopping at the first target that satisfies
 the condition of wasHandled.
 This is very useful for allowing multiple restlets a chance to handle a
 request, while 
\begin_inset Quotes eld
\end_inset

falling back
\begin_inset Quotes erd
\end_inset

 to subsequent restlets when those 
\begin_inset Quotes eld
\end_inset

fail.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "FallbackRouter"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/FallbackRouter.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Router"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Router.html"

\end_inset

 that takes care to bunch identical routes under Fallback restlets.
\end_layout

\begin_layout Subsection
Resolver Selection
\end_layout

\begin_layout Standard
Restlet does not provide an easy way to use different 
\begin_inset CommandInset href
LatexCommand href
name "template variable resolver"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/util/Resolver.html"

\end_inset

 instances.
 We've created new implementations of a few of the core classes that let
 you choose which resolver to use.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "ResolvingTemplate"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/ResolvingTemplate.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Template"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Template.html"

\end_inset

 that allows control over which 
\begin_inset CommandInset href
LatexCommand href
name "Resolver"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/util/Resolver.html"

\end_inset

 instances it will use.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "ResolvingRedirector"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/ResolvingRedirector.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Redirector"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Redirector.html"

\end_inset

 that uses ResolvingTemplate.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "ResolvingRouter"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/ResolvingRouter.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Router"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Router.html"

\end_inset

 that uses ResolvingTemplate for all routes.
\end_layout

\begin_layout Subsection
Web Filters
\end_layout

\begin_layout Standard
A set of filter classes for web technologies.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "CssUnifyMinifyFilter"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/CssUnifyMinifyFilter.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Filter"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Filter.html"

\end_inset

 that automatically unifies and/or compresses CSS source files, saving them
 as a single file.
 Unifying them allows clients to retrieve the CSS via one request rather
 than many.
 Compressing them makes their retrieval faster.
 Compression is done via 
\begin_inset CommandInset href
LatexCommand href
name "CSSMin"
target "http://barryvan.github.com/CSSMin/CSSMin"

\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "JavaScriptUnifyMinifyFilter"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/JavaScriptUnifyMinifyFilter.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Filter"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Filter.html"

\end_inset

 that automatically unifies and/or compresses JavaScript source files, saving
 them as a single file.
 Unifying them allows clients to retrieve the JavaScript via one request
 rather than many.
 Compressing them makes their retrieval faster.
 Compression is done via 
\begin_inset CommandInset href
LatexCommand href
name "John Reilly's Java port"
target "http://www.inconspicuous.org/projects/jsmin/jsmin.java"

\end_inset

 of Douglas Crockford's 
\begin_inset CommandInset href
LatexCommand href
name "JSMin"
target "http://www.crockford.com/javascript/jsmin.html"

\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "ZussFilter"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/ZussFilter.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Filter"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Filter.html"

\end_inset

 that automatically parses 
\begin_inset CommandInset href
LatexCommand href
name "ZUSS"
target "https://github.com/tomyeh/ZUSS"

\end_inset

 code and renders CSS.
 Also supports minifying files, if the 
\begin_inset Quotes eld
\end_inset

.min.css
\begin_inset Quotes erd
\end_inset

 extension is used.
\end_layout

\begin_layout Section
Upgrading from Prudence 1.1
\end_layout

\begin_layout Standard
Prudence 1.1 did not use Sincerity: instead, it was a self-contained container
 with everything in the box.
 This meant it could also not be modular, and instead supported several
 distributions (
\begin_inset Quotes eld
\end_inset

flavors
\begin_inset Quotes erd
\end_inset

) per supported programming language.
 Because of this, it allowed you to use any programming language for your
 bootstrapping code, and indeed the project maintained a separate set of
 bootstrapping code for all languages.
\end_layout

\begin_layout Standard
This was not only cumbersome in terms of documentation and maintenance,
 but it also made it hard to port applications between 
\begin_inset Quotes eld
\end_inset

flavors.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
With the move to Sincerity in Prudence 2.0, it was possible to make Prudence
 more minimal as well as more modular, as Sincerity handles the bootstrapping
 and installation of supported languages.
 Though Sincerity can ostensibly run bootstrapping scripts in any Scripturian-su
pported language, it standardizes on JavaScript in order to maintain focus
 and portability.
 The bottom line is that if you used non-JavaScript flavors of Prudence
 1.1, you will need to use JavaScript for your bootstrapping scripts, even
 if your application code (resources, scriptlets, tasks, etc.) is written
 in a different language.
\end_layout

\begin_layout Standard
To be 100% clear: 
\emph on
all 
\begin_inset Quotes eld
\end_inset

flavors
\begin_inset Quotes erd
\end_inset

 supported in Prudence 1.1 are still supported in Prudence 2.0
\emph default
, and your application code will likely not even have to change.
 You 
\emph on
only
\emph default
 need (or rather, are recommended) to use JavaScript for bootstrapping.
\end_layout

\begin_layout Subsection
Upgrading Applications
\end_layout

\begin_layout Standard
There are no significant API changes between Prudence 1.1 and Prudence 2.0.
 However, the bootstrapping and configuration has been completely overhauled.
 You will likely need to take a few minutes to rewrite your settings.js,
 routing.js, etc.
 Here is a step-by-step checklist:
\end_layout

\begin_layout Enumerate
Start with a new application based on the default template.
\end_layout

\begin_deeper
\begin_layout Enumerate
Rename old application (add 
\begin_inset Quotes eld
\end_inset

-old
\begin_inset Quotes erd
\end_inset

), for example: 
\begin_inset Quotes eld
\end_inset

myapp-old
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Enumerate
Use the 
\begin_inset Quotes eld
\end_inset

prudence
\begin_inset Quotes erd
\end_inset

 tool to create a new application for your application name:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity prudence create myapp
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Copy over individual settings from settings.js, using the new Prudence Manual
 to find equivalences.
\end_layout

\begin_layout Enumerate
Copy over individual settings from routing.js, using the new Prudence Manual
 to find equivalences.
 Prudence 2.0 has a far more powerful and clearer routing configuration.
\end_layout

\begin_layout Enumerate
Rename 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

 files to add a 
\begin_inset Quotes eld
\end_inset

.m.
\begin_inset Quotes erd
\end_inset

 pre-extension (they are now called 
\begin_inset Quotes eld
\end_inset

manual resources
\begin_inset Quotes erd
\end_inset

).
 Under Unix-like operation systems, you can rename the all files in the
 tree via a Perl expression using something like this:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

find .
 -name "*.js" -exec rename -v 's/
\backslash
.js$/
\backslash
.m.js/i' {} 
\backslash
;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Rename 
\begin_inset Quotes eld
\end_inset

/web/dynamic/
\begin_inset Quotes erd
\end_inset

 files to add a 
\begin_inset Quotes eld
\end_inset

.s.
\begin_inset Quotes erd
\end_inset

 pre-extension (they are now called 
\begin_inset Quotes eld
\end_inset

scriptlet resources
\begin_inset Quotes erd
\end_inset

).
 Under Unix-like operation systems, you can rename the all files in the
 tree via a Perl expression using something like this:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

find .
 -name "*.html" -exec rename -v 's/
\backslash
.html$/
\backslash
.s.html/i' {} 
\backslash
;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Merge 
\begin_inset Quotes eld
\end_inset

/web/dynamic/
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

/web/static/
\begin_inset Quotes erd
\end_inset

 into 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
Merge 
\begin_inset Quotes eld
\end_inset

/web/fragments/
\begin_inset Quotes erd
\end_inset

 into 
\begin_inset Quotes eld
\end_inset

/libraries/
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection
Upgrading the Component
\end_layout

\end_body
\end_document
