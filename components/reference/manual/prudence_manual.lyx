#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{prettyref}
\newrefformat{}{section~\ref{#1}}
\sloppy
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 0
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
The Prudence Manual
\end_layout

\begin_layout Author
Version @VERSION@
\begin_inset Newline newline
\end_inset

Main text written by Tal Liron
\end_layout

\begin_layout Standard
\noindent
\align center
Copyright 2009-2013 by Three Crickets LLC.
\begin_inset Newline newline
\end_inset

This work is licensed under a
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License"
target "http://creativecommons.org/licenses/by-nc-sa/3.0/"

\end_inset

.
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Tutorial
\end_layout

\begin_layout Subsection
Installing Prudence
\end_layout

\begin_layout Standard
Download a distribution
\end_layout

\begin_layout Standard
Starting Prudence
\end_layout

\begin_layout Subsubsection
Further Exploration
\end_layout

\begin_layout Itemize
Start Prudence as a system service
\end_layout

\begin_layout Itemize
Logging
\end_layout

\begin_layout Subsection
At a Glance
\end_layout

\begin_layout Subsubsection
/component/
\end_layout

\begin_layout Standard
A 
\begin_inset Quotes eld
\end_inset

component
\begin_inset Quotes erd
\end_inset

 is the largest logical entity REST.
 It can encapsulate many servers and clients.
\end_layout

\begin_layout Standard
In Prudence, the component is bootstrapped using straightforward JavaScript
 code, starting with default.js.
 The code makes sure to initialize all your applications, servers and clients,
 as well as related services, and bind them to your component.
\end_layout

\begin_layout Subsubsection
/component/applications/
\end_layout

\begin_layout Subsubsection
/component/libraries/scripturian/
\end_layout

\begin_layout Subsubsection
/component/libraries/prudence/
\end_layout

\begin_layout Subsubsection
/component/libraries/web/
\end_layout

\begin_layout Standard
Here you can put static resources that you wish to have shared by all your
 applications.
\end_layout

\begin_layout Standard
It's a good place to put client-side JavaScript frameworks such as Ext JS
 and jQuery.
\end_layout

\begin_layout Subsubsection
/component/libraries/jars/
\end_layout

\begin_layout Standard
This is where JVM libraries are installed.
 This includes all of Prudence's dependencies, and you can add your own,
 too.
\end_layout

\begin_layout Standard
You can use JVM APIs from JavaScript almost identically to how they are
 used in Java.
\end_layout

\begin_layout Subsubsection
/cache/
\end_layout

\begin_layout Subsubsection
Further Exploration
\end_layout

\begin_layout Itemize
Learn about bootstrapping with Sincerity
\end_layout

\begin_layout Itemize
Configure your component
\end_layout

\begin_layout Subsection
Your First Application
\end_layout

\begin_layout Subsubsection
The 
\begin_inset Quotes eld
\end_inset

prudence
\begin_inset Quotes erd
\end_inset

 Command
\end_layout

\begin_layout Subsubsection
/resources/
\end_layout

\begin_layout Subsubsection
/libraries/
\end_layout

\begin_layout Subsubsection
/libraries/
\end_layout

\begin_layout Subsubsection
Further Exploration
\end_layout

\begin_layout Itemize
Configure your application
\end_layout

\begin_layout Itemize
Managing the URI-space
\end_layout

\begin_layout Subsection
Generating HTML
\end_layout

\begin_layout Subsubsection
Further Exploration
\end_layout

\begin_layout Itemize
Textual Resources
\end_layout

\begin_layout Itemize
Adding more languages
\end_layout

\begin_layout Subsection
A Manual Resource
\end_layout

\begin_layout Subsubsection
Further Exploration
\end_layout

\begin_layout Itemize
Manual Resources
\end_layout

\begin_layout Section
Managing the URI-space
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

URI-space
\begin_inset Quotes erd
\end_inset

 represents the published set of all URIs supported by your server.
 
\begin_inset Quotes eld
\end_inset

Supported
\begin_inset Quotes erd
\end_inset

 here means that unsupported URIs should return a 404 (
\begin_inset Quotes eld
\end_inset

not found
\begin_inset Quotes erd
\end_inset

) error.
\end_layout

\begin_layout Standard
Importantly, the URI-space can be potentially 
\emph on
infinite
\emph default
, in that you may support URI templates that match any number of actual
 URIs (within the limitations of maximum URI length).
 For example, 
\begin_inset Quotes eld
\end_inset

/service/{id}/
\begin_inset Quotes erd
\end_inset

 could match 
\begin_inset Quotes eld
\end_inset

/service/1/
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

/service/23664/
\begin_inset Quotes erd
\end_inset

, etc.
 All matched URIs belong to your URI-space.
\end_layout

\begin_layout Standard
The URI-space is mostly configured in the application's routing.js.
 However, the resource implementations can add their own special handling.
 For example, in the above example we can make sure in code that 
\begin_inset Quotes eld
\end_inset

{id}
\begin_inset Quotes erd
\end_inset

 would always be a decimal integer, thus limiting the extent of the URI-space.
 More generally, Prudence supports 
\begin_inset Quotes eld
\end_inset

wildcard
\begin_inset Quotes erd
\end_inset

 URI templates, allowing you to delegate the parsing of the URI entirely
 to your resource code.
\end_layout

\begin_layout Subsection
Routing Paradigms
\end_layout

\begin_layout Standard
Prudence offers three built-in techniques for you to support a URI or a
 URI template, reflecting two different routing paradigms:
\end_layout

\begin_layout Enumerate

\series bold
Resource mapping
\series default
: The filesystem hierarchy under an application's 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

 subdirectory is directly mapped to URIs (but not URI templates).
 Both directory- and file-names are mapped in order of depth.
 By default, Prudence hides filename extensions from the published URIs,
 but uses these extensions to extracts MIME-type information for the resources.
 Also, mapping adds trailing slashes by default, by redirecting URIs without
 trailing slash to include them (on the client's side).
 Filesystem mapping provides the most 
\begin_inset Quotes eld
\end_inset

transparent
\begin_inset Quotes erd
\end_inset

 management of your URI-space, because you do not need to edit any configuration
 file: to change URIs, you simply move or rename files and directories.
\end_layout

\begin_layout Enumerate

\series bold
URI/resource separation:
\end_layout

\begin_deeper
\begin_layout Enumerate

\series bold
URI capturing
\series default
: Capturing lets you map URI templates to fixed URIs, as well as perform
 other kinds of internal URI rewrites that are invisible to clients, allowing
 you to provide a published URI-space, which is different from your internal
 mapping structure.
 (Note that another common use for capturing is to add support for URI templates
 in resource mapping, as is explained under Resource Mapping.
 This use case does not belong to the URI/resource separation paradigm.)
\end_layout

\begin_layout Enumerate

\series bold
Resource dispatching
\series default
: In your application's routing.js you can map URIs or URI templates to a
 custom ID, which is then dispatched to your resource handling code.
 Dispatching provides the cleanest and most flexible separation between
 URIs and their implementation.
\end_layout

\end_deeper
\begin_layout Standard
When embarking on a new project, you may want to give some thought as to
 whether you should organize your code around 
\emph on
resource mapping 
\emph default
or
\emph on
 URI/resource separation
\emph default
.
 Generally, URI/resource separation is preferred for larger applications
 because it allows you full control over you code organization.
 However, it does add an extra layer of configuration and is not as transparent
 as resource mapping.
 It may make sense to use both paradigms.
 Read on, and make sure you understand how to use all three routing techniques.
\end_layout

\begin_layout Subsection
routing.js
\end_layout

\begin_layout Standard
Before discussing the routing techniques, let's look at how routing is configure
d.
\end_layout

\begin_layout Standard
By convention, routing is configured in your application's routing.js file
 (which is executed by its default.js file).
 The file should configure at least app.hosts and app.routes, and app.dispatchers
 and app.preheat if you are using those optional features.
\end_layout

\begin_layout Standard
Though routing.js may look a bit like a JSON configuration file, it's important
 to remember that it's really full JavaScript source! You can include any
 JavaScript code to dynamically configure your application's routing during
 the bootstrap process.
\end_layout

\begin_layout Standard
Reproduced below is the routing.js used in the 
\begin_inset Quotes eld
\end_inset

default
\begin_inset Quotes erd
\end_inset

 application template, demonstrating many of the main route type configurations,
 including how to chain and nest types.
 It will be explained in detail in the rest of this chapter.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.hosts = {
\end_layout

\begin_layout Plain Layout

	'default': '/myapp/'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	'/*': [
\end_layout

\begin_layout Plain Layout

		'manual',
\end_layout

\begin_layout Plain Layout

		'scriptlet',
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			type: 'cacheControl',
\end_layout

\begin_layout Plain Layout

			mediaTypes: {
\end_layout

\begin_layout Plain Layout

				'image/png': '1s',
\end_layout

\begin_layout Plain Layout

				'image/jpeg': '1s',
\end_layout

\begin_layout Plain Layout

				'image/gif': '1s'
\end_layout

\begin_layout Plain Layout

			},
\end_layout

\begin_layout Plain Layout

			next: {
\end_layout

\begin_layout Plain Layout

				type: 'zuss',
\end_layout

\begin_layout Plain Layout

				next: 'static'
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	],
\end_layout

\begin_layout Plain Layout

	'/example1/': '@example', // (dispatched)
\end_layout

\begin_layout Plain Layout

	'/example2/': '/example/' // (captured)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

app.dispatchers = {
\end_layout

\begin_layout Plain Layout

	javascript: '/manual-resources/'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
app.routes
\end_layout

\begin_layout Standard
Routes are configured in your application's routing.js, in the 
\begin_inset Quotes eld
\end_inset

app.routes
\begin_inset Quotes erd
\end_inset

 dict.
\end_layout

\begin_layout Standard
The keys of this dict are 
\emph on
URI templates
\emph default
 (see 
\begin_inset CommandInset href
LatexCommand href
name "IETF RFC 6570"
target "http://tools.ietf.org/html/rfc6570"

\end_inset

), which look like URIs, but support the following two features:
\end_layout

\begin_layout Itemize

\series bold
Variables
\series default
 are strings wrapped in curly brackets.
 For example, here is a URI template with two variables: 
\begin_inset Quotes eld
\end_inset

/profile/{user}/{service}/
\begin_inset Quotes erd
\end_inset

.
 The variables will match any text until the next 
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset

.
 You can access the string values of these variables in your resource via
 the conversation.locals API.
\end_layout

\begin_layout Itemize
A 
\series bold
wildcard
\series default
 can be used as the last character in the URI template.
 For example, 
\begin_inset Quotes eld
\end_inset

/archive/*
\begin_inset Quotes erd
\end_inset

 will match 
\emph on
any
\emph default
 URI that begins with 
\begin_inset Quotes eld
\end_inset

/archive/
\begin_inset Quotes erd
\end_inset

.
 You can access the remainder of the URI via the [TODO] API.
 Note that Prudence will attempt to match 
\emph on
non
\emph default
-wildcard URI templates first, so a wildcard URI template can be used as
 a general fallback for URIs.
\end_layout

\begin_layout Standard
The possible values of the 
\begin_inset Quotes eld
\end_inset

app.routes
\begin_inset Quotes erd
\end_inset

 dict are 
\emph on
route type 
\emph default
configurations.
 These are usually defined as JavaScript dicts, where the 
\begin_inset Quotes eld
\end_inset

type
\begin_inset Quotes erd
\end_inset

 key is the name of the route type configuration, and the rest of the keys
 configure the type.
 During the application's bootstrap process, these dicts are turned in instances
 of classes in the Prudence.Routing API namespace (note that the class names
 have the first character of the type capitalized).
 The values set in the dict are sent to the class constructor.
\end_layout

\begin_layout Standard
As a shortcut, you can just use a string value (the 
\begin_inset Quotes eld
\end_inset

type
\begin_inset Quotes erd
\end_inset

 name) instead of a full dict, however when used this way you must accept
 the default configuration.
 There are also special alternate forms for some of the commonly used types,
 such as 
\begin_inset Quotes eld
\end_inset

!
\begin_inset Quotes erd
\end_inset

 for the 
\begin_inset Quotes eld
\end_inset

hidden
\begin_inset Quotes erd
\end_inset

 type and JavaScript arrays for the 
\begin_inset Quotes eld
\end_inset

chain
\begin_inset Quotes erd
\end_inset

 type.
\end_layout

\begin_layout Standard
We will summarize all the route types briefly here, arranged according to
 usage categories, and will refer you to the API documentation for a complete
 reference.
 Note that some route type configurations allow nesting of further route
 type configurations.
\end_layout

\begin_layout Subsubsection
Routing
\end_layout

\begin_layout Paragraph
capture
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

capture
\begin_inset Quotes erd
\end_inset

 type with a 
\begin_inset Quotes eld
\end_inset

uri
\begin_inset Quotes erd
\end_inset

 param, or any string starting with the 
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset

 character, to configure a capture.
 For example, {type: 'capture', uri: '/user/profile/'} is identical to '/user/pr
ofile/'.
 Note that adding a 
\begin_inset Quotes eld
\end_inset

!
\begin_inset Quotes erd
\end_inset

 character at the end of the URI (not considered as part of the actual target
 URI) is a shortcut for 
\emph on
also
\emph default
 hiding the target URI.
 Capturing-and-hiding is a common use case.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Capture"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Capture"

\end_inset

 class.
\end_layout

\begin_layout Paragraph
redirect
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

redirect
\begin_inset Quotes erd
\end_inset

 type with a 
\begin_inset Quotes eld
\end_inset

uri
\begin_inset Quotes erd
\end_inset

 param, or any string starting with the 
\begin_inset Quotes eld
\end_inset

>
\begin_inset Quotes erd
\end_inset

 character, to asks the client to redirect (repeat its request) to a new
 URI.
 For example, {type: 'redirect', uri: 'http://newsite.org/user/profile/'}
 is identical to '>http://newsite.org/user/profile/'.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Redirect"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Redirect"

\end_inset

 class.
\end_layout

\begin_layout Paragraph
addSlash
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

addSlash
\begin_inset Quotes erd
\end_inset

 type for a permanent client redirect from the URI template to the original
 URI with a trailing slash added.
 An easy way to enforce trailing slashes in your application.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.AddSlash"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.AddSlash"

\end_inset

 class.
\end_layout

\begin_layout Paragraph

\series bold
hidden
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

!
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

hidden
\begin_inset Quotes erd
\end_inset

 string values to hide a URI template.
 Prudence will always return a 404 error (
\begin_inset Quotes eld
\end_inset

not found
\begin_inset Quotes erd
\end_inset

) for this match.
 Note that internal requests always bypass this limitation, and so this
 functionality is useful if you want some URIs available in the internal
 URI-space but not the public one.
 This special value is not actually handled by a class, but rather is configured
 into the current router.
\end_layout

\begin_layout Subsubsection
Mapping
\end_layout

\begin_layout Paragraph
static
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

static
\begin_inset Quotes erd
\end_inset

 type to create a static resource handler.
 By default uses the application's 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

 subdirectory chained to the container's 
\begin_inset Quotes eld
\end_inset

/libraries/web/
\begin_inset Quotes erd
\end_inset

 subdirectory for its 
\begin_inset Quotes eld
\end_inset

roots
\begin_inset Quotes erd
\end_inset

.
 Note that if you include it in a 
\begin_inset Quotes eld
\end_inset

chain
\begin_inset Quotes erd
\end_inset

 with 
\begin_inset Quotes eld
\end_inset

manual
\begin_inset Quotes erd
\end_inset

 and/or 
\begin_inset Quotes eld
\end_inset

scriptlet
\begin_inset Quotes erd
\end_inset

, then 
\begin_inset Quotes eld
\end_inset

static
\begin_inset Quotes erd
\end_inset

 should be the last entry in the chain.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Static"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Static"

\end_inset

 class.
\end_layout

\begin_layout Paragraph
manual
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

manual
\begin_inset Quotes erd
\end_inset

 type to create a static resource handler.
 By default uses the application's 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

 subdirectory for its 
\begin_inset Quotes eld
\end_inset

root
\begin_inset Quotes erd
\end_inset

.
 Important limitation: 
\emph on
All
\emph default
 uses of this class in the same application share the same configuration.
 Only the first found configuration will take hold and will be shared by
 other instances.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Manual"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Manual"

\end_inset

 class.
 See the 
\bar under
manual resources guide (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "manual-resources"

\end_inset

)
\bar default
 for a complete discussion.
\end_layout

\begin_layout Quote
The 
\begin_inset Quotes eld
\end_inset

manual
\begin_inset Quotes erd
\end_inset

 is internally used by Prudence to handle the 
\begin_inset Quotes eld
\end_inset

dispatch
\begin_inset Quotes erd
\end_inset

 type, via a server-side redirect.
 This introduces two special limitations on its use.
 First, it means that you 
\emph on
must
\emph default
 have a 
\begin_inset Quotes eld
\end_inset

manual
\begin_inset Quotes erd
\end_inset

 if you want to use 
\begin_inset Quotes eld
\end_inset

dispatch.
\begin_inset Quotes erd
\end_inset

 Second, you must make sure the 
\begin_inset Quotes eld
\end_inset

manual
\begin_inset Quotes erd
\end_inset

 always appears 
\emph on
before
\emph default
 any use of 
\begin_inset Quotes eld
\end_inset

dispatch
\begin_inset Quotes erd
\end_inset

 in app.routes.
 For example, if you attach the manual to 
\begin_inset Quotes eld
\end_inset

/*
\begin_inset Quotes erd
\end_inset

 in a chain (as in the default application template), and you also want
 to add a 
\begin_inset Quotes eld
\end_inset

dispatch
\begin_inset Quotes erd
\end_inset

 to that chain, you need to put the 
\begin_inset Quotes eld
\end_inset

manual
\begin_inset Quotes erd
\end_inset

 
\emph on
before
\emph default
 the 
\begin_inset Quotes eld
\end_inset

dispatch
\begin_inset Quotes erd
\end_inset

 in the chain.
 Otherwise, you might cause an endless server-side redirect, leading to
 a stack overflow error.
 Example of correct use:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	'/*': [
\end_layout

\begin_layout Plain Layout

		'manual',
\end_layout

\begin_layout Plain Layout

		'@example', // must appear after the manual
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout

	],
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
scriptlet
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

scriptlet
\begin_inset Quotes erd
\end_inset

 type to create a static resource handler.
 By default uses the application's 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

 subdirectory for its 
\begin_inset Quotes eld
\end_inset

root
\begin_inset Quotes erd
\end_inset

.
 Important limitation: 
\emph on
All
\emph default
 uses of this class in the same application share the same configuration.
 Only the first found configuration will take hold and will be shared by
 other instances.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Scriptlet"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Scriptlet"

\end_inset

 class.
 See the 
\bar under
scriptlet resources guide (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "scriptlet-resources"

\end_inset

)
\bar default
 for a complete discussion.
\end_layout

\begin_layout Subsubsection
Resources
\end_layout

\begin_layout Paragraph
dispatch
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

dispatch
\begin_inset Quotes erd
\end_inset

 type with an 
\begin_inset Quotes eld
\end_inset

id
\begin_inset Quotes erd
\end_inset

 param, or any string starting with the 
\begin_inset Quotes eld
\end_inset

@
\begin_inset Quotes erd
\end_inset

 character, to configure a dispatch mapping.
 For example, {type: 'dispatch', id: 'person'} is identical to '@person'.
 If you use 
\begin_inset Quotes eld
\end_inset

@
\begin_inset Quotes erd
\end_inset

, you can also optionally use a 
\begin_inset Quotes eld
\end_inset

:
\begin_inset Quotes erd
\end_inset

 to specify the 
\begin_inset Quotes eld
\end_inset

dispatcher
\begin_inset Quotes erd
\end_inset

 param, for example: 
\begin_inset Quotes eld
\end_inset

@profile:person
\begin_inset Quotes erd
\end_inset

 is identical to {type: 'dispatch', dispatcher: 'profile', id: 'person'}.
 If 
\begin_inset Quotes eld
\end_inset

dispatcher
\begin_inset Quotes erd
\end_inset

 is not specified, it defaults to 
\begin_inset Quotes eld
\end_inset

javascript
\begin_inset Quotes erd
\end_inset

.
 The unique ID should match a manual resource handled by your dispatcher,
 otherwise a 404 error (
\begin_inset Quotes eld
\end_inset

not found
\begin_inset Quotes erd
\end_inset

) will result.
 The 
\begin_inset Quotes eld
\end_inset

dispatcher
\begin_inset Quotes erd
\end_inset

 param's value can be any key from the app.dispatchers dict.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Dispatch"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Dispatch"

\end_inset

 class.
 See the 
\bar under
manual resource guide (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "manual-resources"

\end_inset

)
\bar default
 for a complete discussion.
\end_layout

\begin_layout Paragraph
resource
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

resource
\begin_inset Quotes erd
\end_inset

 type with a 
\begin_inset Quotes eld
\end_inset

class
\begin_inset Quotes erd
\end_inset

 param, or any string starting with the 
\begin_inset Quotes eld
\end_inset

$
\begin_inset Quotes erd
\end_inset

 character, to attach a Restlet 
\begin_inset CommandInset href
LatexCommand href
name "ServerResource"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/resource/ServerResource.html"

\end_inset

.
 For example, {type: 'resource', 'class': 'org.myorg.PersonResource'} is identical
 to '$org.myorg.PersonResource'.
 This is an easy way to combine Java-written Restlet libraries into your
 Prudence applications.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Resource"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Resource"

\end_inset

 class.
\end_layout

\begin_layout Paragraph
execute
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

execute
\begin_inset Quotes erd
\end_inset

 type to attach a code execution resource.
 This powerful (and dangerous) resource executes all POST payloads as Scripturia
n text-with-scriptlets documents.
 The standard output of the script will be returned as a response.
 Because it always execution of arbitrary code, you very likely do not want
 this resource publicly exposed.
 If you use it, make sure to protect its URL on publicly available machines!
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Execute"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Execute"

\end_inset

 class.
\end_layout

\begin_layout Subsubsection
Combining
\end_layout

\begin_layout Paragraph
chain
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

chain
\begin_inset Quotes erd
\end_inset

 type with a 
\begin_inset Quotes eld
\end_inset

restlets
\begin_inset Quotes erd
\end_inset

 param (a JavaScript array), or just a JavaScript array, to create a fallback
 chain.
 The values of the array can be any route type configuration, allowing for
 nesting.
 They will be tested in order: the first value that 
\emph on
doesn't
\emph default
 return a 404 (
\begin_inset Quotes eld
\end_inset

not found
\begin_inset Quotes erd
\end_inset

) error will have its value returned.
 This is very commonly used to combine mapping types, for example: ['manual',
 'scriptlet', 'static'].
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Chain"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Chain"

\end_inset

 class.
\end_layout

\begin_layout Paragraph
router
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

router
\begin_inset Quotes erd
\end_inset

 type with a 
\begin_inset Quotes eld
\end_inset

routes
\begin_inset Quotes erd
\end_inset

 param (a JavaScript dict) to create a router.
 The values of the dict can be any route type configuration, allowing for
 nesting.
 This is in fact how Prudence creates the root router (app.routes).
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Router"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Router"

\end_inset

 class.
\end_layout

\begin_layout Subsubsection
Filtering
\end_layout

\begin_layout Paragraph
filter
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

filter
\begin_inset Quotes erd
\end_inset

 type with the 
\begin_inset Quotes eld
\end_inset

library
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 params to create a filter.
 
\begin_inset Quotes eld
\end_inset

library
\begin_inset Quotes erd
\end_inset

 is the document name (from the application's 
\begin_inset Quotes eld
\end_inset

/libraries/
\begin_inset Quotes erd
\end_inset

 subdirectory), while 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 is any route type configuration, allowing for nesting.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Filter"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Filter"

\end_inset

 class.
 See the 
\bar under
filtering guide (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "filtering"

\end_inset

)
\bar default
 for a complete discussion.
\end_layout

\begin_layout Paragraph
injector
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

injector
\begin_inset Quotes erd
\end_inset

 type with the 
\begin_inset Quotes eld
\end_inset

locals
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 params to create an injector.
 An injector is a simple filter that injects preset valued into conversation.loca
ls, but otherwise has no effect on the conversation.
 This is useful for Inversion of Control (IoC): you can use these conversation.lo
cals to alter the behavior of nested route types directly in your routing.js.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Injector"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Injector"

\end_inset

 class.
\end_layout

\begin_layout Paragraph
httpAuthenticator
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

httpAuthenticator
\begin_inset Quotes erd
\end_inset

 with the 
\begin_inset Quotes eld
\end_inset

credentials
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

realm
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 params to require HTTP authentication before allow the request to go through.
 This straightforward (but weak and inflexible) security mechanism is useful
 for ensuring that robots, such as search engine crawlers, as well as unauthoriz
ed users do not access a URI.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.HttpAuthenticator"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.HttpAuthenticator"

\end_inset

 class.
\end_layout

\begin_layout Paragraph
cacheControl
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

cacheControl
\begin_inset Quotes erd
\end_inset

 type with a 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 param to create a cache control filter.
 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 is any route type configuration, allowing for nesting.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.CacheControl"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.CacheControl"

\end_inset

 class.
\end_layout

\begin_layout Paragraph
javaScriptUnifyMinify
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

javaScriptUnifyMinify
\begin_inset Quotes erd
\end_inset

 type with a 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 param to create a JavaScript unify/minify filter.
 
\begin_inset Quotes eld
\end_inset

roots
\begin_inset Quotes erd
\end_inset

 defaults to your application's 
\begin_inset Quotes eld
\end_inset

/resources/scripts/
\begin_inset Quotes erd
\end_inset

 and your container 
\begin_inset Quotes eld
\end_inset

/libraries/web/scripts/
\begin_inset Quotes erd
\end_inset

 subdirectories.
 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 is any route type configuration, allowing for nesting.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.JavaScriptUnifyMinify"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.JavaScriptUnifyMinify"

\end_inset

 class.
\end_layout

\begin_layout Paragraph
cssUnifyMinify
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

cssScriptUnifyMinify
\begin_inset Quotes erd
\end_inset

 type with a 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 param to create a CSS unify/minify filter.
 
\begin_inset Quotes eld
\end_inset

roots
\begin_inset Quotes erd
\end_inset

 defaults to your application's 
\begin_inset Quotes eld
\end_inset

/resources/style/
\begin_inset Quotes erd
\end_inset

 and your container 
\begin_inset Quotes eld
\end_inset

/libraries/web/style/
\begin_inset Quotes erd
\end_inset

 subdirectories.
 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 is any route type configuration, allowing for nesting.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.CssUnifyMinify"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.CssUnifyMinify"

\end_inset

 class.
\end_layout

\begin_layout Paragraph
zuss
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

zuss
\begin_inset Quotes erd
\end_inset

 type with a 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 param to create a 
\begin_inset CommandInset href
LatexCommand href
name "ZUSS"
target "https://github.com/tomyeh/ZUSS"

\end_inset

 compiling filter.
 
\begin_inset Quotes eld
\end_inset

roots
\begin_inset Quotes erd
\end_inset

 defaults to your application's 
\begin_inset Quotes eld
\end_inset

/resources/style/
\begin_inset Quotes erd
\end_inset

 and your container 
\begin_inset Quotes eld
\end_inset

/libraries/web/style/
\begin_inset Quotes erd
\end_inset

 subdirectories.
 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 is any route type configuration, allowing for nesting.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Zuss"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Zuss"

\end_inset

 class.
\end_layout

\begin_layout Subsubsection
Custom Route Types
\end_layout

\begin_layout Standard
If you know how to use the Restlet library, then you can easily create your
 own custom route types for Prudence:
\end_layout

\begin_layout Enumerate
Create a JavaScript class that:
\end_layout

\begin_deeper
\begin_layout Enumerate
Implements a create(app, uri) method.
 The 
\begin_inset Quotes eld
\end_inset

app
\begin_inset Quotes erd
\end_inset

 argument is the instance of Prudence.Routing.Application, and the 
\begin_inset Quotes eld
\end_inset

uri
\begin_inset Quotes erd
\end_inset

 argument is the URI template to which the route type instance should be
 attached.
 The method must return an instance of a 
\begin_inset CommandInset href
LatexCommand href
name "Restlet"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/Restlet.html"

\end_inset

 subclass.
\end_layout

\begin_layout Enumerate
Accepts a single argument, a dict, to the constructor.
 The dict will be populated by the route type configuration dict in app.routes.
\end_layout

\end_deeper
\begin_layout Enumerate
Add the class to Prudence.Routing.
 Remember that the class name begins with an uppercase letter, but will
 begin with a lowercase letter when referenced in app.routes.
\end_layout

\begin_layout Standard
If you like, you can use Sincerity.Classes to create your class, and also
 inherit from Prudence.Routing.Restlet.
\end_layout

\begin_layout Standard
Here's a complete example in which we implement a route type that redirects
 using HTTP status code 303 (
\begin_inset Quotes eld
\end_inset

see other
\begin_inset Quotes erd
\end_inset

).
 (Note this same effect can be achieved using the built-in 
\begin_inset Quotes eld
\end_inset

redirect
\begin_inset Quotes erd
\end_inset

 route type, and is here intended merely as an example.)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Prudence.Routing.See = Sincerity.Classes.define(function() {
\end_layout

\begin_layout Plain Layout

	var Public = {}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Public._inherit = Prudence.Routing.Restlet
\end_layout

\begin_layout Plain Layout

	Public._configure = ['uri']
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Public.create = function(app, uri) {
\end_layout

\begin_layout Plain Layout

			importClass(org.restlet.routing.Redirector)
\end_layout

\begin_layout Plain Layout

			var redirector = new Redirector(app.context, this.uri, Redirector.MODE_CLIENT_SE
E_OTHER)
\end_layout

\begin_layout Plain Layout

			return redirector
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	return Public
\end_layout

\begin_layout Plain Layout

}())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/original-uri/': {type: 'see', uri: 'http://newsite.org/new-uri/'}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Injecting Conversation Attributes
\begin_inset CommandInset label
LatexCommand label
name "injecting-conversation-attributes"

\end_inset


\end_layout

\begin_layout Standard
As we've seen in the app.routes section above, URI template variables delimited
 by curly brackets can be used to match incoming requests and extract the
 values into conversation.locals.
 For example, a 
\begin_inset Quotes eld
\end_inset

/person/{id}/
\begin_inset Quotes erd
\end_inset

 URI template will match the 
\begin_inset Quotes eld
\end_inset

/person/linus/
\begin_inset Quotes erd
\end_inset

 URI and set the 
\begin_inset Quotes eld
\end_inset

id
\begin_inset Quotes erd
\end_inset

 conversation.local to 
\begin_inset Quotes eld
\end_inset

linus
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Template variables can furthermore be used to 
\emph on
inject
\emph default
 values in three use cases:
\end_layout

\begin_layout Itemize
Captured URI targets
\end_layout

\begin_layout Itemize
Redirection URI targets
\end_layout

\begin_layout Itemize
Cache keys (see caching)
\end_layout

\begin_layout Standard
In each of these cases you can inject the same conversation.locals that were
 extracted from the matched URI pattern.
 For example, you can redirect from 
\begin_inset Quotes eld
\end_inset

/person/{id}/
\begin_inset Quotes erd
\end_inset

 to 
\begin_inset Quotes eld
\end_inset

http://newsite.org/profile/?id={id}
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Prudence furthermore supports many built-in variables extracted from the
 conversation attributes.
 A list of them is available in the 
\begin_inset CommandInset href
LatexCommand href
name "Restlet API documentation"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/util/Resolver.html"

\end_inset

, but we'll summarize them here in detail.
\end_layout

\begin_layout Subsubsection
Request URIs
\end_layout

\begin_layout Standard
The variables are composed of a prefix and a suffix.
 The prefix specifies which URI you are referring to, while the suffix specified
 which part of that URI you need.
 For example, the prefix 
\begin_inset Quotes eld
\end_inset

{r-}
\begin_inset Quotes erd
\end_inset

 can be combined with the suffix 
\begin_inset Quotes eld
\end_inset

{-i}
\begin_inset Quotes erd
\end_inset

 for 
\begin_inset Quotes eld
\end_inset

{ri}
\begin_inset Quotes erd
\end_inset

, which is the complete actual URI.
\end_layout

\begin_layout Paragraph
Prefixes
\end_layout

\begin_layout Itemize
{r-}: actual URI (
\bar under
r
\bar default
eference)
\end_layout

\begin_layout Itemize
{h-}: virtual 
\bar under
h
\bar default
ost URI
\end_layout

\begin_layout Itemize
{o-}: the application's r
\bar under
o
\bar default
ot URI on the current virtual host
\end_layout

\begin_layout Itemize
{f-}: the re
\bar under
f
\bar default
erring URI (sent by some clients: usually means that the client clicked
 a hyperlink or was redirected here from elsewhere)
\end_layout

\begin_layout Paragraph
Suffixes
\end_layout

\begin_layout Itemize
{-i}: the complete URI (
\bar under
i
\bar default
dentitifer)
\end_layout

\begin_layout Itemize
{-h}: the 
\bar under
h
\bar default
ost identifier (protocol + authority)
\end_layout

\begin_layout Itemize
{-a}: the 
\bar under
a
\bar default
uthority (for URLs, this is the host or IP address)
\end_layout

\begin_layout Itemize
{-p}: the 
\bar under
p
\bar default
ath (everything after the authority)
\end_layout

\begin_layout Itemize
{-r}: the 
\bar under
r
\bar default
emaining part of the path after the base URI (see below)
\end_layout

\begin_layout Itemize
{-e}: a r
\bar under
e
\bar default
lative path from the URI to the application's base URI (see below; note
 that this is a constructed value, not merely a string extracted from the
 URI)
\end_layout

\begin_layout Itemize
{-q}: the 
\bar under
q
\bar default
uery (everything after the 
\begin_inset Quotes eld
\end_inset

?
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Itemize
{-f}: the 
\bar under
f
\bar default
ragment (the tag after the 
\begin_inset Quotes eld
\end_inset

#
\begin_inset Quotes erd
\end_inset

; note that web browsers handle fragments internally and 
\emph on
never
\emph default
 send them to the server, however fragments may exist in URIs sent 
\emph on
from
\emph default
 the server: see the 
\begin_inset Quotes eld
\end_inset

{R-}
\begin_inset Quotes erd
\end_inset

 variable mentioned below)
\end_layout

\begin_layout Paragraph
Base URIs
\end_layout

\begin_layout Standard
Every URI also has a 
\begin_inset Quotes eld
\end_inset

base
\begin_inset Quotes erd
\end_inset

 version of it: in the case of wildcard patterns, it is the URI before the
 wildcard begins.
 Otherwise it is usually the application's root URI on the virtual host.
 It is used in the 
\begin_inset Quotes eld
\end_inset

{-r}
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

{-e}
\begin_inset Quotes erd
\end_inset

 suffixes above.
\end_layout

\begin_layout Standard
To refer to the base URI directly, use the special 
\begin_inset Quotes eld
\end_inset

{-b-}
\begin_inset Quotes erd
\end_inset

 suffix, which also function as a prefix to which you need to add one of
 the above suffixed.
 For example, “{rbi}” refers to the complete base URI of the actual URI.
\end_layout

\begin_layout Subsubsection
Request Attributes
\end_layout

\begin_layout Itemize
{p}: the 
\bar under
p
\bar default
rotocol (“http,” “https,” “ftp,” etc.)
\end_layout

\begin_layout Itemize
{m}: the 
\bar under
m
\bar default
ethod (in HTTP, it would be “GET,” “POST,” “PUT,” “DELETE,” etc.)
\end_layout

\begin_layout Itemize
{d}: 
\bar under
d
\bar default
ate (as a Unix timestamp)
\end_layout

\begin_layout Subsubsection
Client Attributes
\end_layout

\begin_layout Itemize
{cia}: 
\bar under
c
\bar default
l
\bar under
i
\bar default
ent IP 
\bar under
a
\bar default
ddress
\end_layout

\begin_layout Itemize
{ciua}: 
\bar under
c
\bar default
l
\bar under
i
\bar default
ent 
\bar under
u
\bar default
pstream IP 
\bar under
a
\bar default
ddress (if the request reached us through an upstream load balancer)
\end_layout

\begin_layout Itemize
{cig}: 
\bar under
c
\bar default
l
\bar under
i
\bar default
ent a
\bar under
g
\bar default
ent name (for example, and identifier for the browser)
\end_layout

\begin_layout Subsubsection
Entity Attributes
\end_layout

\begin_layout Standard
All these refer to the data (“entity”) sent by the client.
\end_layout

\begin_layout Itemize
{es}: 
\bar under
e
\bar default
ntity 
\bar under
s
\bar default
ize (in bytes)
\end_layout

\begin_layout Itemize
{emt}: 
\bar under
e
\bar default
ntity 
\bar under
m
\bar default
edia (MIME) 
\bar under
t
\bar default
ype
\end_layout

\begin_layout Itemize
{ecs}: 
\bar under
e
\bar default
ntity 
\bar under
c
\bar default
haracter 
\bar under
s
\bar default
et
\end_layout

\begin_layout Itemize
{el}: 
\bar under
e
\bar default
ntity 
\bar under
l
\bar default
anguage
\end_layout

\begin_layout Itemize
{ee}: 
\bar under
e
\bar default
ntity 
\bar under
e
\bar default
ncoding
\end_layout

\begin_layout Itemize
{et}: 
\bar under
e
\bar default
ntity 
\bar under
t
\bar default
ag (HTTP ETag)
\end_layout

\begin_layout Itemize
{eed}: 
\bar under
e
\bar default
ntity 
\bar under
e
\bar default
xpiration 
\bar under
d
\bar default
ate
\end_layout

\begin_layout Itemize
{emd}: 
\bar under
e
\bar default
ntity 
\bar under
m
\bar default
odification 
\bar under
d
\bar default
ate
\end_layout

\begin_layout Subsubsection
Response Attributes
\end_layout

\begin_layout Standard
[these are not supported in capturing or other forms of server-side redirection,
 because redirection happens before a response is actually generated.] [useful
 for cache patterns?]
\end_layout

\begin_layout Standard
These are all in uppercase to differentiate them from the request variables:
\end_layout

\begin_layout Itemize
{S}: the HTTP status code
\end_layout

\begin_layout Itemize
{SIA}: server IP address
\end_layout

\begin_layout Itemize
{SIP}: server port number
\end_layout

\begin_layout Itemize
{SIG}: server agent name
\end_layout

\begin_layout Itemize
{R-}: the redirection URI (see 
\begin_inset Quotes eld
\end_inset

Request URIs
\begin_inset Quotes erd
\end_inset

 above for a list of suffixes, which must also be in uppercase)
\end_layout

\begin_layout Standard
Additionally, all the entity attributes can be used in uppercase to correspond
 to the response entity.
 For example, 
\begin_inset Quotes eld
\end_inset

{ES}
\begin_inset Quotes erd
\end_inset

 for the response entity size, 
\begin_inset Quotes eld
\end_inset

{EMT}
\begin_inset Quotes erd
\end_inset

 for the response media type, etc.
\end_layout

\begin_layout Subsection
Resource Mapping
\end_layout

\begin_layout Standard
Resource mapping is the most straightforward and most familiar technique
 and paradigm to create your URI-space.
 It relies on a one-to-one mapping between the filesystem (by default files
 under your application's 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

 subdirectory) to the URI space.
 This is how static web servers, as well as the the PHP, ASP and JSP platforms
 work.
\end_layout

\begin_layout Standard
Prudence differs from the familiar paradigm in three ways:
\end_layout

\begin_layout Enumerate
For manual and scriptlet resources, Prudence hides filename extensions from
 the URIs by default.
 Thus, 
\begin_inset Quotes eld
\end_inset

/resources/myresource.m.js
\begin_inset Quotes erd
\end_inset

 would be mapped to 
\begin_inset Quotes eld
\end_inset

/resources/myresource/
\begin_inset Quotes erd
\end_inset

.
 The reasons are two: 1) clients should not have to know about your internal
 implementation of the resource, and 2) it allows for cleaner and more coherent
 URIs.
 Note the filename extensions are used internally by Prudence (differently
 for manual and scriptlet resources).
 Note that this does not apply to static resources: 
\begin_inset Quotes eld
\end_inset

/resources/images/logo.png
\begin_inset Quotes erd
\end_inset

 will be mapped to 
\begin_inset Quotes eld
\end_inset

/images/logo.png
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
For manual and scriptlet resources, Prudence by default 
\emph on
requires 
\emph default
trailing slashes for URIs.
 If clients do not include the trailing slash, they will receive a 404 (
\begin_inset Quotes eld
\end_inset

not found
\begin_inset Quotes erd
\end_inset

) error.
 Again, the reasons are two: 1) it makes relative URIs always unambiguous,
 which is especially relevant in HTML and CSS, and 2) it clarifies the extent
 of URI template variables.
 As a courtesy to sloppy clients, you can manually add a permanent redirection
 to a trailing slash, using the 
\begin_inset Quotes eld
\end_inset

addSlash
\begin_inset Quotes erd
\end_inset

 route type.
 For example:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/main', 'addSlash',
\end_layout

\begin_layout Plain Layout

	'/person/profile/{id}': 'addSlash'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
This mapped URI-space can be manipulated using URI hiding and URI capturing,
 allowing you to support URI templates and rewrite URIs.
\end_layout

\begin_layout Subsubsection
Capturing URI Templates
\end_layout

\begin_layout Standard
Later on we'll present URI capturing as an alternative paradigm to resource
 mapping.
 However, capturing also has a specific use case in conjunction with resource
 mapping, which we'll present here.
\end_layout

\begin_layout Standard
Specifically, URI templates can be captured to mapped resources.
 For example, let's say you have a scriptlet resource file at 
\begin_inset Quotes eld
\end_inset

/resources/user/profile.s.html
\begin_inset Quotes erd
\end_inset

, but instead of it being mapped to the URI 
\begin_inset Quotes eld
\end_inset

/user/profile/
\begin_inset Quotes erd
\end_inset

, you want to access it via a URI template: 
\begin_inset Quotes eld
\end_inset

/user/profile/{userId}/
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/user/profile/{userId}/': '/user/profile/'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A URI such as 
\begin_inset Quotes eld
\end_inset

/user/profile/4431/
\begin_inset Quotes erd
\end_inset

 would then be internally redirected to the 
\begin_inset Quotes eld
\end_inset

/user/profile/
\begin_inset Quotes erd
\end_inset

 URI.
 Within your 
\begin_inset Quotes eld
\end_inset

profile.s.html
\begin_inset Quotes erd
\end_inset

 file, you could then access the captured value via the conversation.locals
 API:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<html>
\end_layout

\begin_layout Plain Layout

<body>
\end_layout

\begin_layout Plain Layout

<p>
\end_layout

\begin_layout Plain Layout

User profile for user <%= conversation.locals.get('userId') %>.
\end_layout

\begin_layout Plain Layout

</p>
\end_layout

\begin_layout Plain Layout

</body>
\end_layout

\begin_layout Plain Layout

</html>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We've used a scriptlet resource in this example, but capturing can be used
 for both scriptlet and manual resources.
 The same conversation.locals API is used in both cases.
\end_layout

\begin_layout Paragraph
Capture-and-Hide
\end_layout

\begin_layout Standard
You may also want to make sure that 
\begin_inset Quotes eld
\end_inset

/user/profile/
\begin_inset Quotes erd
\end_inset

 cannot be accessed 
\emph on
without
\emph default
 the user ID.
 To capture and hide together you can use the following shortcut notation:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/user/profile/{userId}/': '/user/profile/!'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
That final 
\begin_inset Quotes eld
\end_inset

!
\begin_inset Quotes erd
\end_inset

 implies hiding.
 You of course can also configure capturing and hiding separately.
 The following is equivalent to the above:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/user/profile/{userId}/': '/user/profile/',
\end_layout

\begin_layout Plain Layout

	'/user/profile/': '!'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Dynamic Capturing
\end_layout

\begin_layout Standard
URI capturing can actually do more than just capture to a 
\emph on
single
\emph default
 URI: the target URI for a capture is, in fact, 
\emph on
also
\emph default
 a URI template, and can include any of the conversation attributes discussed
 in 
\bar under

\begin_inset Quotes eld
\end_inset

Injecting Conversation Attributes
\begin_inset Quotes erd
\end_inset

 (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "injecting-conversation-attributes"

\end_inset

)
\bar default
.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/user/{userId}/preferences/': '/database/preferences/{m}/?id={userId}'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

{m}
\begin_inset Quotes erd
\end_inset

 variable is injected with the request method name, for example 
\begin_inset Quotes eld
\end_inset

GET
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

POST
\begin_inset Quotes erd
\end_inset

.
 It would thus capture to different target URIs depending on the request.
 So, you could have 
\begin_inset Quotes eld
\end_inset

/database/preferences/GET.html
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

/database/preferences/POST.html
\begin_inset Quotes erd
\end_inset

 files in your 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

 subdirectory to handle different request methods.
\end_layout

\begin_layout Paragraph
Dynamic Capture-and-Hide
\end_layout

\begin_layout Standard
Note that if you use the 
\begin_inset Quotes eld
\end_inset

!
\begin_inset Quotes erd
\end_inset

 capture-and-hide trick with dynamic capturing, Prudence will hide 
\emph on
any
\emph default
 URI that matches the template.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/user/{userId}/preferences/': '/database/preferences/{m}/!'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here, 
\begin_inset Quotes eld
\end_inset

/database/preferences/GET/
\begin_inset Quotes erd
\end_inset

 is hidden, but also 
\begin_inset Quotes eld
\end_inset

/database/preferences/anything/
\begin_inset Quotes erd
\end_inset

, etc.
 If you do not want this behavior, then you should explicitly hide specific
 URIs instead:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/user/{userId}/preferences/': '/database/preferences/{m}/',
\end_layout

\begin_layout Plain Layout

	'/database/preferences/GET/': '!',
\end_layout

\begin_layout Plain Layout

	'/database/preferences/POST/': '!'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Limitations of Resource Mapping
\end_layout

\begin_layout Standard
While resource mapping is very straightforward---one file per resource (or
 per type of resource if you capture URI templates)---it may be problematic
 in three ways:
\end_layout

\begin_layout Enumerate
In large URI-spaces you may suffer from having too many files.
 Though you can use 
\begin_inset Quotes eld
\end_inset

/libraries/
\begin_inset Quotes erd
\end_inset

 to share code between your resources, mapping still requires a file per
 resource type.
\end_layout

\begin_layout Enumerate
Mapped manual resources must have all their entry points (handleInit, handleGet,
 etc.) defined as global functions.
 This makes it awkward to use object oriented programming or other kinds
 of code reuse.
 If you define your resources as classes, you would have to hook your class
 instance via the global entry points.
\end_layout

\begin_layout Enumerate
The URI-space is your public-facing structure, but your internal implementation
 may benefit from an entirely different organization.
 For example, some resources my be backed by a relational database, others
 by a memory cache, and others by yet another subsystem.
 It may make sense for you to organize your code according to subsystems,
 rather than the public URI-space.
 For this reason, you would want the URI-space configuration to be separate
 from your code organization.
\end_layout

\begin_layout Standard
These problems might not be relevant to your application.
 But if they are, you may prefer the URI/resource separation paradigm, which
 can be implemented via URI capturing or resource dispatching, documented
 below.
\end_layout

\begin_layout Subsection
URI Capturing
\end_layout

\begin_layout Standard
URI capturing, for the purpose of the URI/resource separation paradigm,
 only makes sense for scriptlet resources.
 For manual resources, use resource dispatching (explained below) instead.
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

URI capturing
\begin_inset Quotes erd
\end_inset

 is implemented as server-side redirection (also called 
\begin_inset Quotes eld
\end_inset

URI rewriting
\begin_inset Quotes erd
\end_inset

), 
\emph on
with the added ability to use hidden URIs as the destination
\emph default
.
 It's this added ability which makes URI capturing useful for URI/resource
 separation: hidden URIs include both scriptlet resource files in your applicati
on's 
\begin_inset Quotes eld
\end_inset

/libraries/scriptlet-resources/
\begin_inset Quotes erd
\end_inset

 subdirectory as well as URIs routed to the 
\begin_inset Quotes eld
\end_inset

hidden
\begin_inset Quotes erd
\end_inset

 route type.
\end_layout

\begin_layout Standard
The effect is that you can put your scriptlet resources under 
\begin_inset Quotes eld
\end_inset

/libraries/scriptlet-resources/
\begin_inset Quotes erd
\end_inset

, using any directory structure that makes sense to you, and capture the
 public-facing URI in your routing.js.
\end_layout

\begin_layout Standard
For example, let's assume that you have the following files in 
\begin_inset Quotes eld
\end_inset

/libraries/scriptlet-resources/
\begin_inset Quotes erd
\end_inset

: 
\begin_inset Quotes eld
\end_inset

/database/profile.html
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

/database/preferences.html
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

/cache/session.html
\begin_inset Quotes erd
\end_inset

, which you organized in subdirectories according to the technologies used.
 Your URI-space can be defined thus:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/user/{userId}/preferences/': '/database/preferences/',
\end_layout

\begin_layout Plain Layout

	'/user/{userId}/profile/': '/database/profile/',
\end_layout

\begin_layout Plain Layout

	'/user/{userId}/session/': '/cache/session/'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note how the URI-space is organized completely differently from your filesystem.
\end_layout

\begin_layout Subsection
Resource Dispatching
\end_layout

\begin_layout Standard
Resource dispatching, for the purpose of the URI/resource separation paradigm,
 only makes sense for manual resources.
 For scriptlet resources, use URI capturing (explained above) instead.
\end_layout

\begin_layout Standard
Configuring a dispatch is straightforward.
 In routing.js, use the 
\begin_inset Quotes eld
\end_inset

dispatch
\begin_inset Quotes erd
\end_inset

 route type configuration, or the 
\begin_inset Quotes eld
\end_inset

@
\begin_inset Quotes erd
\end_inset

 shortcut:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/session/{sessionId}/': '@session',
\end_layout

\begin_layout Plain Layout

	'/user/{userId}/preferences/': '@user'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The IDs must each be unique in your application.
 You must furthermore configure your dispatchers.
 There is one dispatcher per programming language, and JavaScript is the
 default dispatcher.
 We can configure it like so:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.dispatchers = {
\end_layout

\begin_layout Plain Layout

	javascript: '/manual-resources/'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

/manual-resources/
\begin_inset Quotes erd
\end_inset

 value is the document name to be executed from your application's 
\begin_inset Quotes eld
\end_inset

/libraries/
\begin_inset Quotes erd
\end_inset

 subdirectory.
 In our case, we must thus also have a 
\begin_inset Quotes eld
\end_inset

/libraries/manual-resources.js
\begin_inset Quotes erd
\end_inset

 file:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var UserResource = function() {
\end_layout

\begin_layout Plain Layout

	this.handleInit = function(conversation) {
\end_layout

\begin_layout Plain Layout

		conversation.addMediaTypeByName('text/plain')
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	this.handleGet = function(conversation) {
\end_layout

\begin_layout Plain Layout

		return 'This is user #' + conversation.locals.get('userId')
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

resources = {
\end_layout

\begin_layout Plain Layout

	session: {
\end_layout

\begin_layout Plain Layout

		handleInit: function(conversation) {
\end_layout

\begin_layout Plain Layout

			conversation.addMediaTypeByName('text/plain')
\end_layout

\begin_layout Plain Layout

		},
\end_layout

\begin_layout Plain Layout

		handleGet: function(conversation) {
\end_layout

\begin_layout Plain Layout

			return 'This is session #' + conversation.locals.get('sessionId')
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	},
\end_layout

\begin_layout Plain Layout

	user: new UserResource()
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The dispatcher will execute the above library and look for the 
\begin_inset Quotes eld
\end_inset

resources
\begin_inset Quotes erd
\end_inset

 dict, which maps dispatch IDs to resource implementations.
 In our example we've mapped the 
\begin_inset Quotes eld
\end_inset

session
\begin_inset Quotes erd
\end_inset

 dispatch ID to a dict, and used simple JavaScript object-oriented programming
 for the 
\begin_inset Quotes eld
\end_inset

user
\begin_inset Quotes erd
\end_inset

 dispatch ID.
 (Note that the Sincerity.Classes facility offers a comprehensive object-oriented
 system for JavaScript, but we preferred more straightforward code for this
 example.)
\end_layout

\begin_layout Standard
As you can see, the manual-resources.js file does not refer to URIs, but
 instead to dispatch IDs, which you can dispatch as you see fit.
\end_layout

\begin_layout Subsubsection
Inversion of Control
\end_layout

\begin_layout Standard
Object-oriented inheritance is one useful way to reuse code while allowing
 for special implementations.
 Additionally, Prudence allows for a straightforward IoC (Inversion of Control)
 mechanism.
\end_layout

\begin_layout Standard
When defining the dispatch, you can also inject set values to conversation.locals.
 You would need to use the long-form configuration to do this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/user/{userId}/preferences': {type: 'dispatch', id: 'user', locals: {section:
 'preferences'}},
\end_layout

\begin_layout Plain Layout

	'/user/{userId}/profile: {type: 'dispatch', id: 'user', locals: {section:
 'profile'}}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that both URI templates are dispatched to the exact same ID, but the
 
\begin_inset Quotes eld
\end_inset

locals
\begin_inset Quotes erd
\end_inset

 dict used is different for each.
 In your resource implementation, you can allow for different behavior according
 to the value of the 
\begin_inset Quotes eld
\end_inset

section
\begin_inset Quotes erd
\end_inset

 conversation.local.
 This allows you to configure your resource in routing.js, rather from its
 implementation in resource.js.
 In other words, 
\begin_inset Quotes eld
\end_inset

control
\begin_inset Quotes erd
\end_inset

 is 
\begin_inset Quotes eld
\end_inset

inverted,
\begin_inset Quotes erd
\end_inset

 via value injection.
\end_layout

\begin_layout Subsubsection
Other Programming Languages
\end_layout

\begin_layout Standard
Resource dispatching is also supported for Groovy, Python, Ruby, PHP and
 Clojure.
 To use them, you must specify the dispatcher together with the dispatch
 ID in routing.js, and configure that specific dispatcher.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/session/{sessionId}/': '@python:session'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

app.dispatchers = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	python: '/resources/'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Custom Dispatching
\end_layout

\begin_layout Standard
Under the hood resource dispatching is handled by URI capturing.
 The URI is captured to a special manual resource called a 
\begin_inset Quotes eld
\end_inset

dispatcher
\begin_inset Quotes erd
\end_inset

 with an injected value specifying to which resource it should dispatch.
\end_layout

\begin_layout Standard
Prudence comes with a few dipsatchers to be found in the 
\begin_inset Quotes eld
\end_inset

/libraries/scripturian/prudence/dispatchers/
\begin_inset Quotes erd
\end_inset

 directory of your container.
 For example, the JavaScript dispatcher is 
\begin_inset Quotes eld
\end_inset

/libraries/scripturian/prudence/dispatchers/javascript.js
\begin_inset Quotes erd
\end_inset

.
 You are encouraged to look at the code there in order to understand how
 dispatching works: it's quite straightforward.
\end_layout

\begin_layout Standard
However, you can also write your own dispatchers to handle more complex
 dispatching paradigms.
 An example configuration of overriding the default 
\begin_inset Quotes eld
\end_inset

javascript
\begin_inset Quotes erd
\end_inset

 dispatcher:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.dispatchers = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	javascript: {
\end_layout

\begin_layout Plain Layout

		dispatcher: '/dispatchers/mydispatcher/',
\end_layout

\begin_layout Plain Layout

		resources: '/resources/'
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You would then need a 
\begin_inset Quotes eld
\end_inset

/libraries/dispatchers/mydispatcher.js
\begin_inset Quotes erd
\end_inset

 file under your application's subdirectory.
 You would be able to access the dispatch ID as the 
\begin_inset Quotes eld
\end_inset

prudence.dispatcher.id
\begin_inset Quotes erd
\end_inset

 conversation.local.
\end_layout

\begin_layout Standard
Note that you do not need to override the default dispatchers, and can use
 any dispatcher name:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.dispatchers = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	special: {
\end_layout

\begin_layout Plain Layout

		dispatcher: '/dispatchers/myspecialdispatcher/',
\end_layout

\begin_layout Plain Layout

		customValue1: 'hello',
\end_layout

\begin_layout Plain Layout

		customValue2: 'world'
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

customValue1
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

customValue2
\begin_inset Quotes erd
\end_inset

 would then be available to your dispatcher code as the 
\begin_inset Quotes eld
\end_inset

prudence.dispatcher.special.customValue1
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

prudence.dispatcher.special.customValue2
\begin_inset Quotes erd
\end_inset

 application.globals respectively (replace 
\begin_inset Quotes eld
\end_inset

special
\begin_inset Quotes erd
\end_inset

 in the name with your dispatcher name).
 Thus, you can configure your dispatcher in routing.js.
\end_layout

\begin_layout Subsection
Virtual Hosts
\end_layout

\begin_layout Standard
Restlet has excellent virtual host support, and there is a many-to-many
 relationship routing between almost servers, hosts and application.
 So, you can easily have a single Prudence container (running in a single
 JVM instance) managing several sites at once with several applications
 on several domains on several servers.
\end_layout

\begin_layout Standard
First, though, it's worth considering whether, despite its ease, it's worth
 using a single container for everything.
\end_layout

\begin_layout Subsubsection
Advantages of Using a Single Container
\end_layout

\begin_layout Enumerate
Possibly simpler deployment: you are using a single base directory, and
 because all configuration is done by JavaScript inside the container it
 can be fully dynamic.
\end_layout

\begin_layout Enumerate
Less memory use that running multiple JVMs.
\end_layout

\begin_layout Enumerate
You can use application.sharedGlobals to share state between applications.
 (Note that if they are running in multiple containers, you can use application.d
istributedGlobals instead.
 Will also work on VMs running on separate machines in the cluster.
 But distributed globals have to be serializable, of course.)
\end_layout

\begin_layout Subsubsection
Advantages of Using Multiple Containers
\end_layout

\begin_layout Enumerate
Possibly simpler deployment: several base directories can mean separate
 code/distribution repositories, and configuration may happen at the reverse-pro
xy level with your web frontend.
 It may even worth having each application running in its own JVM/container.
\end_layout

\begin_layout Enumerate
Robustness: crashes/deadlocks/memory leaks in one VM won't affect others.
\end_layout

\begin_layout Enumerate
Run-time flexibility: you can restart the JVM for one container without
 affecting others that are running.
\end_layout

\begin_layout Standard
There is no performance advantage in either scenario.
 Everything in Prudence is designed around high-concurrency and threading,
 and threads are managed by the OS globally.
 (Well, there are caveats to this statements: Linux can group threads per
 running process for purposes of prioritization, but this is only really
 done for desktop applications.
 But this could be possibly useful when running several containers, if you
 want to guarantee high thread priority to one of the containers over the
 others.
 Any of this would only effect 
\emph on
very
\emph default
 high concurrency deployments, where CPU usage is often high.)
\end_layout

\begin_layout Standard
Assuming you do decide to use a single container, we'll explain below how
 it's done.
 (Note that the Prudence Administration applcation shows all of this routing
 information at runtime).
\end_layout

\begin_layout Subsubsection
Servers
\end_layout

\begin_layout Standard
Under 
\begin_inset Quotes eld
\end_inset

/component/servers/
\begin_inset Quotes erd
\end_inset

 you can define your servers.
 Just add a new file and assign a port for it.
 There is actually routing done per server, too, so you can define which
 IP address you want the server to bind to, in case your machine as several
 IP addresses.
\end_layout

\begin_layout Standard
A minimal server definition:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var server = new Server(Protocol.HTTP, 8080)
\end_layout

\begin_layout Plain Layout

server.name = 'myserver'
\end_layout

\begin_layout Plain Layout

component.servers.add(server)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To control routing for the server:
\end_layout

\begin_layout LyX-Code
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

server.address = [string]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The server.address defaults to null (which in turn defaults to localhost),
 but you can limit routing to a specific IP address.
 Furthermore, “*” wildcards are supported for accepting all or parts of
 an IP address.
\end_layout

\begin_layout Subsubsection
Hosts
\end_layout

\begin_layout Standard
Under 
\begin_inset Quotes eld
\end_inset

/component/hosts/
\begin_inset Quotes erd
\end_inset

 you can define your virtual hosts.
 A virtual host routes according to domain name and port assignment.
\end_layout

\begin_layout Standard
A minimal host definition:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var host = new VirtualHost(component.context)
\end_layout

\begin_layout Plain Layout

host.name = 'privatehost' // this name is used in app.hosts
\end_layout

\begin_layout Plain Layout

component.hosts.add(host)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To control routing for the host:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

host.serverAddress = [string]
\end_layout

\begin_layout Plain Layout

host.serverPort = [string]
\end_layout

\begin_layout Plain Layout

host.hostScheme = [string]
\end_layout

\begin_layout Plain Layout

host.hostDomain = [string]
\end_layout

\begin_layout Plain Layout

host.hostPort = [string]
\end_layout

\begin_layout Plain Layout

host.resourceScheme = [string]
\end_layout

\begin_layout Plain Layout

host.resourceDomain = [string]
\end_layout

\begin_layout Plain Layout

host.resourcePort = [string]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
By default all of these are null, meaning that all incoming requests are
 routed, but you can limit routing to specific incoming requests.
 For example, you might want the virtual host to only accept a specific
 port or server IP address.
 “*” wildcards are supported for all of these.
\end_layout

\begin_layout Standard
Note that 
\emph on
all
\emph default
 servers route to 
\emph on
all
\emph default
 hosts.
 If you don't want a host to support all servers, you must limit its routing
 accordingly.
\end_layout

\begin_layout Subsection
app.hosts
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Standard
Use app.hosts in routing.js to assign the application to a base URI on that
 host.
 By default we only use a single host, the default one, but you can assign
 each app to one or more hosts, with different base URIs under each.
 The application instance only runs 
\emph on
once
\emph default
 in such cases: all application.globals are shared no matter which host a
 request is routed from.
\end_layout

\begin_layout Paragraph
Minimal definition
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.hosts = {
\end_layout

\begin_layout Plain Layout

	'default': '/publicbaseuri/'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Custom
\end_layout

\begin_layout Standard
Here's an example of “attaching” the app to two different virtual hosts,
 with different base URIs under each:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.hosts = {
\end_layout

\begin_layout Plain Layout

	'default': '/publicbaseuri/',
\end_layout

\begin_layout Plain Layout

	'privatehost': '/privatebaseuri'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
The Internal URI-space
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Standard
app.hosts internal
\end_layout

\begin_layout Subsection
Architecture Tips
\end_layout

\begin_layout Standard
REST does not standardize URI-spaces, and indeed has little to say about
 URI design.
 However, it does 
\emph on
imply
\emph default
 a preference for certain architectural principles.
\end_layout

\begin_layout Standard
It's a good idea to think very carefully about your URI-space.
 A RESTful URI-space can help you define well-encapsulated RESTful resources.
\end_layout

\begin_layout Subsubsection
Nouns vs.
 Verbs
\end_layout

\begin_layout Standard
It's useful to think of URIs as syntactic 
\emph on
nouns
\emph default
, a grammatical counterpart to HTTP's 
\emph on
verbs
\emph default
.
 In other worlds, make sure that you do not include verbs in your URIs.
 Examples:
\end_layout

\begin_layout Itemize
Good: 
\begin_inset Quotes eld
\end_inset

/service/{id}/status/
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Bad: 
\begin_inset Quotes eld
\end_inset

/service/{id}/start/
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

/service/{id}/stop/
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
What is wrong with verbs in URIs?
\end_layout

\begin_layout Standard
One potential problem is clarity.
 Which HTTP verb should be used on a verb URI? Do you need to POST, PUT
 or DELETE to 
\begin_inset Quotes eld
\end_inset

/service/{id}/stop/
\begin_inset Quotes erd
\end_inset

 in order to stop the service? Of course, you can support all and document
 this, but it won't be immediately obvious to the user.
\end_layout

\begin_layout Standard
A second potential problem is that you need to keep increasing the size
 of your URI-space the more actions of this sort you want to support.
 [SO?]
\end_layout

\begin_layout Standard
A third, more serious potential problem is idempotency.
 The idempotent verbs PUT and DELETE may be optimized by the HTTP infrastructure
 (for example, a smart load balancer) such that requests arrive more than
 once: this is allowed by the very definition of idempotency.
 However, your operations 
\emph on
may
\emph default
 not be semantically idempotent.
 For example, if a 
\begin_inset Quotes eld
\end_inset

stop
\begin_inset Quotes erd
\end_inset

 is sent to an already-stopped service, it may return an 
\begin_inset Quotes eld
\end_inset

already stopped
\begin_inset Quotes erd
\end_inset

 500 error.
 In this case, if the infrastructure allows for two 
\begin_inset Quotes eld
\end_inset

stop
\begin_inset Quotes erd
\end_inset

 commands to come through, then the user may get an error even though the
 operation succeeded for the first 
\begin_inset Quotes eld
\end_inset

stop.
\begin_inset Quotes erd
\end_inset

 There's an easy way around this: simply allow 
\emph on
only
\emph default
 POST, the non-idempotent verb, for all such operations.
 The infrastructure will never allow more than request to come through per
 POST.
 However, if you enforce the use of POST, you will lose the ability of the
 infrastructure to optimize for non-idempotency.
 POST is the least scalable HTTP verb.
\end_layout

\begin_layout Standard
The bottom line is that if you standardize on only using nouns for your
 URIs, you will avoid many of these semantic entanglements.
\end_layout

\begin_layout Standard
Note: Beware of gerunds! A URI such as 
\begin_inset Quotes eld
\end_inset

/service/{id}/stopping/
\begin_inset Quotes erd
\end_inset

 is technically a noun, but allows for some verb-related problems to creep
 in.
\end_layout

\begin_layout Subsubsection
Do You Really Need REST?
\end_layout

\begin_layout Standard
In the above section, it was suggested that you prefer nouns to verbs.
 However, this preference may not make much sense to apply in your application.
 Your application may be very command-oriented, such that you will end up
 with a very small set of 
\begin_inset Quotes eld
\end_inset

noun
\begin_inset Quotes erd
\end_inset

 URIs that need to support a vast amount of commands.
\end_layout

\begin_layout Standard
REST shines because it is based on a tiny set of very tightly defined verbs:
 GET, POST, PUT, DELETE.
 The entire infrastructure is highly optimized around them: load balancers,
 caches, browsers, gateways, etc., all should know how best to handle each
 of these for maximum scalability and reliability.
 But, it's entirely possible that your needs cannot be easily satisfied
 by just four verbs.
\end_layout

\begin_layout Standard
And that's OK.
 REST is not always the best solution for APIs.
\end_layout

\begin_layout Standard
Instead, take a look at RPC (Remote Procedure Call) mechanisms.
 The Diligence framework, based on Prudence, provides robust and powerful
 support for JSON-RPC, XML-RPC and ExtDirect, allowing you to hook a JavaScript
 function on the server directly to a URI.
 In terms of HTTP, these protocols all use HTTP POST, and do not leverage
 the HTTP infrastructure as well as a more fully RESTful API.
 But, one size does not fit all, an an RPC-based solution may prove a better
 match for your project.
\end_layout

\begin_layout Standard
It's also perfectly possible to allow for both REST and RPC.
 Use each approach where it is most appropriate.
\end_layout

\begin_layout Subsubsection
Hierarchies
\end_layout

\begin_layout Standard
It's entirely a matter of convention that the use of 
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset

 in URIs implies hierarchy.
 Historically, the convention was likely imported from filesystem paths,
 where a name before a 
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset

 signifies a directory rather than a file.
\end_layout

\begin_layout Standard
This convention is useful because it's very familiar to users, but additionally
 it implies semantic properties that can add clarity and power to your resource
 design.
 There are two possible semantic principles you may consider:
\end_layout

\begin_layout Enumerate
A descendant resource 
\emph on
belongs to
\emph default
 its ancestor, such that resources have cascading relationships in the hierarchy.
 This implies two rules:
\end_layout

\begin_deeper
\begin_layout Enumerate
Operations on a resource 
\emph on
may
\emph default
 affect descendants.
 This rule is most obvious when applied to the DELETE verb: for example,
 if you delete 
\begin_inset Quotes eld
\end_inset

/user/{id}/
\begin_inset Quotes erd
\end_inset

, then it is expected that the resources at 
\begin_inset Quotes eld
\end_inset

/user/{id}/profile/
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

/user/{id}/preferences/
\begin_inset Quotes erd
\end_inset

 also be deleted.
 A PUT, too, would also affect the descendant resources.
\end_layout

\begin_layout Enumerate
Operations on a resource 
\emph on
should not
\emph default
 affect ancestors.
 In other words, a descendant's state is isolated from its ancestors.
 For example, if I send a POST to 
\begin_inset Quotes eld
\end_inset

/user/{id}/profile/
\begin_inset Quotes erd
\end_inset

, the representation at 
\begin_inset Quotes eld
\end_inset

/user/{id}/
\begin_inset Quotes erd
\end_inset

 should remain unaltered.
\end_layout

\end_deeper
\begin_layout Enumerate
A descendant resource 
\emph on
belongs to
\emph default
 its ancestor and also represents 
\emph on
an aspect of
\emph default
 its ancestor, such that operations on a resource can be fine-tuned to particula
r aspects of it.
 This implies three rules:
\end_layout

\begin_deeper
\begin_layout Enumerate
Descendant representations 
\emph on
are included
\emph default
 in ancestor representations.
 For example, a GET on 
\begin_inset Quotes eld
\end_inset

/service/{id}/
\begin_inset Quotes erd
\end_inset

 would include information about the status that you would see if you GET
 on 
\begin_inset Quotes eld
\end_inset

/service/{id}/status/
\begin_inset Quotes erd
\end_inset

.
 The latter URI makes it easier for the client to direct operations at the
 status aspect.
\end_layout

\begin_layout Enumerate
Operations on a resource 
\emph on
may
\emph default
 affect descendants.
 See above.
\end_layout

\begin_layout Enumerate
Operations on a resource 
\emph on
will
\emph default
 affect ancestors.
 This is the 
\emph on
opposite 
\emph default
of the above: the descendant's state is 
\emph on
not isolated 
\emph default
from its ancestors.
 For example, a POST to 
\begin_inset Quotes eld
\end_inset

/service/{id}/status/
\begin_inset Quotes erd
\end_inset

 would surely also affect 
\begin_inset Quotes eld
\end_inset

/service/{id}/
\begin_inset Quotes erd
\end_inset

, which includes the status.
\end_layout

\end_deeper
\begin_layout Standard
You can see from the difference between rule 1.b and 2.c.
 that it's important to carefully define the 
\emph on
nature
\emph default
 of your hierarchical relationships.
 Unlike filesystem directory hierarchies, in a URI-space there is no single
 standard or interpretation of what of a hierarchy means.
\end_layout

\begin_layout Standard
Note that a format should not be considered 
\begin_inset Quotes eld
\end_inset

an aspect
\begin_inset Quotes erd
\end_inset

 in the sense used in principle 2.
 For example, 
\begin_inset Quotes eld
\end_inset

/service/{id}/html/
\begin_inset Quotes erd
\end_inset

 would not be a good way to support an HTML format for 
\begin_inset Quotes eld
\end_inset

/service/{id}/
\begin_inset Quotes erd
\end_inset

.
 The reason is that you would be allowing for more than one URI for the
 same encapsulated resource, creating confusion for users.
 For example, it's not immediately clear what would happen if they DELETE
 
\begin_inset Quotes eld
\end_inset

/service/{id}/html/
\begin_inset Quotes erd
\end_inset

.
 Would that just remove the ability to represent the service as HTML? Or
 delete the service itself?
\end_layout

\begin_layout Standard
Supporting multiple formats is best handled with content negotiation, within
 the REST architecture.
 If further formatting is required, URI query parameters can be used.
 For example: 
\begin_inset Quotes eld
\end_inset

/service/{id}/?indent=2
\begin_inset Quotes erd
\end_inset

 might return a JSON representation with 2-space indentation.
\end_layout

\begin_layout Subsubsection
Plural vs.
 Singular
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Subsubsection
Documenting Your URI-Space
\end_layout

\begin_layout Standard
If you create a programming language API, you will surely want to document
 it in a human language.
 You will want to define the acceptable types and usages of function arguments,
 describe return values, possible raises exceptions, add implementation
 and performance notes, etc.
 Many programming languages include tools for embedding such documentation
 as comments in the source code, and generating a reference manual from
 it.
\end_layout

\begin_layout Standard
Consider that documenting your URI-space is just as important.
 A tool to generate such documentation for you is being considered for a
 future version of Prudence.
 Until it is available, consider adopting a resource documentation standard
 for your project.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

 * This resource represents a service running on the server.
 Servers have unique
\end_layout

\begin_layout Plain Layout

 * IDs defined by integers.
 A service can be either active or inactive.
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * Use POST to change the name or status of an existing service.
 You may
\end_layout

\begin_layout Plain Layout

 * not use it change the ID of an existing service.
 PUT will create a new
\end_layout

\begin_layout Plain Layout

 * service, and DELETE will stop and remove it.
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * Implementation note: if you PUT a service with an ID that already exists,
 then
\end_layout

\begin_layout Plain Layout

 * it will only stop and restart the service rather than removing/recreate
 it,
\end_layout

\begin_layout Plain Layout

 * which would be too resource intensive.
 Use DELETE if you absolutely need the
\end_layout

\begin_layout Plain Layout

 * service to be removed first, or set the "clean" query param to "true"
 to
\end_layout

\begin_layout Plain Layout

 * force removal.
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * URI: /service/{id:decimal}/
\end_layout

\begin_layout Plain Layout

 * Aspects: /service/{id:decimal}/status/
\end_layout

\begin_layout Plain Layout

 * Verbs: GET, POST, PUT, DELETE
\end_layout

\begin_layout Plain Layout

 * Media types: application/json, application/xml, text/plain (as JSON)
\end_layout

\begin_layout Plain Layout

 * Query params:
\end_layout

\begin_layout Plain Layout

 *  indent: decimal - if non-zero will return a human-readable indented
 version
\end_layout

\begin_layout Plain Layout

 *          of the representation with lines indented by the integer value
\end_layout

\begin_layout Plain Layout

 *  clean: boolean - if "true" or "yes" or "1" wil force removal of an existing
\end_layout

\begin_layout Plain Layout

 *         service during a PUT operation on an existing service
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * Representation as application/json:
\end_layout

\begin_layout Plain Layout

 *  {
\end_layout

\begin_layout Plain Layout

 *   "id": number,
\end_layout

\begin_layout Plain Layout

 *   "name": string (the service name),
\end_layout

\begin_layout Plain Layout

 *   "status": string:"active"|"inactive"
\end_layout

\begin_layout Plain Layout

 *  }
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * POST/PUT payload as application/json:
\end_layout

\begin_layout Plain Layout

 *  {
\end_layout

\begin_layout Plain Layout

 *   "name": ...
\end_layout

\begin_layout Plain Layout

 *   "status": ...
\end_layout

\begin_layout Plain Layout

 *  }
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

 * This resource represents the status of a service.
 
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * DELETE on this resource is identical to PUT or POST with "inactive".
\end_layout

\begin_layout Plain Layout

 * PUT and POST are handled identically.
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * URI: /service/{id:decimal}/status/
\end_layout

\begin_layout Plain Layout

 * Aspect of: /service/{id:decimal}/
\end_layout

\begin_layout Plain Layout

 * Verbs: GET, POST, PUT, DELETE
\end_layout

\begin_layout Plain Layout

 * Media types: text/plain
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * Representation as text/plain:
\end_layout

\begin_layout Plain Layout

 *   "active"|"inactive"
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Under the Hood
\end_layout

\begin_layout Standard
In this final section, we'll describe in detail how routing works in Prudence.
 It can be considered optional reading for advanced developers.
\end_layout

\begin_layout Standard
In Prudence, “routing” refers to the decision-making process by which an
 incoming client request reaches its server-side handler .
 Usually, information in the request itself is used to make the decision,
 such as the URI, cookies, the client type, capabilities and geolocation.
 But routing can also take server-side and other circumstances into account.
 For example, a round-robin load-balancing router might send each incoming
 request to a different handler in sequence.
\end_layout

\begin_layout Standard
A request normally goes through many route types before reaching its handler.
 Filters along the way can change information in the request, which could
 also affect routing, and indeed filters can be used as routing tools.
\end_layout

\begin_layout Standard
This abstract, flexible routing mechanism is one of Prudence's most powerful
 features, but it's important to understand these basic principles.
 A common misconception is that routing is based on the hierarchical structure
 of URIs, such that a child URI's routing is somehow affected by its parent
 URI.
 While it's possible to explicitly design your routes hiearchically, routing
 is primarily to be understood in terms of the order of routers and filters
 along the way.
 A parent and child URI could thus use entirely different handlers.
\end_layout

\begin_layout Standard
To give you a better understanding of how Prudence routing works, let's
 follow the journey of a request, starting with routing at the server level.
\end_layout

\begin_layout Paragraph
Step 1: Servers
\end_layout

\begin_layout Standard
Requests come in from servers.
 Prudence instances have at the minimum one server, but can have more than
 one.
 Each server listens at a particular HTTP port, and multiple servers may
 in turn be restricted to particular network interfaces on your machine.
 By default, Prudence has a single server that listens to HTTP requests
 on port 8080 coming in from all network interfaces.
\end_layout

\begin_layout Standard
Servers are configured in 
\begin_inset Quotes eld
\end_inset

/component/servers/
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Paragraph
Step 2: The Component
\end_layout

\begin_layout Standard
There is only one component per Prudence instance, and 
\emph on
all 
\emph default
servers route to it.
 This allows Prudence a unified mechanism to deal with all incoming requests.
\end_layout

\begin_layout Paragraph
Step 3: Virtual Hosts
\end_layout

\begin_layout Standard
The component's router decides which virtual host should receive the request.
 The decision is often made according to the domain name in the URL, but
 can also take into account which server it came from.
 Virtual hosting is a tool to let you host multiple sites on the same Prudence
 instance, but it can be used for more subtle kinds of routing, too.
\end_layout

\begin_layout Standard
At the minimum you must have one virtual host.
 By default, Prudence has one that accepts all incoming requests from all
 servers.
 If you have multiple servers and want to treat them differently, you can
 create a virtual host for each.
\end_layout

\begin_layout Standard
Virtual hosts are configured in 
\begin_inset Quotes eld
\end_inset

/component/hosts/
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Paragraph
Step 4: Applications
\end_layout

\begin_layout Standard
Using app.hosts, you can configure which virtual hosts your application will
 be attached to, and the base URI for the application on each virtual host.
 An application can accept requests from several virtual hosts at once.
\end_layout

\begin_layout Standard
To put it another way, there's a many-to-many relationship between virtual
 hosts and applications: one host can have many applications, and the same
 application can be attached to many hosts.
\end_layout

\begin_layout Standard
Note that you can create a “nested” URI scheme for your applications.
 For example, one application might be attached at the root URI at a certain
 virtual host, “/”, while other applications might be at different URIs
 beneath the root, “/wackywiki” and “/wackywiki/support/forum”.
 The root application will not “steal” requests from the other applications,
 because the request is routed to the right application by the virtual host.
 The fact that the latter URI is the hierarchical descendant of the former
 makes no difference to the virtual host router.
\end_layout

\begin_layout Paragraph
A Complete Route
\end_layout

\begin_layout Standard
Let's assume a client from the Internet send a request to URI “http://www.wacky.or
g/wackywicki/support/forum/thread/12/.”
\end_layout

\begin_layout Standard
Our machine has two network interfaces, one facing the Internet and one
 facing the intranet, and we have two servers to listen on each.
 This particular request has come in through the external server.
 The request reachers the component's router.
\end_layout

\begin_layout Standard
We have a few virtual hosts: one to handle “www.wacky.org”, our organization's
 main site, and another to handle “support.wacky.org”, a secure site where
 paying customers can open support tickets.
\end_layout

\begin_layout Standard
Our forum application (in the 
\begin_inset Quotes eld
\end_inset

/applications/forum/
\begin_inset Quotes erd
\end_inset

 subdirectory) is attached to both virtual hosts, but at different URIs.
 It's at “www.wacky.org/wackywiki/support/forum” and at “support.wacky.org/forum”.
 In this case, our request is routed to the first virtual host.
 Though there are a few applications installed at this virtual host, our
 request follows the route to the forum application.
\end_layout

\begin_layout Standard
The remaining part of the URI, “/thread/12/” will be further routed inside
 the forum application, according to route types installed in its routing.js.
\end_layout

\begin_layout Subsection
app.preheat
\end_layout

\begin_layout Section
Implementing Resources
\begin_inset CommandInset label
LatexCommand label
name "implementing-resources"

\end_inset


\end_layout

\begin_layout Subsection
Comparison Table
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top" width="4cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Manual
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Scriptlet
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Static
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Supports URI Mapping
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Supports URI Dispatching
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Filename Extension
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Determines programming language
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Determines MIME type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Determines MIME type
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Filename Pre-extension
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*.m.*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*.s.*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Programming Languages
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Determined by filename extension
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Determined by scriptlet tags (multiple languages possible per resource)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Content Negotiation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Manually determined in handleInit; multiple MIME types possible
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Single MIME type determined by filename extension; multiple encodings automatica
lly supported and cached
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Single MIME type determined by filename extension; multiple encodings automatica
lly supported
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Server-Side Caching
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Manual (via API)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Automatic (handled by Prudence)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Client-Side Caching
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Manual (via API)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Automatic (determined by server-side caching)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Can be added with CacheControlFilter
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Manual Resources
\begin_inset CommandInset label
LatexCommand label
name "manual-resources"

\end_inset


\end_layout

\begin_layout Subsubsection
Mapping vs.
 Dispatching
\end_layout

\begin_layout Subsubsection
handleGetInfo
\end_layout

\begin_layout Subsubsection
Controlling the Formats
\end_layout

\begin_layout Standard
Negotiated via handleInit: the order matters
\end_layout

\begin_layout Standard
You can check what was negotiated
\end_layout

\begin_layout Standard
But you can set it to whatever you want later
\end_layout

\begin_layout Subsubsection
Client-Side Caching
\end_layout

\begin_layout Standard
conversation.modificationDate, conversation.tag
\end_layout

\begin_layout Subsubsection
Server-Side Caching
\end_layout

\begin_layout Standard
Not supported directly.
\end_layout

\begin_layout Subsubsection
Integrating Textual Resources
\end_layout

\begin_layout Subsection
Scriptlet Resources
\begin_inset CommandInset label
LatexCommand label
name "scriptlet-resources"

\end_inset


\end_layout

\begin_layout Standard
Must be mapped.
 In the future may be dispatched.
\end_layout

\begin_layout Subsubsection
Scriptlets
\end_layout

\begin_layout Subsubsection
Working with Different Programming Languages
\end_layout

\begin_layout Subsubsection
Controlling the Format
\end_layout

\begin_layout Standard
Rely on the extension (see static resources) or change it in code.
\end_layout

\begin_layout Subsubsection
Server-Side Caching
\end_layout

\begin_layout Subsubsection
Client-Side Caching
\end_layout

\begin_layout Subsubsection
Scriptlet Plugins
\end_layout

\begin_layout Subsection
Static Resources
\end_layout

\begin_layout Standard
Must be mapped.
\end_layout

\begin_layout Subsubsection
Controlling the Format
\end_layout

\begin_layout Subsubsection
Client-Side Caching
\end_layout

\begin_layout Subsubsection
CSS and JavaScript
\end_layout

\begin_layout Subsubsection
ZUSS
\end_layout

\begin_layout Subsection
Integrating Java
\end_layout

\begin_layout Standard
Resources
\end_layout

\begin_layout Standard
Other Restlets
\end_layout

\begin_layout Section
Caching
\end_layout

\begin_layout Subsection
Introduction: Integrated Caching
\end_layout

\begin_layout Subsection
Two Caching Strategies
\end_layout

\begin_layout Standard
The default Prudence application template is configured for very minimal
 caching, which is suitable for development deployments.
 However, once you are ready to move your application to production or staging,
 you will likely want a more robust caching strategy.
\end_layout

\begin_layout Standard
We will here present two common strategies, and discuss the pros and cons
 of each.
\end_layout

\begin_layout Subsubsection
Cautious: Short-Term Caching
\end_layout

\begin_layout Standard
This is a great strategy if you're 
\emph on
not
\emph default
 feeling very confident about managing caching in your application logic.
 Perhaps you have too many different kinds of pages requiring different
 caching strategies.
 Perhaps you can't maintain the strict discipline required for more aggressive
 caching, due to a quickly changing application structure (
\begin_inset Quotes eld
\end_inset

agile
\begin_inset Quotes erd
\end_inset

?) or third-party constraints.
\end_layout

\begin_layout Standard
If you're in that boat, short-term caching is recommended over no caching
 at all, because it would still offer better performance and scalability.
 Because caching is short-term, any mistakes you make won't last for very
 long, and can quickly be fixed.
\end_layout

\begin_layout Standard
How short a term depends on two factors: 1) usage patterns for your web
 site, and 2) the content update frequency.
\end_layout

\begin_layout Standard
If a user tends to spend about an hour browsing your site, then a one-hour
 duration
\end_layout

\begin_layout Standard
routing.js:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	'/*': [
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			type: 'scriptlet',
\end_layout

\begin_layout Plain Layout

			clientCachingMode: 'conditional' // this is actually the default
\end_layout

\begin_layout Plain Layout

		},
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			type: 'cacheControl',
\end_layout

\begin_layout Plain Layout

			mediaTypes: {
\end_layout

\begin_layout Plain Layout

				'image/png': '1h',
\end_layout

\begin_layout Plain Layout

				'image/gif': '1h',
\end_layout

\begin_layout Plain Layout

				'image/jpeg': '1h',
\end_layout

\begin_layout Plain Layout

				'text/css': '1h',
\end_layout

\begin_layout Plain Layout

				'application/x-javascript': '1h'
\end_layout

\begin_layout Plain Layout

			},
\end_layout

\begin_layout Plain Layout

			next: {
\end_layout

\begin_layout Plain Layout

				type: 'zuss',
\end_layout

\begin_layout Plain Layout

				next: 'static'
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
settings.js:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

document.executeOnce('/sincerity/localization/')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

app.globals = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	cacheDuration = '1m'.toMilliseconds()
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Selectively Disabling Caching
\end_layout

\begin_layout Subsubsection
Confident: Indefinite Caching
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	'/*': [
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			type: 'scriptlet',
\end_layout

\begin_layout Plain Layout

			clientCachingMode: 'offline',
\end_layout

\begin_layout Plain Layout

			maxClientCachingDuration: '5m'.toMilliseconds()
\end_layout

\begin_layout Plain Layout

		},
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			type: 'cacheControl',
\end_layout

\begin_layout Plain Layout

			mediaTypes: {
\end_layout

\begin_layout Plain Layout

				'image/png': 'farFuture',
\end_layout

\begin_layout Plain Layout

				'image/gif': 'farFuture',
\end_layout

\begin_layout Plain Layout

				'image/jpeg': 'farFuture',
\end_layout

\begin_layout Plain Layout

				'text/css': 'farFuture',
\end_layout

\begin_layout Plain Layout

				'application/x-javascript': 'farFuture'
\end_layout

\begin_layout Plain Layout

			},
\end_layout

\begin_layout Plain Layout

			next: {
\end_layout

\begin_layout Plain Layout

				type: 'zuss',
\end_layout

\begin_layout Plain Layout

				next: 'static'
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		},
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Paranoid: No Caching
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	'/*': [
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			type: 'scriptlet',
\end_layout

\begin_layout Plain Layout

			clientCachingMode: 'disabled'
\end_layout

\begin_layout Plain Layout

		},
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			type: 'zuss',
\end_layout

\begin_layout Plain Layout

			next: 'static'
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Server-Side Caching
\end_layout

\begin_layout Subsection
Client-Side Caching
\end_layout

\begin_layout Subsubsection
Content Negotiation
\end_layout

\begin_layout Section
Executing Tasks
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Subsection
crontab
\end_layout

\begin_layout Section
Programming
\end_layout

\begin_layout Subsection
Introduction: Scripturian
\end_layout

\begin_layout Subsection
JavaScript
\end_layout

\begin_layout Subsection
Other Languages
\end_layout

\begin_layout Subsection
Execution Environments
\end_layout

\begin_layout Subsubsection
Bootstrap
\end_layout

\begin_layout Standard
Straightforward beginning-to-end script
\end_layout

\begin_layout Standard
Except for initialization tasks
\end_layout

\begin_layout Subsubsection
Manual Resources and Handlers
\end_layout

\begin_layout Subsubsection
Textual Resources
\end_layout

\begin_layout Subsubsection
Cron Tasks
\end_layout

\begin_layout Standard
Two options!
\end_layout

\begin_layout Subsection
Managing State
\end_layout

\begin_layout Standard
Prudence is designed to allow massive concurrency and scalability while
 at the same time shielding you from the gorier details.
 However, when it comes to sharing state between different parts of your
 code, it's critical that you understand Prudence's state services.
\end_layout

\begin_layout Subsubsection
conversation.locals
\end_layout

\begin_layout Standard
These are not “local” in the same way that code scope locals are.
 The term “local” here should be read as “local to the conversation.” They
 are “global” in the sense that they can be accessed by any function in
 your code, but are “local” in the sense that they persist only for the
 duration of the user request.
 (Compare with “thread locals” in the JVM, which are also “local” in a specific
 sense.)
\end_layout

\begin_layout Standard
You may ask, then, why you wouldn't want to just use your language globals,
 which have similar scope and life.
 
\bar under
conversation.locals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|conversation-locals"

\end_inset

)
\bar default
 have three main uses in Prudence:
\end_layout

\begin_layout Enumerate
To easily share conversation-scope state between scriptlets written in different
 languages.
\end_layout

\begin_layout Enumerate
To share state for deferred conversations---see 
\bar under
conversation.defer (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|conversation-defer"

\end_inset

)
\bar default
.
 In such cases, your language's globals would not persist across the thread
 boundaries.
\end_layout

\begin_layout Enumerate
They are Prudence's general mechanism for sending state to your code in
 a conversation.
 For example, 
\bar under
captured URI segments are stored here (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../routing/|static-capturing"

\end_inset

)
\bar default
 as well as 
\bar under
document.cacheKeyPattern (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|document-cache-key-pattern"

\end_inset

)
\bar default
 variables.
\end_layout

\begin_layout Subsubsection
Global Variables
\begin_inset CommandInset label
LatexCommand label
name "../api/|global-variables"

\end_inset


\end_layout

\begin_layout Standard
You know how local variables work in your programming language: they exist
 only for the duration of a function call, after which their state is discarded.
 If you want state to persist beyond the function call, you use a global
 variable (or a “static” local, which is really a global).
\end_layout

\begin_layout Standard

\emph on
But in Prudence, you cannot expect global variables to persist beyond a
 user request.

\emph default
 To put it another way, you should consider every single user request as
 a separate “program” with its own global state.
 See the “life” sections for 
\bar under
generating HTML (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../generating-html/|life"

\end_inset

)
\bar default
 and 
\bar under
resources (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../resources/|life"

\end_inset

)
\bar default
 for more information on when this global state is created and discarded.
 If you need global variables to persist, you must use 
\bar under
application.globals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|application-globals"

\end_inset

)
\bar default
, 
\bar under
application.sharedGlobals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|application-shared-globals"

\end_inset

)
\bar default
 or even 
\bar under
application.distributedGlobals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|application-distributed-globals"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Standard
Why does Prudence discard your language's globals? This has to do with allowing
 for concurrency while shielding you from the complexity of having to guarantee
 the thread-safety of your code.
 By making each user request a separate “program,” you don't have to worry
 about overlapping shared state, coordinating thread access, etc., for every
 use of a variable.
\end_layout

\begin_layout Quote
The exception to this is code in /resources/, in which language globals
 
\emph on
might
\emph default
 persist.
 To improve performance, Prudence caches the global context for these in
 memory, with the side effect that your language globals persist beyond
 a single user request.
 For various reasons, however, Prudence may reset this global context.
 You should not rely on this side effect, and instead always use 
\bar under
application.globals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|application-globals"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Subsubsection
application.globals vs.
 application.sharedGlobals
\end_layout

\begin_layout Standard
The rule of thumb is to always prefer to use
\bar under
 application.globals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|application-globals"

\end_inset

)
\bar default
.
 By doing so, you'll minimize interdependencies between applications, and
 help make each application deployable on its own.
\end_layout

\begin_layout Standard
Use for 
\bar under
application.sharedGlobals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|application-shared-globals"

\end_inset

)
\bar default
 (and possibly 
\bar under
application.distributedGlobals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|application-distributed-globals"

\end_inset

)
\bar default
---similar concerns apply to it) only when you explicitly need a bridge
 
\emph on
between 
\emph default
applications.
 Examples:
\end_layout

\begin_layout Enumerate
To save resources.
 For example, if an application detects that a database connection has already
 been opened by another application in the Prudence instance, and stored
 in application.sharedGlobals, then it could use that connection rather than
 create a new one.
 This would only work, of course, if a few applications share the same database,
 which is common in many deployments.
\end_layout

\begin_layout Enumerate
To send messages between applications.
 This would be necessary if operations in one application could affect another.
 For example, you could place a task queue in application.sharedGlobals,
 where applications could queue required operations.
 A thread in another application would consume these and act accordingly.
 Of course, you will have to plan for asynchronous behavior, and especially
 allow for failure.
 What happens if the consumer application is down? It may make more sense
 in these cases to use a persistent storage, such as a database, for the
 queue.
\end_layout

\begin_layout Standard
Generally, if you find yourself having to rely on application.sharedGlobals,
 ask yourself if your code would be better off encapsulated as a single
 application.
 Remember that Prudence has powerful URL routing, support for virtual hosting,
 etc., letting you easily have one application work in several sites simultaneous
ly.
\end_layout

\begin_layout Quote
Note for Clojure flavor: All Clojure vars are VM-wide globals equivalent
 in scope to executable.globals.
 You usually work with namespaces that Prudence creates on the fly, so they
 do not persist beyond the execution.
 However, if you explicitly define a name space, then you can use it as
 a place for shared state.
 It will then be up to you to make sure that your namespace doesn't collide
 with that of another application installed in the Prudence instance.
 Though this approach might seem to break our rule of thumb here, of preferring
 application.globals to application.sharedGlobals, it is more idiomatic to
 Clojure and Lisps more generally.
\end_layout

\begin_layout Subsubsection
application.sharedGlobals vs.
 executable.globals
\end_layout

\begin_layout Standard

\bar under
executable.globals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|executable-globals"

\end_inset

)
\bar default
 are in practice identical to 
\bar under
application.sharedGlobals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|application-shared-globals"

\end_inset

)
\bar default
.
 The latter is simply reserved for Prudence applications.
 If you are running non-Prudence 
\begin_inset CommandInset href
LatexCommand href
name "Scripturian"
target "http://threecrickets.com/scripturian/"

\end_inset

 code on the same VM, and need to share state with Prudence, then executable.glob
als are available for you.
\end_layout

\begin_layout Subsubsection
Concurrency
\begin_inset CommandInset label
LatexCommand label
name "../api/|concurrency"

\end_inset


\end_layout

\begin_layout Standard
Though 
\bar under
application.globals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|application-globals"

\end_inset

)
\bar default
, 
\bar under
application.sharedGlobals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|application-shared-globals"

\end_inset

)
\bar default
, 
\bar under
application.distributedGlobals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|application-distributed-globals"

\end_inset

)
\bar default
 and 
\bar under
executable.globals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|executable-globals"

\end_inset

)
\bar default
 are all thread safe, it's important to understand how to use them properly.
\end_layout

\begin_layout Quote
Note for Clojure flavor: Though Clojure goes a long way towards simplifying
 concurrent programming, it does not solve the problem of concurrent access
 to global state.
 You still need to read this section!
\end_layout

\begin_layout Standard
For example, this code (Python flavor) is broken:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

def get_connection()
\end_layout

\begin_layout Plain Layout

	data_source = application.globals['myapp.data.source']
\end_layout

\begin_layout Plain Layout

	if data_source is None:
\end_layout

\begin_layout Plain Layout

		data_source = data_source_factory.create()
\end_layout

\begin_layout Plain Layout

		application.globals['myapp.data.source'] = data_source
\end_layout

\begin_layout Plain Layout

	return data_source.get_connection()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The problem is that in the short interval between comparing the value in
 the “if” statement and setting the global value in the “then” statement,
 another thread may have already set the value.
 Thus, the “data_source” instance you are referring to in the current thread
 would be different from the “myapp.data.source” global used by other threads.
 The value is not truly shared! In some cases, this would only result in
 a few extra, unnecessary resources being created.
 But in some cases, when you rely on the uniqueness of the global, this
 can lead to subtle bugs.
\end_layout

\begin_layout Quote
This may seem like a very rare occurrence to you: another thread would have
 to set the value 
\emph on
exactly
\emph default
 between our comparison and our set.
 If your application has many concurrent users, and your machine has many
 CPU cores, it can actually happen quite frequently.
 And, even if rare, your application has a chance of breaking if 
\emph on
just two users use it at the same time
\emph default
.
 This is not a problem you can gloss over, even for simple applications.
\end_layout

\begin_layout Standard
Use this code instead:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

def get_connection()
\end_layout

\begin_layout Plain Layout

	data_source = application.globals['myapp.data.source']
\end_layout

\begin_layout Plain Layout

	if data_source is None:
\end_layout

\begin_layout Plain Layout

		data_source = data_source_factory.create()
\end_layout

\begin_layout Plain Layout

		data_source = application.getGlobal('myapp.data.source', data_source)
\end_layout

\begin_layout Plain Layout

	return data_source.get_connection()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The getGlobal call is an atomic compare-and-set operation.
 It guarantees that the returned value is the unique one.
\end_layout

\begin_layout Paragraph
Optimizing for Performance
\end_layout

\begin_layout Standard
You may have noticed, in the code above, that if another thread had already
 set the global value, then our created data source would be discarded.
 If data source creation is heavy and slow, then this could affect our performan
ce.
 The only way to guarantee that this would not happen would be to make the
 entire operation atomic, by synchronizing it with a lock:
\end_layout

\begin_layout Standard
Here's an example:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

def get_connection()
\end_layout

\begin_layout Plain Layout

	lock = application.getGlobal('myapp.data.source.lock', RLock())
\end_layout

\begin_layout Plain Layout

	lock.acquire()
\end_layout

\begin_layout Plain Layout

	try:
\end_layout

\begin_layout Plain Layout

		data_source = application.globals['myapp.data.source']
\end_layout

\begin_layout Plain Layout

		if data_source is None:
\end_layout

\begin_layout Plain Layout

			data_source = data_source_factory.create()
\end_layout

\begin_layout Plain Layout

			application.globals['myapp.data.source'] = data_source
\end_layout

\begin_layout Plain Layout

		return data_source.get_connection()
\end_layout

\begin_layout Plain Layout

	finally:
\end_layout

\begin_layout Plain Layout

		lock.release()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that we have to store our RLock as a unique global, too.
\end_layout

\begin_layout Standard
Not only is the code above complicated, but synchronization has its own
 performance penalties, which 
\emph on
might
\emph default
 make this apparent optimization actually perform worse.
 It's definitely not a good idea to blindly apply this technique: attempt
 it only if you are experiencing a problem with resource use or performance,
 and then make sure that you're not making things worse with synchronization.
\end_layout

\begin_layout Standard
Here's a final version of our get_connection function that lets you control
 whether to lock access.
 This can help you more easily compare which technique works better for
 your application:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

def get_connection(lock_access=False)
\end_layout

\begin_layout Plain Layout

	if lock_access:
\end_layout

\begin_layout Plain Layout

		lock = application.getGlobal('myapp.data.source.lock', RLock())
\end_layout

\begin_layout Plain Layout

		lock.acquire()
\end_layout

\begin_layout Plain Layout

	try:
\end_layout

\begin_layout Plain Layout

		data_source = application.globals['myapp.data.source']
\end_layout

\begin_layout Plain Layout

		if data_source is None:
\end_layout

\begin_layout Plain Layout

			data_source = data_source_factory.create()
\end_layout

\begin_layout Plain Layout

			if lock_access:
\end_layout

\begin_layout Plain Layout

				application.globals['myapp.data.source'] = data_source
\end_layout

\begin_layout Plain Layout

			else:
\end_layout

\begin_layout Plain Layout

				data_source = application.getGlobal('myapp.data.source', data_source)
\end_layout

\begin_layout Plain Layout

		return data_source.get_connection()
\end_layout

\begin_layout Plain Layout

	finally:
\end_layout

\begin_layout Plain Layout

		if lock_access:
\end_layout

\begin_layout Plain Layout

			lock.release()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Complicated, isn't it? Unfortunately, complicated code and fine-tuning is
 the price you must pay in order to support concurrent access, which is
 the key to Prudence's scalability.
\end_layout

\begin_layout Standard
But, don't be discouraged.
 The standard protocol for using Prudence's globals will likely be good
 enough for the vast majority of your state-sharing needs.
\end_layout

\begin_layout Subsection
APIs
\end_layout

\begin_layout Standard
Prudence provides you with an especially rich set of APIs.
\end_layout

\begin_layout Standard
The core APIs required for using Prudence are multilingual, in that they
 are implemented via standard JVM classes that can be called from all supported
 programming languages: JavaScript, Python, Ruby, PHP, Groovy and Clojure.
 Indeed, the entire JVM standard APIs can be access in this manner, in addition
 to any JVM library installed in your container (under 
\begin_inset Quotes eld
\end_inset

/libraries/jars/
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Standard
Most of these languages additionally have a rich standard API of their own
 which you can use, as well as an ecology of libraries.
 JavaScript, however, stands out for having a very meager standard API.
 To fill in this gap, Sincerity comes with a useful set of JavaScript Libraries,
 which you are free to use.
 Some of these are written pure JavaScript, offering new and useful functionalit
y, while others provide JavaScript-friendly wrappers over standard JVM libraries.
\end_layout

\begin_layout Standard
Furthermore, Prudence comes with JavaScript-friendly wrappers over the core
 Prudence APIs.
 Future versions of Prudence may provide similar friendly wrappers for the
 other supported languages (please contribute!).
 Until then, there's nothing that these wrappers can do that you can't do
 with the core APIs.
\end_layout

\begin_layout Subsubsection
Using the Documentation
\end_layout

\begin_layout Quote
The Prudence team has spent a great amount of time on meticulously documenting
 the APIs.
 Please send us a 
\begin_inset CommandInset href
LatexCommand href
name "bug report"
target "http://code.google.com/p/prudence/issues/list"

\end_inset

 if you find a mistake, or think that the documentation can use some clarificati
on!
\end_layout

\begin_layout Standard
For the sake of coherence all these APIs are 
\begin_inset CommandInset href
LatexCommand href
name "documented together online"
target "http://threecrickets.com/api/javascript/"

\end_inset

 in their JavaScript format.
 This includes both the multilingual as well as the JavaScript-specific
 APIs.
 For the multilingual APIs, just make sure to call the APIs using the appropriat
e syntax for the programming language you are using.
 For example, here is the same API call in all supported languages:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

JavaScript: conversation.redirectSeeOther('http://newsite.org/')
\end_layout

\begin_layout Plain Layout

Python:     conversation.redirectSeeOther('http://newsite.org/')
\end_layout

\begin_layout Plain Layout

Ruby:       $conversation.redirect_see_other 'http://newsite.org/'
\end_layout

\begin_layout Plain Layout

PHP:        $conversation->redirectSeeOther('http://newsite.org/');
\end_layout

\begin_layout Plain Layout

Groovy:     conversation.redirectSeeOther('http://newsite.org/')
\end_layout

\begin_layout Plain Layout

Clojure:    (..
 conversation redirectSeeOther "http://newsite.org/")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The APIs are not fully documented here, but rather summarized to give you
 a global view of what's available, with links to the full documentation
 available online.
 The documentation also lets you view the complete JavaScript source code.
\end_layout

\begin_layout Standard
You may be further interested in Prudence's low-level API, which is also
 
\begin_inset CommandInset href
LatexCommand href
name "fully documented online"
target "http://threecrickets.com/api/java/prudence/"

\end_inset

.
 As a final resort, sometimes the best documentation is the 
\begin_inset CommandInset href
LatexCommand href
name "source code itself"
target "http://code.google.com/p/prudence/source/browse/"

\end_inset

.
\end_layout

\begin_layout Standard
A few more language-specific notes:
\end_layout

\begin_layout Paragraph
JavaScript
\end_layout

\begin_layout Standard
Prudence's current JavaScript engine, Rhino, does not provide dictionary
 access to maps, so you must use get- and put- notation to access map attributes.
 For example, use application.globals.get('myapp.data.name') rather than application.
globals['myapp.data.name'].
\end_layout

\begin_layout Paragraph
Python
\end_layout

\begin_layout Standard
If you're using the Jepp engine, rather than the default Jython engine,
 you will need to use get- and set- notation to access attributes.
 For example, use application.getArguments() to access application.arguments
 in Jepp.
\end_layout

\begin_layout Paragraph
Ruby
\end_layout

\begin_layout Standard
Prudence's Ruby engine, JRuby, conveniently lets you use the Ruby naming
 style for API calls.
 For example, you can use $application.get_global instead of $application.getGloba
l.
\end_layout

\begin_layout Paragraph
Clojure
\end_layout

\begin_layout Standard
You will need to use get- and set- notation to access attributes.
 For example, use 
\begin_inset Quotes eld
\end_inset

(.getArguments application)
\begin_inset Quotes erd
\end_inset

 to access application.arguments.
 You can also use Clojure's bean form, for example 
\begin_inset Quotes eld
\end_inset

(bean application)
\begin_inset Quotes erd
\end_inset

, to create a read-only representation of Prudence services.
\end_layout

\begin_layout Subsubsection
Prudence APIs
\end_layout

\begin_layout Standard
These core APIs are implemented by the JVM and can be used by any support
 programming language.
 The APIs consist of three namespaces that are defined as global variables.
\end_layout

\begin_layout Paragraph
\begin_inset CommandInset href
LatexCommand href
name "application"
target "http://threecrickets.com/api/javascript/?namespace=application"

\end_inset


\end_layout

\begin_layout Paragraph
\begin_inset CommandInset href
LatexCommand href
name "document"
target "http://threecrickets.com/api/javascript/?namespace=document"

\end_inset


\end_layout

\begin_layout Paragraph
\begin_inset CommandInset href
LatexCommand href
name "conversation"
target "http://threecrickets.com/api/javascript/?namespace=conversation"

\end_inset


\end_layout

\begin_layout Subsubsection
Scripturian API
\end_layout

\begin_layout Paragraph
\begin_inset CommandInset href
LatexCommand href
name "executable"
target "http://threecrickets.com/api/javascript/?namespace=executable"

\end_inset


\end_layout

\begin_layout Subsubsection
JavaScript Libraries
\end_layout

\begin_layout Standard
The APIs are only available for JavaScript running within Scripturian.
\end_layout

\begin_layout Paragraph
Sincerity JavaScript Library
\end_layout

\begin_layout Itemize
/sincerity/calendar/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Calendar"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Calendar"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/classes/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Classes"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Classes"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/cryptography/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Cryptography"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Cryptography"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/files/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Files"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Files"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/iterators/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Iterators"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Iterators"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/json/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.JSON"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.JSON"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/jvm/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.JVM"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.JVM"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/localization/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Localization"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Localization"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/lucene/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Lucene"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Lucene"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/mail/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Mail"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Mail"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/objects/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Objects"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Objects"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/rhino/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Rhino"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Rhino"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/templates/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Templates"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Templates"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/xml/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.XML"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.XML"

\end_inset


\end_layout

\begin_layout Paragraph
Prudence JavaScript Library
\end_layout

\begin_layout Itemize
/prudence/blocks/: 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Blocks"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Blocks"

\end_inset


\end_layout

\begin_layout Itemize
/prudence/lazy/: 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Lazy"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Lazy"

\end_inset


\end_layout

\begin_layout Itemize
/prudence/logging/: 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Logging"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Logging"

\end_inset


\end_layout

\begin_layout Itemize
/prudence/resources/: 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Resources"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Resources"

\end_inset


\end_layout

\begin_layout Itemize
/prudence/tasks/: 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Tasks"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Tasks"

\end_inset


\end_layout

\begin_layout Paragraph
Libraries for Bootstrap and Configuration
\end_layout

\begin_layout Itemize
/sincerity/annotations/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Annotations"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Annotations"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/container/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Container"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Containter"

\end_inset


\end_layout

\begin_layout Itemize
/prudence/routing/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Routing"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Routing"

\end_inset


\end_layout

\begin_layout Itemize
/prudence/lazy/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Lazy"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Lazy"

\end_inset


\end_layout

\begin_layout Paragraph
Diligence
\end_layout

\begin_layout Section
Working in a Cluster
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Subsection
Shared Globals
\end_layout

\begin_layout Subsection
Task Farming
\end_layout

\begin_layout Section
Accepting Uploads
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Section
Cookies
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Section
Filtering
\begin_inset CommandInset label
LatexCommand label
name "filtering"

\end_inset


\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Subsection
How Routing Works
\end_layout

\begin_layout Subsection
Injection
\end_layout

\begin_layout Subsection
Built-in Filters
\end_layout

\begin_layout Section
Configuring Applications
\end_layout

\begin_layout Subsection
settings.js
\end_layout

\begin_layout Subsubsection
app.settings
\end_layout

\begin_layout Subsubsection
app.settings.description
\end_layout

\begin_layout Subsubsection
app.settings.errors
\end_layout

\begin_layout Subsubsection
app.settings.code
\end_layout

\begin_layout Subsubsection
app.settings.uploads
\end_layout

\begin_layout Subsubsection
app.settings.mediaTypes
\end_layout

\begin_layout Subsubsection
app.globals
\end_layout

\begin_layout Subsection
routing.js
\end_layout

\begin_layout Subsubsection
app.hosts
\end_layout

\begin_layout Subsubsection
app.routes
\end_layout

\begin_layout Subsubsection
app.errors
\end_layout

\begin_layout Subsubsection
app.dispatchers
\end_layout

\begin_layout Subsection
Scheduling Tasks (Cron)
\end_layout

\begin_layout Subsection
Default Directories
\end_layout

\begin_layout Standard
/resources/
\end_layout

\begin_layout Standard
/libraries/
\end_layout

\begin_layout Standard
/libraries/
\end_layout

\begin_layout Standard
/uploads/
\end_layout

\begin_layout Section
Configuring the Component
\end_layout

\begin_layout Standard
Order: applications, services, starts component, then runs initialization
 tasks
\end_layout

\begin_layout Subsection
/component/servers/
\end_layout

\begin_layout Subsection
/component/clients/
\end_layout

\begin_layout Subsection
/component/hosts/
\end_layout

\begin_layout Standard
See virtual hosts in managing URI space.
\end_layout

\begin_layout Subsection
/component/services/
\end_layout

\begin_layout Standard
Run 
\emph on
after
\emph default
 the component is configured but 
\emph on
before
\emph default
 it is started.
\end_layout

\begin_layout Subsubsection
caching
\end_layout

\begin_layout Standard
Configure the caching backend
\end_layout

\begin_layout Subsubsection
distributed
\end_layout

\begin_layout Standard
Load the Hazelcast configuration
\end_layout

\begin_layout Subsubsection
executor
\end_layout

\begin_layout Standard
Configures thread pools for task execution.
\end_layout

\begin_layout Subsubsection
log
\end_layout

\begin_layout Standard
Configures the component's log service, which is used for logging client
 requests.
 (By default web.log)
\end_layout

\begin_layout Subsubsection
singleton
\end_layout

\begin_layout Standard
Prudence assumes a single Restlet Component instance.
 If for some reason you have a more complex setup, you can configure Prudence's
 initialization here.
\end_layout

\begin_layout Subsubsection
scheduler
\end_layout

\begin_layout Standard
Configure the cron scheduler (cron4j)
\end_layout

\begin_layout Subsubsection
status
\end_layout

\begin_layout Standard
Configures Restlet's status service to use Prudence's implementation.
\end_layout

\begin_layout Subsubsection
version
\end_layout

\begin_layout Standard
Provides access to Prudence and Restlet versions.
\end_layout

\begin_layout Subsection
/component/templates/
\end_layout

\begin_layout Section
Debugging
\end_layout

\begin_layout Subsection
Logging
\end_layout

\begin_layout Subsubsection
application.logger
\end_layout

\begin_layout Subsubsection
application.getSubLogger
\end_layout

\begin_layout Subsubsection
Configuring Logging
\end_layout

\begin_layout Standard
/configuration/logging/
\end_layout

\begin_layout Standard
See Sincerity Manual
\end_layout

\begin_layout Subsection
Debug Page
\end_layout

\begin_layout Section
Deployment
\end_layout

\begin_layout Subsection
The Joys of Sincerity
\end_layout

\begin_layout Subsubsection
Configuration-by-Script
\end_layout

\begin_layout Subsubsection
Plugins
\end_layout

\begin_layout Subsection
Deployment Strategies
\end_layout

\begin_layout Subsubsection
Synchronization
\end_layout

\begin_layout Standard
Unison, rsync
\end_layout

\begin_layout Subsubsection
Packaging
\end_layout

\begin_layout Paragraph
Maven
\end_layout

\begin_layout Standard
Using your own repository (Nexus)
\end_layout

\begin_layout Paragraph
Debian/RPM
\end_layout

\begin_layout Subsubsection
Version Control
\end_layout

\begin_layout Paragraph
Subversion
\end_layout

\begin_layout Paragraph
Git
\end_layout

\begin_layout Standard
What to ignore
\end_layout

\begin_layout Subsection
Directory Organization
\end_layout

\begin_layout Subsubsection
Sincerity Standalone
\end_layout

\begin_layout Subsection
Operating System Service
\end_layout

\begin_layout Standard
See Sincerity Manual
\end_layout

\begin_layout Subsection
Monitoring
\end_layout

\begin_layout Subsection
Security
\end_layout

\begin_layout Subsubsection
SSL
\end_layout

\begin_layout Standard
Howto
\end_layout

\begin_layout Subsubsection
HTTP Authentication
\end_layout

\begin_layout Subsubsection
Locked-Down User
\end_layout

\begin_layout Standard
Service Plugin
\end_layout

\begin_layout Subsubsection
Firewall
\end_layout

\begin_layout Standard
HTTP ports
\end_layout

\begin_layout Standard
Hazelcast ports
\end_layout

\begin_layout Standard
Cache backends
\end_layout

\begin_layout Standard
Database and other services
\end_layout

\begin_layout Subsection
Proxying
\end_layout

\begin_layout Subsubsection
Nginx
\end_layout

\begin_layout Subsubsection
Apache
\end_layout

\begin_layout Subsection
Deploying Clusters
\end_layout

\begin_layout Subsubsection
Loadbalancing
\end_layout

\begin_layout Standard
Perlbal
\end_layout

\begin_layout Subsubsection
Security Concerns
\end_layout

\begin_layout Subsubsection
Configuring Hazelcast
\end_layout

\begin_layout Standard
/configuration/hazelcast/prudence/
\end_layout

\begin_layout Standard
or
\end_layout

\begin_layout Standard
/configuration/hazelcast.alt.conf
\end_layout

\begin_layout Subsection
Cache Backends
\end_layout

\begin_layout Section
Utilities for Restlet
\end_layout

\begin_layout Standard
If you are a Restlet Java programmer, Prudence may still be of use to use.
 Prudence is also available as a small standalone Java library (a jar),
 and as such has several well-documented classes useful for any Java-written
 Restlet application.
 They're all in the 
\begin_inset Quotes eld
\end_inset

com.threecrickets.prudence.util
\begin_inset Quotes erd
\end_inset

 package, and introduced below.
\end_layout

\begin_layout Subsection
Utility Restlets
\end_layout

\begin_layout Standard
We wish these general-purpose utilities existed in the standard Restlet
 library!
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "CacheControlFilter"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/CacheControlFilter.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Filter"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Filter.html"

\end_inset

 that adds cache control directives to responses.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Injector"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/Injector.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Filter"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Filter.html"

\end_inset

 that adds values to the request attributes before moving to the next restlet.
 It allows for a straightforward implementation of IoC (Inversion of Control).
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "StatusRestlet"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/StatusRestlet.html"

\end_inset

: A restlet that always sets a specific status and does nothing else.
\end_layout

\begin_layout Subsection
Client Data
\end_layout

\begin_layout Standard
These classes add no new functionality, but make working with some client
 data a bit easier.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "CompressedStringRepresentation"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/CompressedStringRepresentation.html"

\end_inset

: This is a 
\begin_inset CommandInset href
LatexCommand href
name "ByteArrayRepresentation"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/representation/ByteArrayRepresentation.html"

\end_inset

 that can be constructed using text and an encoding, which it then compresses
 into bytes according the encoding.
 This is an alternative to using an 
\begin_inset CommandInset href
LatexCommand href
name "Encoder"
target "http://restlet.org/learn/javadocs/2.1/jse/engine/index.html?org/restlet/engine/application/Encoder.html"

\end_inset

 filter, allowing you direct control over and access to the final representation.
 
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "ConversationCookie"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/ConversationCookie.html"

\end_inset

: A modifiable extension of a regular 
\begin_inset CommandInset href
LatexCommand href
name "Cookie"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/data/Cookie.html"

\end_inset

.
 Tracks modifications, and upon calling save() stores them as a 
\begin_inset CommandInset href
LatexCommand href
name "CookieSetting"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/data/CookieSetting.html"

\end_inset

, likely in the 
\begin_inset CommandInset href
LatexCommand href
name "Response"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/Response.html"

\end_inset

.
 Also supports cookie deletion via remove().
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "FormWithFiles"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/FormWithFiles.html"

\end_inset

: A form that can parse 
\begin_inset CommandInset href
LatexCommand href
name "MediaType.MULTIPART_FORM_DATA"
target "http://restlet.org/learn/javadocs/2.1/jse/api/org/restlet/data/MediaType.html#MULTIPART_FORM_DATA"

\end_inset

 entities by accepting file uploads.
 Files will appear as parameters of type 
\begin_inset CommandInset href
LatexCommand href
name "FileParameter"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/FileParameter.html"

\end_inset

.
\end_layout

\begin_layout Subsection
Redirection
\end_layout

\begin_layout Standard
Restlet's server-side redirection works by creating a new request.
 Unfortunately, this means that some information from the original request
 is lost.
 Prudence includes a set of classes that work together to preserve the original
 URI, which we here call the 
\begin_inset Quotes eld
\end_inset

captured
\begin_inset Quotes erd
\end_inset

 URI.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "CapturingRedirector"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/CapturingRedirector.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Redirector"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Redirector.html"

\end_inset

 that keeps track of the captured reference.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "NormalizingRedirector"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/NormalizingRedirector.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Redirector"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Redirector.html"

\end_inset

 that normalizes relative paths.
 This may be unnecessary in future versions of Restlet.
 See 
\begin_inset CommandInset href
LatexCommand href
name "Restlet issue 238"
target "https://github.com/restlet/restlet-framework-java/issues/238"

\end_inset

.
\end_layout

\begin_layout Subsection
Fallback Routing
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

Fallback
\begin_inset Quotes erd
\end_inset

 is a powerful new routing paradigm introduced in Prudence that lets you
 attach multiple restlets to a single route.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Fallback"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/Fallback.html"

\end_inset

: A restlet that delegates 
\begin_inset CommandInset href
LatexCommand href
name "Restlet.handle(Request, Response)"
target "http://restlet.org/learn/javadocs/2.1/jse/api/org/restlet/Restlet.html#handle(org.restlet.Request,%20org.restlet.Response)"

\end_inset

 to a series of targets in sequence, stopping at the first target that satisfies
 the condition of wasHandled.
 This is very useful for allowing multiple restlets a chance to handle a
 request, while 
\begin_inset Quotes eld
\end_inset

falling back
\begin_inset Quotes erd
\end_inset

 to subsequent restlets when those 
\begin_inset Quotes eld
\end_inset

fail.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "FallbackRouter"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/FallbackRouter.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Router"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Router.html"

\end_inset

 that takes care to bunch identical routes under Fallback restlets.
\end_layout

\begin_layout Subsection
Resolver Selection
\end_layout

\begin_layout Standard
Restlet does not provide an easy way to use different 
\begin_inset CommandInset href
LatexCommand href
name "template variable resolver"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/util/Resolver.html"

\end_inset

 instances.
 We've created new implementations of a few of the core classes that let
 you choose which resolver to use.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "ResolvingTemplate"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/ResolvingTemplate.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Template"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Template.html"

\end_inset

 that allows control over which 
\begin_inset CommandInset href
LatexCommand href
name "Resolver"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/util/Resolver.html"

\end_inset

 instances it will use.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "ResolvingRedirector"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/ResolvingRedirector.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Redirector"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Redirector.html"

\end_inset

 that uses ResolvingTemplate.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "ResolvingRouter"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/ResolvingRouter.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Router"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Router.html"

\end_inset

 that uses ResolvingTemplate for all routes.
\end_layout

\begin_layout Subsection
Web Filters
\end_layout

\begin_layout Standard
A set of filter classes for web technologies.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "CssUnifyMinifyFilter"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/CssUnifyMinifyFilter.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Filter"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Filter.html"

\end_inset

 that automatically unifies and/or compresses CSS source files, saving them
 as a single file.
 Unifying them allows clients to retrieve the CSS via one request rather
 than many.
 Compressing them makes their retrieval faster.
 Compression is done via 
\begin_inset CommandInset href
LatexCommand href
name "CSSMin"
target "http://barryvan.github.com/CSSMin/CSSMin"

\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "JavaScriptUnifyMinifyFilter"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/JavaScriptUnifyMinifyFilter.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Filter"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Filter.html"

\end_inset

 that automatically unifies and/or compresses JavaScript source files, saving
 them as a single file.
 Unifying them allows clients to retrieve the JavaScript via one request
 rather than many.
 Compressing them makes their retrieval faster.
 Compression is done via 
\begin_inset CommandInset href
LatexCommand href
name "John Reilly's Java port"
target "http://www.inconspicuous.org/projects/jsmin/jsmin.java"

\end_inset

 of Douglas Crockford's 
\begin_inset CommandInset href
LatexCommand href
name "JSMin"
target "http://www.crockford.com/javascript/jsmin.html"

\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "ZussFilter"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/ZussFilter.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Filter"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Filter.html"

\end_inset

 that automatically parses 
\begin_inset CommandInset href
LatexCommand href
name "ZUSS"
target "https://github.com/tomyeh/ZUSS"

\end_inset

 code and renders CSS.
 Also supports minifying files, if the 
\begin_inset Quotes eld
\end_inset

.min.css
\begin_inset Quotes erd
\end_inset

 extension is used.
\end_layout

\begin_layout Section
Upgrading from Prudence 1.1
\end_layout

\begin_layout Standard
Prudence 1.1 did not use Sincerity: instead, it was a self-contained container
 with everything in the box.
 This meant it could also not be modular, and instead supported several
 distributions (
\begin_inset Quotes eld
\end_inset

flavors
\begin_inset Quotes erd
\end_inset

) per supported programming language.
 Because of this, it allowed you to use any programming language for your
 bootstrapping code, and indeed the project maintained a separate set of
 bootstrapping code for all languages.
\end_layout

\begin_layout Standard
This was not only cumbersome in terms of documentation and maintenance,
 but it also made it hard to port applications between 
\begin_inset Quotes eld
\end_inset

flavors.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
With the move to Sincerity in Prudence 2.0, it was possible to make Prudence
 more minimal as well as more modular, as Sincerity handles the bootstrapping
 and installation of supported languages.
 Though Sincerity can ostensibly run bootstrapping scripts in any Scripturian-su
pported language, it standardizes on JavaScript in order to maintain focus
 and portability.
 The bottom line is that if you used non-JavaScript flavors of Prudence
 1.1, you will need to use JavaScript for your bootstrapping scripts, even
 if your application code (resources, scriptlets, tasks, etc.) is written
 in a different language.
\end_layout

\begin_layout Standard
To be 100% clear: 
\emph on
all 
\begin_inset Quotes eld
\end_inset

flavors
\begin_inset Quotes erd
\end_inset

 supported in Prudence 1.1 are still supported in Prudence 2.0
\emph default
, and your application code will likely not even have to change.
 You 
\emph on
only
\emph default
 need (or rather, are recommended) to use JavaScript for bootstrapping.
\end_layout

\begin_layout Subsection
Upgrading Applications
\end_layout

\begin_layout Standard
There are no significant API changes between Prudence 1.1 and Prudence 2.0.
 However, the bootstrapping and configuration has been completely overhauled.
 You will likely need to take a few minutes to rewrite your settings.js,
 routing.js, etc.
 Here is a step-by-step checklist:
\end_layout

\begin_layout Enumerate
Start with a new application based on the default template.
\end_layout

\begin_deeper
\begin_layout Enumerate
Rename old application (add 
\begin_inset Quotes eld
\end_inset

-old
\begin_inset Quotes erd
\end_inset

), for example: 
\begin_inset Quotes eld
\end_inset

myapp-old
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Enumerate
Use the 
\begin_inset Quotes eld
\end_inset

prudence
\begin_inset Quotes erd
\end_inset

 tool to create a new application for your application name:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity prudence create myapp
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Copy over individual settings from settings.js, using the new Prudence Manual
 to find equivalences.
\end_layout

\begin_layout Enumerate
Copy over individual settings from routing.js, using the new Prudence Manual
 to find equivalences.
 Prudence 2.0 has a far more powerful and clearer routing configuration.
\end_layout

\begin_layout Enumerate
Rename 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

 files to add a 
\begin_inset Quotes eld
\end_inset

.m.
\begin_inset Quotes erd
\end_inset

 pre-extension (they are now called 
\begin_inset Quotes eld
\end_inset

manual resources
\begin_inset Quotes erd
\end_inset

).
 Under Unix-like operation systems, you can rename the all files in the
 tree via a Perl expression using something like this:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

find .
 -name "*.js" -exec rename -v 's/
\backslash
.js$/
\backslash
.m.js/i' {} 
\backslash
;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Rename 
\begin_inset Quotes eld
\end_inset

/web/dynamic/
\begin_inset Quotes erd
\end_inset

 files to add a 
\begin_inset Quotes eld
\end_inset

.s.
\begin_inset Quotes erd
\end_inset

 pre-extension (they are now called 
\begin_inset Quotes eld
\end_inset

scriptlet resources
\begin_inset Quotes erd
\end_inset

).
 Under Unix-like operation systems, you can rename the all files in the
 tree via a Perl expression using something like this:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

find .
 -name "*.html" -exec rename -v 's/
\backslash
.html$/
\backslash
.s.html/i' {} 
\backslash
;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Merge 
\begin_inset Quotes eld
\end_inset

/web/dynamic/
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

/web/static/
\begin_inset Quotes erd
\end_inset

 into 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
Move 
\begin_inset Quotes eld
\end_inset

/web/fragments/
\begin_inset Quotes erd
\end_inset

 to 
\begin_inset Quotes eld
\end_inset

/libraries/scriptlet-resources
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection
Upgrading the Component
\end_layout

\end_body
\end_document
