#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{prettyref}
\newrefformat{}{section~\ref{#1}}
\sloppy
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 0
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
The Prudence Manual
\end_layout

\begin_layout Author
Version @VERSION@
\begin_inset Newline newline
\end_inset

Main text written by Tal Liron
\end_layout

\begin_layout Standard
\noindent
\align center
Copyright 2009-2013 by Three Crickets LLC.
\begin_inset Newline newline
\end_inset

This work is licensed under a
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License"
target "http://creativecommons.org/licenses/by-nc-sa/3.0/"

\end_inset

.
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Tutorial
\begin_inset CommandInset label
LatexCommand label
name "tutorial"

\end_inset


\end_layout

\begin_layout Subsection
Installing Prudence
\end_layout

\begin_layout Standard
Download a distribution
\end_layout

\begin_layout Standard
Starting Prudence
\end_layout

\begin_layout Subsubsection
Further Exploration
\end_layout

\begin_layout Itemize
Start Prudence as a system service
\end_layout

\begin_layout Itemize
Logging
\end_layout

\begin_layout Subsection
At a Glance
\end_layout

\begin_layout Subsubsection
/component/
\end_layout

\begin_layout Standard
A 
\begin_inset Quotes eld
\end_inset

component
\begin_inset Quotes erd
\end_inset

 is the largest logical entity REST.
 It can encapsulate many servers and clients.
\end_layout

\begin_layout Standard
In Prudence, the component is bootstrapped using straightforward JavaScript
 code, starting with default.js.
 The code makes sure to initialize all your applications, servers and clients,
 as well as related services, and bind them to your component.
\end_layout

\begin_layout Subsubsection
/component/applications/
\end_layout

\begin_layout Subsubsection
/component/libraries/scripturian/
\end_layout

\begin_layout Subsubsection
/component/libraries/prudence/
\end_layout

\begin_layout Subsubsection
/component/libraries/web/
\end_layout

\begin_layout Standard
Here you can put static resources that you wish to have shared by all your
 applications.
\end_layout

\begin_layout Standard
It's a good place to put client-side JavaScript frameworks such as Ext JS
 and jQuery.
\end_layout

\begin_layout Subsubsection
/component/libraries/jars/
\end_layout

\begin_layout Standard
This is where JVM libraries are installed.
 This includes all of Prudence's dependencies, and you can add your own,
 too.
\end_layout

\begin_layout Standard
You can use JVM APIs from JavaScript almost identically to how they are
 used in Java.
\end_layout

\begin_layout Subsubsection
/cache/
\end_layout

\begin_layout Subsubsection
Further Exploration
\end_layout

\begin_layout Itemize
Learn about bootstrapping with Sincerity
\end_layout

\begin_layout Itemize
Configure your component
\end_layout

\begin_layout Subsection
Your First Application
\end_layout

\begin_layout Subsubsection
The 
\begin_inset Quotes eld
\end_inset

prudence
\begin_inset Quotes erd
\end_inset

 Command
\end_layout

\begin_layout Subsubsection
/resources/
\end_layout

\begin_layout Subsubsection
/libraries/
\end_layout

\begin_layout Subsubsection
/libraries/
\end_layout

\begin_layout Subsubsection
Further Exploration
\end_layout

\begin_layout Itemize
Configure your application
\end_layout

\begin_layout Itemize
Managing the URI-space
\end_layout

\begin_layout Subsection
Generating HTML
\end_layout

\begin_layout Subsubsection
Further Exploration
\end_layout

\begin_layout Itemize
Textual Resources
\end_layout

\begin_layout Itemize
Adding more languages
\end_layout

\begin_layout Subsection
A Manual Resource
\end_layout

\begin_layout Subsubsection
Further Exploration
\end_layout

\begin_layout Itemize
Manual Resources
\end_layout

\begin_layout Section
The URI-space
\begin_inset CommandInset label
LatexCommand label
name "the-uri-space"

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

URI-space
\begin_inset Quotes erd
\end_inset

 represents the published set of all URIs supported by your server.
 
\begin_inset Quotes eld
\end_inset

Supported
\begin_inset Quotes erd
\end_inset

 here means that unsupported URIs should return a 404 (
\begin_inset Quotes eld
\end_inset

not found
\begin_inset Quotes erd
\end_inset

) error.
 In other words, they are not in the URI-space.
\end_layout

\begin_layout Standard
Importantly, the URI-space can be potentially 
\emph on
infinite
\emph default
, in that you may support URI templates that match any number of actual
 URIs (within the limitations of maximum URI length).
 For example, 
\begin_inset Quotes eld
\end_inset

/service/{id}/
\begin_inset Quotes erd
\end_inset

 could match 
\begin_inset Quotes eld
\end_inset

/service/1/
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

/service/23664/
\begin_inset Quotes erd
\end_inset

, etc., and 
\begin_inset Quotes eld
\end_inset

/film/*
\begin_inset Quotes erd
\end_inset

 can match 
\begin_inset Quotes eld
\end_inset

/film/documentary/mongolia/
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

/film/cinema/
\begin_inset Quotes erd
\end_inset

, etc.
 All URIs that matched these templates belong to your URI-space.
\end_layout

\begin_layout Standard
The URI-space is mostly configured in the application's routing.js file.
 However, your resource implementations can add their own special handling.
 For example, for 
\begin_inset Quotes eld
\end_inset

/service/{id}/
\begin_inset Quotes erd
\end_inset

 URI template we can make sure in code that 
\begin_inset Quotes eld
\end_inset

{id}
\begin_inset Quotes erd
\end_inset

 would always be a decimal integer (returning 404 otherwise), thus effectively
 limiting the extent of the URI-space.
 More generally, Prudence supports 
\begin_inset Quotes eld
\end_inset

wildcard
\begin_inset Quotes erd
\end_inset

 URI templates, allowing you to delegate the parsing of the URI entirely
 to your resource code.
\end_layout

\begin_layout Subsection
routing.js
\end_layout

\begin_layout Standard
Before discussing the routing techniques, let's look at how routing is configure
d.
\end_layout

\begin_layout Standard
By convention, routing is configured in your application's routing.js file
 (which is executed by its default.js file).
 The file should configure at least app.hosts and app.routes, and app.dispatchers
 and app.preheat if you are using those optional features.
\end_layout

\begin_layout Standard
Though routing.js may look a bit like a JSON configuration file, it's important
 to remember that it's really full JavaScript source! You can include any
 JavaScript code to dynamically configure your application's routing during
 the bootstrap process.
\end_layout

\begin_layout Standard
Reproduced below is the routing.js used in the 
\begin_inset Quotes eld
\end_inset

default
\begin_inset Quotes erd
\end_inset

 application template, demonstrating many of the main route type configurations,
 including how to chain and nest types.
 It will be explained in detail in the rest of this chapter.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.hosts = {
\end_layout

\begin_layout Plain Layout

	'default': '/myapp/'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	'/*': [
\end_layout

\begin_layout Plain Layout

		'manual',
\end_layout

\begin_layout Plain Layout

		'scriptlet',
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			type: 'cacheControl',
\end_layout

\begin_layout Plain Layout

			mediaTypes: {
\end_layout

\begin_layout Plain Layout

				'image/png': '1s',
\end_layout

\begin_layout Plain Layout

				'image/jpeg': '1s',
\end_layout

\begin_layout Plain Layout

				'image/gif': '1s'
\end_layout

\begin_layout Plain Layout

			},
\end_layout

\begin_layout Plain Layout

			next: {
\end_layout

\begin_layout Plain Layout

				type: 'zuss',
\end_layout

\begin_layout Plain Layout

				next: 'static'
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	],
\end_layout

\begin_layout Plain Layout

	'/example1/': '@example', // (dispatched)
\end_layout

\begin_layout Plain Layout

	'/example2/': '/example/' // (captured)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

app.dispatchers = {
\end_layout

\begin_layout Plain Layout

	javascript: '/manual-resources/'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
app.routes
\begin_inset CommandInset label
LatexCommand label
name "app-routes"

\end_inset


\end_layout

\begin_layout Standard
Routes are configured in your application's routing.js, in the 
\begin_inset Quotes eld
\end_inset

app.routes
\begin_inset Quotes erd
\end_inset

 dict.
\end_layout

\begin_layout Subsubsection
URI Templates
\begin_inset CommandInset label
LatexCommand label
name "uri-templates"

\end_inset


\end_layout

\begin_layout Standard
The 
\emph on
keys
\emph default
 of this dict are 
\emph on
URI templates
\emph default
 (see 
\begin_inset CommandInset href
LatexCommand href
name "IETF RFC 6570"
target "http://tools.ietf.org/html/rfc6570"

\end_inset

), which look like URIs, but support the following two features:
\end_layout

\begin_layout Itemize

\series bold
Variables
\series default
 are strings wrapped in curly brackets.
 For example, here is a URI template with two variables: 
\begin_inset Quotes eld
\end_inset

/profile/{user}/{service}/
\begin_inset Quotes erd
\end_inset

.
 The variables will match any text until the next 
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset

.
 You can access the string values of these variables in your resource via
 the 
\bar under
conversation.locals API (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "conversation-locals"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Itemize
A 
\series bold
wildcard
\series default
 can be used as the last character in the URI template.
 For example, 
\begin_inset Quotes eld
\end_inset

/archive/*
\begin_inset Quotes erd
\end_inset

 will match 
\emph on
any
\emph default
 URI that begins with 
\begin_inset Quotes eld
\end_inset

/archive/
\begin_inset Quotes erd
\end_inset

.
 You can access the remainder of the URI via the conversation.reference.remainingP
art API [TODO link].
 Note that Prudence will attempt to match 
\emph on
non
\emph default
-wildcard URI templates first, so a wildcard URI template can be used as
 a general fallback for URIs.
\end_layout

\begin_layout Subsubsection
Route Configurations
\begin_inset CommandInset label
LatexCommand label
name "route-configurations"

\end_inset


\end_layout

\begin_layout Standard
The 
\emph on
values
\emph default
 of the app.routes dict are 
\emph on
route
\emph default
 
\emph on
configurations
\emph default
.
 These are usually defined as JavaScript dicts, where the 
\begin_inset Quotes eld
\end_inset

type
\begin_inset Quotes erd
\end_inset

 key is the name of the route type configuration, and the rest of the keys
 configure the type.
 During the application's bootstrap process, these dicts are turned in instances
 of classes in the Prudence.Routing API namespace (note that the class names
 have the first character of the type capitalized).
 The values set in the route type configuration dict are sent to the class
 constructor.
\end_layout

\begin_layout Standard
As a shortcut, you can just use a string value (the 
\begin_inset Quotes eld
\end_inset

type
\begin_inset Quotes erd
\end_inset

 name) instead of a full dict, however when used this way you must accept
 the default configuration.
 There are also special alternate forms for some of the commonly used types,
 such as 
\begin_inset Quotes eld
\end_inset

!
\begin_inset Quotes erd
\end_inset

 for the 
\begin_inset Quotes eld
\end_inset

hidden
\begin_inset Quotes erd
\end_inset

 type and JavaScript arrays for the 
\begin_inset Quotes eld
\end_inset

chain
\begin_inset Quotes erd
\end_inset

 type.
\end_layout

\begin_layout Standard
We will summarize all the route types briefly here, arranged according to
 usage categories, and will refer you to the API documentation for a complete
 reference.
 Note that some route type configurations allow nesting of further route
 type configurations.
\end_layout

\begin_layout Subsubsection
Resource Route Types
\end_layout

\begin_layout Standard
These are routes to a single resource implementation.
\end_layout

\begin_layout Paragraph
dispatch or 
\begin_inset Quotes eld
\end_inset

@
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

dispatch
\begin_inset Quotes erd
\end_inset

 type with an 
\begin_inset Quotes eld
\end_inset

id
\begin_inset Quotes erd
\end_inset

 param, or any string starting with the 
\begin_inset Quotes eld
\end_inset

@
\begin_inset Quotes erd
\end_inset

 character, to configure a dispatch mapping.
 For example, {type: 'dispatch', id: 'person'} is identical to '@person'.
 If you use 
\begin_inset Quotes eld
\end_inset

@
\begin_inset Quotes erd
\end_inset

, you can also optionally use a 
\begin_inset Quotes eld
\end_inset

:
\begin_inset Quotes erd
\end_inset

 to specify the 
\begin_inset Quotes eld
\end_inset

dispatcher
\begin_inset Quotes erd
\end_inset

 param, for example: 
\begin_inset Quotes eld
\end_inset

@profile:person
\begin_inset Quotes erd
\end_inset

 is identical to {type: 'dispatch', dispatcher: 'profile', id: 'person'}.
 If 
\begin_inset Quotes eld
\end_inset

dispatcher
\begin_inset Quotes erd
\end_inset

 is not specified, it defaults to 
\begin_inset Quotes eld
\end_inset

javascript
\begin_inset Quotes erd
\end_inset

.
 The unique ID should match a manual resource handled by your dispatcher,
 otherwise a 404 error (
\begin_inset Quotes eld
\end_inset

not found
\begin_inset Quotes erd
\end_inset

) will result.
 The 
\begin_inset Quotes eld
\end_inset

dispatcher
\begin_inset Quotes erd
\end_inset

 param's value can be any key from the app.dispatchers dict.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Dispatch"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Dispatch"

\end_inset

 class.
 See the 
\bar under
manual resource guide (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "manual-resources"

\end_inset

)
\bar default
 for a complete discussion.
\end_layout

\begin_layout Quote
The 
\bar under

\begin_inset Quotes eld
\end_inset

manual
\begin_inset Quotes erd
\end_inset

 route type (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "manual-route-type"

\end_inset

)
\bar default
 is internally used by Prudence to handle the 
\begin_inset Quotes eld
\end_inset

dispatch
\begin_inset Quotes erd
\end_inset

 route type, via a server-side redirect.
 This introduces two special limitations on its use.
 First, it means that you 
\emph on
must
\emph default
 have a 
\begin_inset Quotes eld
\end_inset

manual
\begin_inset Quotes erd
\end_inset

 if you want to use 
\begin_inset Quotes eld
\end_inset

dispatch.
\begin_inset Quotes erd
\end_inset

 Second, you must make sure the 
\begin_inset Quotes eld
\end_inset

manual
\begin_inset Quotes erd
\end_inset

 always appears 
\emph on
before
\emph default
 any use of 
\begin_inset Quotes eld
\end_inset

dispatch
\begin_inset Quotes erd
\end_inset

 in app.routes.
 For example, if you attach the manual to 
\begin_inset Quotes eld
\end_inset

/*
\begin_inset Quotes erd
\end_inset

 in a chain (as in the default application template), and you also want
 to add a 
\begin_inset Quotes eld
\end_inset

dispatch
\begin_inset Quotes erd
\end_inset

 to that chain, you need to put the 
\begin_inset Quotes eld
\end_inset

manual
\begin_inset Quotes erd
\end_inset

 
\emph on
before
\emph default
 the 
\begin_inset Quotes eld
\end_inset

dispatch
\begin_inset Quotes erd
\end_inset

 in the chain.
 Otherwise, you might cause an endless server-side redirect, leading to
 a stack overflow error.
 Example of correct use:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	'/*': [
\end_layout

\begin_layout Plain Layout

		'manual',
\end_layout

\begin_layout Plain Layout

		'@example', // must appear after the manual
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout

	],
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph

\series bold
hidden or 
\begin_inset Quotes eld
\end_inset

!
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

hidden
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

!
\begin_inset Quotes erd
\end_inset

 string values to hide a URI template.
 Prudence will always return a 404 error (
\begin_inset Quotes eld
\end_inset

not found
\begin_inset Quotes erd
\end_inset

) for this match.
 Note that internal requests always bypass this limitation, and so this
 functionality is useful if you want some URIs available in the internal
 URI-space but not the public one.
 This special value is not actually handled by a class, but rather is configured
 into the current router.
\end_layout

\begin_layout Paragraph
resource or 
\begin_inset Quotes eld
\end_inset

$\SpecialChar \ldots{}

\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

resource
\begin_inset Quotes erd
\end_inset

 type with a 
\begin_inset Quotes eld
\end_inset

class
\begin_inset Quotes erd
\end_inset

 param, or any string starting with the 
\begin_inset Quotes eld
\end_inset

$
\begin_inset Quotes erd
\end_inset

 character, to attach a Restlet 
\begin_inset CommandInset href
LatexCommand href
name "ServerResource"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/resource/ServerResource.html"

\end_inset

.
 For example, {type: 'resource', 'class': 'org.myorg.PersonResource'} is identical
 to '$org.myorg.PersonResource'.
 This is an easy way to combine Java-written Restlet libraries into your
 Prudence applications.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Resource"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Resource"

\end_inset

 class.
\end_layout

\begin_layout Paragraph
execute
\begin_inset CommandInset label
LatexCommand label
name "execute-route-type"

\end_inset


\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

execute
\begin_inset Quotes erd
\end_inset

 type to attach a code execution resource.
 This powerful (and dangerous) resource executes all POST payloads as Scripturia
n text-with-scriptlets documents.
 The standard output of the script will be returned as a response.
 Because it always execution of arbitrary code, you very likely do not want
 this resource publicly exposed.
 If you use it, make sure to protect its URL on publicly available machines!
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Execute"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Execute"

\end_inset

 class.
 The 
\begin_inset Quotes eld
\end_inset

execute
\begin_inset Quotes erd
\end_inset

 resource is very useful for 
\bar under
debugging (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "live-execution"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Subsubsection
Mapping Route Types
\end_layout

\begin_layout Standard
You should use a wildcard URI template for all of these route types, because
 they work by processing the URI remainder.
\end_layout

\begin_layout Paragraph
static
\begin_inset CommandInset label
LatexCommand label
name "static-route-type"

\end_inset


\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

static
\begin_inset Quotes erd
\end_inset

 type to create a static resource handler.
 By default uses the application's 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

 subdirectory chained to the container's 
\begin_inset Quotes eld
\end_inset

/libraries/web/
\begin_inset Quotes erd
\end_inset

 subdirectory for its 
\begin_inset Quotes eld
\end_inset

roots
\begin_inset Quotes erd
\end_inset

.
 Note that if you include it in a 
\begin_inset Quotes eld
\end_inset

chain
\begin_inset Quotes erd
\end_inset

 with 
\begin_inset Quotes eld
\end_inset

manual
\begin_inset Quotes erd
\end_inset

 and/or 
\begin_inset Quotes eld
\end_inset

scriptlet
\begin_inset Quotes erd
\end_inset

, then 
\begin_inset Quotes eld
\end_inset

static
\begin_inset Quotes erd
\end_inset

 should be the last entry in the chain.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Static"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Static"

\end_inset

 class.
 See the 
\bar under
static resources guide (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "static-resources"

\end_inset

)
\bar default
 for a complete discussion.
\end_layout

\begin_layout Paragraph
manual
\begin_inset CommandInset label
LatexCommand label
name "manual-route-type"

\end_inset


\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

manual
\begin_inset Quotes erd
\end_inset

 type to create a static resource handler.
 By default uses the application's 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

 subdirectory for its 
\begin_inset Quotes eld
\end_inset

root
\begin_inset Quotes erd
\end_inset

.
 Important limitation: 
\emph on
All
\emph default
 uses of this class in the same application share the same configuration.
 Only the first found configuration will take hold and will be shared by
 other instances.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Manual"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Manual"

\end_inset

 class.
 See the 
\bar under
manual resources guide (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "manual-resources"

\end_inset

)
\bar default
 for a complete discussion.
\end_layout

\begin_layout Paragraph
scriptlet
\begin_inset CommandInset label
LatexCommand label
name "scriptlet-route-type"

\end_inset


\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

scriptlet
\begin_inset Quotes erd
\end_inset

 type to create a static resource handler.
 By default uses the application's 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

 subdirectory for its 
\begin_inset Quotes eld
\end_inset

root
\begin_inset Quotes erd
\end_inset

.
 Important limitation: 
\emph on
All
\emph default
 uses of this class in the same application share the same configuration.
 Only the first found configuration will take hold and will be shared by
 other instances.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Scriptlet"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Scriptlet"

\end_inset

 class.
 See the 
\bar under
scriptlet resources guide (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "scriptlet-resources"

\end_inset

)
\bar default
 for a complete discussion.
\end_layout

\begin_layout Subsubsection
Redirecting Route Types
\end_layout

\begin_layout Paragraph
capture or 
\begin_inset Quotes eld
\end_inset

/\SpecialChar \ldots{}

\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

capture
\begin_inset Quotes erd
\end_inset

 type with a 
\begin_inset Quotes eld
\end_inset

uri
\begin_inset Quotes erd
\end_inset

 param, or any string starting with the 
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset

 character, to configure a capture.
 For example, {type: 'capture', uri: '/user/profile/'} is identical to '/user/pr
ofile/'.
 Note that adding a 
\begin_inset Quotes eld
\end_inset

!
\begin_inset Quotes erd
\end_inset

 character at the end of the URI (not considered as part of the actual target
 URI) is a shortcut for 
\emph on
also
\emph default
 hiding the target URI.
 Capturing-and-hiding is a common use case.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Capture"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Capture"

\end_inset

 class.
\end_layout

\begin_layout Paragraph
redirect or 
\begin_inset Quotes eld
\end_inset

>\SpecialChar \ldots{}

\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

redirect
\begin_inset Quotes erd
\end_inset

 type with a 
\begin_inset Quotes eld
\end_inset

uri
\begin_inset Quotes erd
\end_inset

 param, or any string starting with the 
\begin_inset Quotes eld
\end_inset

>
\begin_inset Quotes erd
\end_inset

 character, to asks the client to redirect (repeat its request) to a new
 URI.
 For example, {type: 'redirect', uri: 'http://newsite.org/user/profile/'}
 is identical to '>http://newsite.org/user/profile/'.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Redirect"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Redirect"

\end_inset

 class.
\end_layout

\begin_layout Paragraph
addSlash
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

addSlash
\begin_inset Quotes erd
\end_inset

 type for a permanent client redirect from the URI template to the original
 URI with a trailing slash added.
 An easy way to enforce trailing slashes in your application.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.AddSlash"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.AddSlash"

\end_inset

 class.
\end_layout

\begin_layout Subsubsection
Combining Route Types
\end_layout

\begin_layout Paragraph
chain or 
\begin_inset Quotes eld
\end_inset

[\SpecialChar \ldots{}
]
\begin_inset Quotes erd
\end_inset


\begin_inset CommandInset label
LatexCommand label
name "chain-route-type"

\end_inset


\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

chain
\begin_inset Quotes erd
\end_inset

 type with a 
\begin_inset Quotes eld
\end_inset

restlets
\begin_inset Quotes erd
\end_inset

 param (a JavaScript array), or just a JavaScript array, to create a fallback
 chain.
 The values of the array can be any route type configuration, allowing for
 nesting.
 They will be tested in order: the first value that 
\emph on
doesn't
\emph default
 return a 404 (
\begin_inset Quotes eld
\end_inset

not found
\begin_inset Quotes erd
\end_inset

) error will have its value returned.
 This is very commonly used to combine mapping types, for example: ['manual',
 'scriptlet', 'static'].
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Chain"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Chain"

\end_inset

 class.
\end_layout

\begin_layout Paragraph
router
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

router
\begin_inset Quotes erd
\end_inset

 type with a 
\begin_inset Quotes eld
\end_inset

routes
\begin_inset Quotes erd
\end_inset

 param (a JavaScript dict) to create a router.
 The values of the dict can be any route type configuration, allowing for
 nesting.
 This is in fact how Prudence creates the root router (app.routes).
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Router"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Router"

\end_inset

 class.
\end_layout

\begin_layout Subsubsection
Filtering Route Types
\end_layout

\begin_layout Standard
All these route types require a 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 param for nesting into another route type.
\end_layout

\begin_layout Paragraph
filter
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

filter
\begin_inset Quotes erd
\end_inset

 type with the 
\begin_inset Quotes eld
\end_inset

library
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 params to create a filter.
 
\begin_inset Quotes eld
\end_inset

library
\begin_inset Quotes erd
\end_inset

 is the document name (from the application's 
\begin_inset Quotes eld
\end_inset

/libraries/
\begin_inset Quotes erd
\end_inset

 subdirectory), while 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 is any route type configuration, allowing for nesting.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Filter"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Filter"

\end_inset

 class.
 See the 
\bar under
filtering guide (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "filtering"

\end_inset

)
\bar default
 for a complete discussion.
\end_layout

\begin_layout Paragraph
injector
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

injector
\begin_inset Quotes erd
\end_inset

 type with the 
\begin_inset Quotes eld
\end_inset

locals
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 params to create an injector.
 An injector is a simple filter that injects preset valued into conversation.loca
ls, but otherwise has no effect on the conversation.
 This is useful for Inversion of Control (IoC): you can use these conversation.lo
cals to alter the behavior of nested route types directly in your routing.js.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Injector"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Injector"

\end_inset

 class.
\end_layout

\begin_layout Paragraph
httpAuthenticator
\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

httpAuthenticator
\begin_inset Quotes erd
\end_inset

 with the 
\begin_inset Quotes eld
\end_inset

credentials
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

realm
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 params to require HTTP authentication before allow the request to go through.
 This straightforward (but weak and inflexible) security mechanism is useful
 for ensuring that robots, such as search engine crawlers, as well as unauthoriz
ed users do not access a URI.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.HttpAuthenticator"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.HttpAuthenticator"

\end_inset

 class.
\end_layout

\begin_layout Paragraph
cacheControl
\begin_inset CommandInset label
LatexCommand label
name "cache-control-route-type"

\end_inset


\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

cacheControl
\begin_inset Quotes erd
\end_inset

 type with a 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 param to create a cache control filter.
 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 is any route type configuration, allowing for nesting.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.CacheControl"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.CacheControl"

\end_inset

 class.
 See the 
\bar under
static resources guide (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "static-resources-client-side-caching"

\end_inset

)
\bar default
 for a complete discussion.
\end_layout

\begin_layout Paragraph
javaScriptUnifyMinify
\begin_inset CommandInset label
LatexCommand label
name "javascript-unify-minify-route-type"

\end_inset


\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

javaScriptUnifyMinify
\begin_inset Quotes erd
\end_inset

 type with a 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 param to create a JavaScript unify/minify filter.
 
\begin_inset Quotes eld
\end_inset

roots
\begin_inset Quotes erd
\end_inset

 defaults to your application's 
\begin_inset Quotes eld
\end_inset

/resources/scripts/
\begin_inset Quotes erd
\end_inset

 and your container 
\begin_inset Quotes eld
\end_inset

/libraries/web/scripts/
\begin_inset Quotes erd
\end_inset

 subdirectories.
 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 is any route type configuration, allowing for nesting.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.JavaScriptUnifyMinify"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.JavaScriptUnifyMinify"

\end_inset

 class.
 See the 
\bar under
static resources guide (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "static-resources-javascript-and-css-optimization"

\end_inset

)
\bar default
 for a complete discussion.
\end_layout

\begin_layout Paragraph
cssUnifyMinify
\begin_inset CommandInset label
LatexCommand label
name "css-unify-minify-route-type"

\end_inset


\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

cssScriptUnifyMinify
\begin_inset Quotes erd
\end_inset

 type with a 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 param to create a CSS unify/minify filter.
 
\begin_inset Quotes eld
\end_inset

roots
\begin_inset Quotes erd
\end_inset

 defaults to your application's 
\begin_inset Quotes eld
\end_inset

/resources/style/
\begin_inset Quotes erd
\end_inset

 and your container 
\begin_inset Quotes eld
\end_inset

/libraries/web/style/
\begin_inset Quotes erd
\end_inset

 subdirectories.
 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 is any route type configuration, allowing for nesting.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.CssUnifyMinify"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.CssUnifyMinify"

\end_inset

 class.
 See the 
\bar under
static resources guide (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "static-resources-javascript-and-css-optimization"

\end_inset

)
\bar default
 for a complete discussion.
\end_layout

\begin_layout Paragraph
zuss
\begin_inset CommandInset label
LatexCommand label
name "zuss-route-type"

\end_inset


\end_layout

\begin_layout Standard
Use the 
\begin_inset Quotes eld
\end_inset

zuss
\begin_inset Quotes erd
\end_inset

 type with a 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 param to create a 
\begin_inset CommandInset href
LatexCommand href
name "ZUSS"
target "https://github.com/tomyeh/ZUSS"

\end_inset

 compiling filter.
 
\begin_inset Quotes eld
\end_inset

roots
\begin_inset Quotes erd
\end_inset

 defaults to your application's 
\begin_inset Quotes eld
\end_inset

/resources/style/
\begin_inset Quotes erd
\end_inset

 and your container 
\begin_inset Quotes eld
\end_inset

/libraries/web/style/
\begin_inset Quotes erd
\end_inset

 subdirectories.
 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

 is any route type configuration, allowing for nesting.
 Handled by the 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Routing.Zuss"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Routing.Zuss"

\end_inset

 class.
 See the 
\bar under
static resources guide (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "static-resources-zuss-to-css"

\end_inset

)
\bar default
 for a complete discussion.
\end_layout

\begin_layout Subsubsection
Custom Route Types
\end_layout

\begin_layout Standard
With some knowledge of the Restlet library, you can easily create your own
 custom route types for Prudence:
\end_layout

\begin_layout Enumerate
Create a JavaScript class that:
\end_layout

\begin_deeper
\begin_layout Enumerate
Implements a create(app, uri) method.
 The 
\begin_inset Quotes eld
\end_inset

app
\begin_inset Quotes erd
\end_inset

 argument is the instance of Prudence.Routing.Application, and the 
\begin_inset Quotes eld
\end_inset

uri
\begin_inset Quotes erd
\end_inset

 argument is the URI template to which the route type instance should be
 attached.
 The method must return an instance of a 
\begin_inset CommandInset href
LatexCommand href
name "Restlet"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/Restlet.html"

\end_inset

 subclass.
\end_layout

\begin_layout Enumerate
Accepts a single argument, a dict, to the constructor.
 The dict will be populated by the route type configuration dict in app.routes.
\end_layout

\end_deeper
\begin_layout Enumerate
Add the class to Prudence.Routing.
 Remember that the class name begins with an uppercase letter, but will
 begin with a lowercase letter when referenced in app.routes.
\end_layout

\begin_layout Standard
If you like, you can use Sincerity.Classes to create your class, and also
 inherit from Prudence.Routing.Restlet.
\end_layout

\begin_layout Standard
Here's a complete example in which we implement a route type that redirects
 using HTTP status code 303 (
\begin_inset Quotes eld
\end_inset

see other
\begin_inset Quotes erd
\end_inset

).
 (Note this same effect can be achieved using the built-in 
\begin_inset Quotes eld
\end_inset

redirect
\begin_inset Quotes erd
\end_inset

 route type, and is here intended merely as an example.)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Prudence.Routing.See = Sincerity.Classes.define(function() {
\end_layout

\begin_layout Plain Layout

	var Public = {}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Public._inherit = Prudence.Routing.Restlet
\end_layout

\begin_layout Plain Layout

	Public._configure = ['uri']
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Public.create = function(app, uri) {
\end_layout

\begin_layout Plain Layout

			importClass(org.restlet.routing.Redirector)
\end_layout

\begin_layout Plain Layout

			var redirector = new Redirector(app.context, this.uri, Redirector.MODE_CLIENT_SE
E_OTHER)
\end_layout

\begin_layout Plain Layout

			return redirector
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	return Public
\end_layout

\begin_layout Plain Layout

}())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/original-uri/': {type: 'see', uri: 'http://newsite.org/new-uri/'}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Injecting Conversation Attributes
\begin_inset CommandInset label
LatexCommand label
name "injecting-conversation-attributes"

\end_inset


\end_layout

\begin_layout Standard
As we've seen in the app.routes section above, URI template variables delimited
 by curly brackets can be used to match incoming requests and extract the
 values into conversation.locals.
 For example, a 
\begin_inset Quotes eld
\end_inset

/person/{id}/
\begin_inset Quotes erd
\end_inset

 URI template will match the 
\begin_inset Quotes eld
\end_inset

/person/linus/
\begin_inset Quotes erd
\end_inset

 URI and set the 
\begin_inset Quotes eld
\end_inset

id
\begin_inset Quotes erd
\end_inset

 conversation.local to 
\begin_inset Quotes eld
\end_inset

linus
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Template variables can furthermore be used to 
\emph on
inject
\emph default
 values for three use cases:
\end_layout

\begin_layout Itemize
Captured URI targets
\end_layout

\begin_layout Itemize
Redirection URI targets
\end_layout

\begin_layout Itemize

\bar under
Cache keys (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "caching"

\end_inset

)
\end_layout

\begin_layout Standard
In each of these cases you can inject the same conversation.locals that were
 extracted from the matched URI pattern.
 An example of redirection:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	"/person/{id}/": ">http://newsite.org/profile/?id={id}"
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Prudence furthermore supports many built-in variables extracted from the
 conversation attributes.
 They are summarized below.
 Also see the relevant 
\begin_inset CommandInset href
LatexCommand href
name "Restlet API documentation"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/util/Resolver.html"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Request URIs
\end_layout

\begin_layout Standard
The variables are composed of a prefix and a suffix.
 The prefix specifies which URI you are referring to, while the suffix specifies
 the part of that URI.
 For example, the prefix 
\begin_inset Quotes eld
\end_inset

{r-}
\begin_inset Quotes erd
\end_inset

 can be combined with the suffix 
\begin_inset Quotes eld
\end_inset

{-i}
\begin_inset Quotes erd
\end_inset

 for 
\begin_inset Quotes eld
\end_inset

{ri}
\begin_inset Quotes erd
\end_inset

, to specify the complete request URI.
\end_layout

\begin_layout Paragraph
Prefixes
\end_layout

\begin_layout Itemize
{r-}: actual URI (
\bar under
r
\bar default
eference)
\end_layout

\begin_layout Itemize
{h-}: virtual 
\bar under
h
\bar default
ost URI
\end_layout

\begin_layout Itemize
{o-}: the application's r
\bar under
o
\bar default
ot URI on the current virtual host
\end_layout

\begin_layout Itemize
{f-}: the re
\bar under
f
\bar default
erring URI (sent by some clients: usually means that the client clicked
 a hyperlink or was redirected here from elsewhere)
\end_layout

\begin_layout Paragraph
Suffixes
\end_layout

\begin_layout Itemize
{-i}: the complete URI (
\bar under
i
\bar default
dentitifer)
\end_layout

\begin_layout Itemize
{-h}: the 
\bar under
h
\bar default
ost identifier (protocol + authority)
\end_layout

\begin_layout Itemize
{-a}: the 
\bar under
a
\bar default
uthority (for URLs, this is the host or IP address)
\end_layout

\begin_layout Itemize
{-p}: the 
\bar under
p
\bar default
ath (everything after the authority)
\end_layout

\begin_layout Itemize
{-r}: the 
\bar under
r
\bar default
emaining part of the path after the base URI (see below)
\end_layout

\begin_layout Itemize
{-e}: a r
\bar under
e
\bar default
lative path from the URI to the application's base URI (see below; note
 that this is a constructed value, not merely a string extracted from the
 URI)
\end_layout

\begin_layout Itemize
{-q}: the 
\bar under
q
\bar default
uery (everything after the 
\begin_inset Quotes eld
\end_inset

?
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Itemize
{-f}: the 
\bar under
f
\bar default
ragment (the tag after the 
\begin_inset Quotes eld
\end_inset

#
\begin_inset Quotes erd
\end_inset

; note that web browsers handle fragments internally and 
\emph on
never
\emph default
 send them to the server, however fragments may exist in URIs sent 
\emph on
from
\emph default
 the server: see the 
\begin_inset Quotes eld
\end_inset

{R-}
\begin_inset Quotes erd
\end_inset

 variable mentioned below)
\end_layout

\begin_layout Paragraph
Base URIs
\end_layout

\begin_layout Standard
Every URI also has a 
\begin_inset Quotes eld
\end_inset

base
\begin_inset Quotes erd
\end_inset

 version of it: in the case of wildcard patterns, it is the URI before the
 wildcard begins.
 Otherwise it is usually the application's root URI on the virtual host.
 It is used in the 
\begin_inset Quotes eld
\end_inset

{-r}
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

{-e}
\begin_inset Quotes erd
\end_inset

 suffixes above.
\end_layout

\begin_layout Standard
To refer to the base URI directly, use the special 
\begin_inset Quotes eld
\end_inset

{-b-}
\begin_inset Quotes erd
\end_inset

 midfix, to which you would still need to add one of the above suffixes.
 For example, “{rbi}” refers to the complete base URI of the actual URI.
\end_layout

\begin_layout Paragraph
Capturing Wildcards
\end_layout

\begin_layout Standard
This is a common use case for capturing (server-side redirection).
 According to the rules above, 
\begin_inset Quotes eld
\end_inset

*
\begin_inset Quotes erd
\end_inset

 would be the 
\begin_inset Quotes eld
\end_inset

{rr}
\begin_inset Quotes erd
\end_inset

 variable.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/assets/*': '/files/media/{rr}'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The above would capture a URI such as 
\begin_inset Quotes eld
\end_inset

/assets/images/logo.png
\begin_inset Quotes erd
\end_inset

 to 
\begin_inset Quotes eld
\end_inset

/files/media/images/logo.png
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsubsection
Request Attributes
\end_layout

\begin_layout Itemize
{p}: the 
\bar under
p
\bar default
rotocol (“http,” “https,” “ftp,” etc.)
\end_layout

\begin_layout Itemize
{m}: the 
\bar under
m
\bar default
ethod (in HTTP, it would be “GET,” “POST,” “PUT,” “DELETE,” etc.)
\end_layout

\begin_layout Itemize
{d}: 
\bar under
d
\bar default
ate (as a Unix timestamp)
\end_layout

\begin_layout Subsubsection
Client Attributes
\end_layout

\begin_layout Itemize
{cia}: 
\bar under
c
\bar default
l
\bar under
i
\bar default
ent IP 
\bar under
a
\bar default
ddress
\end_layout

\begin_layout Itemize
{ciua}: 
\bar under
c
\bar default
l
\bar under
i
\bar default
ent 
\bar under
u
\bar default
pstream IP 
\bar under
a
\bar default
ddress (if the request reached us through an upstream load balancer)
\end_layout

\begin_layout Itemize
{cig}: 
\bar under
c
\bar default
l
\bar under
i
\bar default
ent a
\bar under
g
\bar default
ent name (for example, and identifier for the browser)
\end_layout

\begin_layout Subsubsection
Entity Attributes
\end_layout

\begin_layout Standard
All these refer to the data (“entity”) sent by the client.
\end_layout

\begin_layout Itemize
{es}: 
\bar under
e
\bar default
ntity 
\bar under
s
\bar default
ize (in bytes)
\end_layout

\begin_layout Itemize
{emt}: 
\bar under
e
\bar default
ntity 
\bar under
m
\bar default
edia (MIME) 
\bar under
t
\bar default
ype
\end_layout

\begin_layout Itemize
{ecs}: 
\bar under
e
\bar default
ntity 
\bar under
c
\bar default
haracter 
\bar under
s
\bar default
et
\end_layout

\begin_layout Itemize
{el}: 
\bar under
e
\bar default
ntity 
\bar under
l
\bar default
anguage
\end_layout

\begin_layout Itemize
{ee}: 
\bar under
e
\bar default
ntity 
\bar under
e
\bar default
ncoding
\end_layout

\begin_layout Itemize
{et}: 
\bar under
e
\bar default
ntity 
\bar under
t
\bar default
ag (HTTP ETag)
\end_layout

\begin_layout Itemize
{eed}: 
\bar under
e
\bar default
ntity 
\bar under
e
\bar default
xpiration 
\bar under
d
\bar default
ate
\end_layout

\begin_layout Itemize
{emd}: 
\bar under
e
\bar default
ntity 
\bar under
m
\bar default
odification 
\bar under
d
\bar default
ate
\end_layout

\begin_layout Subsubsection
Response Attributes
\end_layout

\begin_layout Standard
[these are not supported in capturing or other forms of server-side redirection,
 because redirection happens before a response is actually generated.] [useful
 for cache patterns?]
\end_layout

\begin_layout Standard
These are all in uppercase to differentiate them from the request variables:
\end_layout

\begin_layout Itemize
{S}: the HTTP status code
\end_layout

\begin_layout Itemize
{SIA}: server IP address
\end_layout

\begin_layout Itemize
{SIP}: server port number
\end_layout

\begin_layout Itemize
{SIG}: server agent name
\end_layout

\begin_layout Itemize
{R-}: the redirection URI (see 
\begin_inset Quotes eld
\end_inset

Request URIs
\begin_inset Quotes erd
\end_inset

 above for a list of suffixes, which must also be in uppercase)
\end_layout

\begin_layout Standard
Additionally, all the entity attributes can be used in uppercase to correspond
 to the response entity.
 For example, 
\begin_inset Quotes eld
\end_inset

{ES}
\begin_inset Quotes erd
\end_inset

 for the response entity size, 
\begin_inset Quotes eld
\end_inset

{EMT}
\begin_inset Quotes erd
\end_inset

 for the response media type, etc.
\end_layout

\begin_layout Subsection
Routing Paradigms
\end_layout

\begin_layout Standard
Prudence offers three built-in techniques for you to support a URI or a
 URI template, reflecting two different routing paradigms:
\end_layout

\begin_layout Enumerate

\series bold
Resource mapping
\series default
: The filesystem hierarchy under an application's 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

 subdirectory is directly mapped to URIs (but not URI templates).
 Both directory- and file-names are mapped in order of depth.
 By default, Prudence hides filename extensions from the published URIs,
 but uses these extensions to extracts MIME-type information for the resources.
 Also, mapping adds trailing slashes by default, by redirecting URIs without
 trailing slash to include them (on the client's side).
 Filesystem mapping provides the most 
\begin_inset Quotes eld
\end_inset

transparent
\begin_inset Quotes erd
\end_inset

 management of your URI-space, because you do not need to edit any configuration
 file: to change URIs, you simply move or rename files and directories.
\end_layout

\begin_layout Enumerate

\series bold
URI/resource separation:
\end_layout

\begin_deeper
\begin_layout Enumerate

\series bold
Resource capturing
\series default
: Capturing lets you map URI templates to fixed URIs, as well as perform
 other kinds of internal URI rewrites that are invisible to clients, allowing
 you to provide a published URI-space, which is different from your internal
 mapping structure.
 Note that another common use for capturing is to add support for URI templates
 in resource mapping, as is explained in 
\bar under
resource mapping (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "resource-mapping"

\end_inset

)
\bar default
.
 This use case does not belong to the URI/resource separation paradigm.
\end_layout

\begin_layout Enumerate

\series bold
Resource dispatching
\series default
: In your application's routing.js you can map URIs or URI templates to a
 custom ID, which is then dispatched to your resource handling code.
 Dispatching provides the cleanest and most flexible separation between
 URIs and their implementation.
\end_layout

\end_deeper
\begin_layout Standard
When embarking on a new project, you may want to give some thought as to
 whether you should organize your code around 
\emph on
resource mapping 
\emph default
or
\emph on
 URI/resource separation
\emph default
.
 Generally, URI/resource separation is preferred for larger applications
 because it allows you full control over you code organization.
 However, it does add an extra layer of configuration and is not as transparent
 as resource mapping.
 It may make sense to use both paradigms.
 Read on, and make sure you understand how to use all three routing techniques.
\end_layout

\begin_layout Subsection
Resource Mapping
\begin_inset CommandInset label
LatexCommand label
name "resource-mapping"

\end_inset


\end_layout

\begin_layout Standard
Resource mapping is the most straightforward and most familiar technique
 and paradigm to create your URI-space.
 It relies on a one-to-one mapping between the filesystem (by default files
 under your application's 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

 subdirectory) to the URI space.
 This is how static web servers, as well as the the PHP, ASP and JSP platforms
 work.
\end_layout

\begin_layout Standard
Prudence differs from the familiar paradigm in three ways:
\end_layout

\begin_layout Enumerate
For manual and scriptlet resources, Prudence hides filename extensions from
 the URIs by default.
 Thus, 
\begin_inset Quotes eld
\end_inset

/resources/myresource.m.js
\begin_inset Quotes erd
\end_inset

 would be mapped to 
\begin_inset Quotes eld
\end_inset

/resources/myresource/
\begin_inset Quotes erd
\end_inset

.
 The reasons are two: 1) clients should not have to know about your internal
 implementation of the resource, and 2) it allows for cleaner and more coherent
 URIs.
 Note the filename extensions are used internally by Prudence (differently
 for manual and scriptlet resources).
 Note that this does not apply to static resources: 
\begin_inset Quotes eld
\end_inset

/resources/images/logo.png
\begin_inset Quotes erd
\end_inset

 will be mapped to 
\begin_inset Quotes eld
\end_inset

/images/logo.png
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
For manual and scriptlet resources, Prudence by default 
\emph on
requires 
\emph default
trailing slashes for URIs.
 If clients do not include the trailing slash, they will receive a 404 (
\begin_inset Quotes eld
\end_inset

not found
\begin_inset Quotes erd
\end_inset

) error.
 Again, the reasons are two: 1) it makes relative URIs always unambiguous,
 which is especially relevant in HTML and CSS, and 2) it clarifies the extent
 of URI template variables.
 As a courtesy to sloppy clients, you can manually add a permanent redirection
 to a trailing slash, using the 
\begin_inset Quotes eld
\end_inset

addSlash
\begin_inset Quotes erd
\end_inset

 route type.
 For example:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/main', 'addSlash',
\end_layout

\begin_layout Plain Layout

	'/person/profile/{id}': 'addSlash'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
This mapped URI-space can be manipulated using URI hiding and capturing,
 allowing you to support URI templates and rewrite URIs.
\end_layout

\begin_layout Subsubsection
Capturing URI Templates
\begin_inset CommandInset label
LatexCommand label
name "capturing-uri-templates"

\end_inset


\end_layout

\begin_layout Standard
URI templates can be captured into mapped resources.
 For example, let's say you have a scriptlet resource file at 
\begin_inset Quotes eld
\end_inset

/resources/user/profile.s.html
\begin_inset Quotes erd
\end_inset

, but instead of it being mapped to the URI 
\begin_inset Quotes eld
\end_inset

/user/profile/
\begin_inset Quotes erd
\end_inset

, you want to access it via a URI template: 
\begin_inset Quotes eld
\end_inset

/user/profile/{userId}/
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/user/profile/{userId}/': '/user/profile/'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A URI such as 
\begin_inset Quotes eld
\end_inset

/user/profile/4431/
\begin_inset Quotes erd
\end_inset

 would then be internally redirected to the 
\begin_inset Quotes eld
\end_inset

/user/profile/
\begin_inset Quotes erd
\end_inset

 URI.
 Within your 
\begin_inset Quotes eld
\end_inset

profile.s.html
\begin_inset Quotes erd
\end_inset

 file, you could then access the captured value via the 
\bar under
conversation.locals API (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "conversation-locals"

\end_inset

)
\bar default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<html>
\end_layout

\begin_layout Plain Layout

<body>
\end_layout

\begin_layout Plain Layout

<p>
\end_layout

\begin_layout Plain Layout

User profile for user <%= conversation.locals.get('userId') %>.
\end_layout

\begin_layout Plain Layout

</p>
\end_layout

\begin_layout Plain Layout

</body>
\end_layout

\begin_layout Plain Layout

</html>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We've used a scriptlet resource in this example, but capturing can be used
 for both scriptlet and manual resources.
 The same conversation.locals API is used in both cases.
\end_layout

\begin_layout Paragraph
Capture-and-Hide
\end_layout

\begin_layout Standard
You may also want to make sure that 
\begin_inset Quotes eld
\end_inset

/user/profile/
\begin_inset Quotes erd
\end_inset

 cannot be accessed 
\emph on
without
\emph default
 the user ID.
 To capture and hide together you can use the following shortcut notation:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/user/profile/{userId}/': '/user/profile/!'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
That final 
\begin_inset Quotes eld
\end_inset

!
\begin_inset Quotes erd
\end_inset

 implies hiding.
 You of course can also configure capturing and hiding separately.
 The following is equivalent to the above:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/user/profile/{userId}/': '/user/profile/',
\end_layout

\begin_layout Plain Layout

	'/user/profile/': '!'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Dynamic Capturing
\end_layout

\begin_layout Standard
URI capturing can actually do more than just capture to a 
\emph on
single
\emph default
 URI: the target URI for a capture is, in fact, 
\emph on
also
\emph default
 a URI template, and can include any of the conversation attributes discussed
 in 
\bar under

\begin_inset Quotes eld
\end_inset

Injecting Conversation Attributes
\begin_inset Quotes erd
\end_inset

 (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "injecting-conversation-attributes"

\end_inset

)
\bar default
.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/user/{userId}/preferences/': '/database/preferences/{m}/?id={userId}'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

{m}
\begin_inset Quotes erd
\end_inset

 variable is injected with the request method name, for example 
\begin_inset Quotes eld
\end_inset

GET
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

POST
\begin_inset Quotes erd
\end_inset

.
 It would thus capture to different target URIs depending on the request.
 So, you could have 
\begin_inset Quotes eld
\end_inset

/database/preferences/GET.html
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

/database/preferences/POST.html
\begin_inset Quotes erd
\end_inset

 files in your 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

 subdirectory to handle different request methods.
\end_layout

\begin_layout Paragraph
Dynamic Capture-and-Hide
\end_layout

\begin_layout Standard
Note that if you use the 
\begin_inset Quotes eld
\end_inset

!
\begin_inset Quotes erd
\end_inset

 capture-and-hide trick with dynamic capturing, Prudence will hide 
\emph on
any
\emph default
 URI that matches the template.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/user/{userId}/preferences/': '/database/preferences/{m}/!'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here, 
\begin_inset Quotes eld
\end_inset

/database/preferences/GET/
\begin_inset Quotes erd
\end_inset

 is hidden, but also 
\begin_inset Quotes eld
\end_inset

/database/preferences/anything/
\begin_inset Quotes erd
\end_inset

, etc.
 If you do not want this behavior, then you should explicitly hide specific
 URIs instead:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/user/{userId}/preferences/': '/database/preferences/{m}/',
\end_layout

\begin_layout Plain Layout

	'/database/preferences/GET/': '!',
\end_layout

\begin_layout Plain Layout

	'/database/preferences/POST/': '!'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Limitations of Resource Mapping
\end_layout

\begin_layout Standard
While resource mapping is very straightforward---one file per resource (or
 per type of resource if you capture URI templates)---it may be problematic
 in three ways:
\end_layout

\begin_layout Enumerate
In large URI-spaces you may suffer from having too many files.
 Though you can use 
\begin_inset Quotes eld
\end_inset

/libraries/
\begin_inset Quotes erd
\end_inset

 to share code between your resources, mapping still requires a file per
 resource type.
\end_layout

\begin_layout Enumerate
Mapped manual resources must have all their entry points (handleInit, handleGet,
 etc.) defined as global functions.
 This makes it awkward to use object oriented programming or other kinds
 of code reuse.
 If you define your resources as classes, you would have to hook your class
 instance via the global entry points.
\end_layout

\begin_layout Enumerate
The URI-space is your public-facing structure, but your internal implementation
 may benefit from an entirely different organization.
 For example, some resources my be backed by a relational database, others
 by a memory cache, and others by yet another subsystem.
 It may make sense for you to organize your code according to subsystems,
 rather than the public URI-space.
 For this reason, you would want the URI-space configuration to be separate
 from your code organization.
\end_layout

\begin_layout Standard
These problems might not be relevant to your application.
 But if they are, you may prefer the URI/resource separation paradigm, which
 can be implemented via URI capturing or resource dispatching, documented
 below.
\end_layout

\begin_layout Subsection
Resource Capturing
\begin_inset CommandInset label
LatexCommand label
name "resource-capturing"

\end_inset


\end_layout

\begin_layout Standard
Resource capturing, for the purpose of the URI/resource separation paradigm,
 only makes sense for scriptlet resources.
 For manual resources, 
\bar under
resource dispatching (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "resource-dispatching"

\end_inset

)
\bar default
 provides a similar structural function.
\end_layout

\begin_layout Standard
Resource capturing lets you use any public URI for any library scriptlet
 resource.
 For example, let's assume that you have the following files in 
\begin_inset Quotes eld
\end_inset

/libraries/scriptlet-resources/
\begin_inset Quotes erd
\end_inset

: 
\begin_inset Quotes eld
\end_inset

/database/profile.html
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

/database/preferences.html
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

/cache/session.html
\begin_inset Quotes erd
\end_inset

, which you organized in subdirectories according to the technologies used.
 Your URI-space can be defined thus:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/user/{userId}/preferences/': '/database/preferences/',
\end_layout

\begin_layout Plain Layout

	'/user/{userId}/profile/': '/database/profile/',
\end_layout

\begin_layout Plain Layout

	'/user/{userId}/session/': '/cache/session/'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note how the URI-space is organized completely differently from your filesystem:
 we have full URI/resource separation.
\end_layout

\begin_layout Quote

\series bold
Under the hood
\series default
: Prudence's capturing mechanism is implemented as server-side redirection
 (sometimes called 
\begin_inset Quotes eld
\end_inset

URI rewriting
\begin_inset Quotes erd
\end_inset

), with the added ability to use hidden URIs as the destination.
 It's this added ability that makes capturing useful for URI/resource separation
: hidden URIs include both scriptlet resource files in your application's
 
\begin_inset Quotes eld
\end_inset

/libraries/scriptlet-resources/
\begin_inset Quotes erd
\end_inset

 subdirectory as well as URIs routed to the 
\begin_inset Quotes eld
\end_inset

hidden
\begin_inset Quotes erd
\end_inset

 route type.
\end_layout

\begin_layout Subsection
Resource Dispatching
\begin_inset CommandInset label
LatexCommand label
name "resource-dispatching"

\end_inset


\end_layout

\begin_layout Standard
Resource dispatching, for the purpose of the URI/resource separation paradigm,
 only makes sense for manual resources.
 For scriptlet resources, 
\bar under
resource capturing (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "resource-capturing"

\end_inset

)
\bar default
 provides a similar structural function.
\end_layout

\begin_layout Standard
Configuring a dispatch is straightforward.
 In routing.js, use the 
\begin_inset Quotes eld
\end_inset

dispatch
\begin_inset Quotes erd
\end_inset

 route type configuration, or the 
\begin_inset Quotes eld
\end_inset

@
\begin_inset Quotes erd
\end_inset

 shortcut:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/session/{sessionId}/': '@session',
\end_layout

\begin_layout Plain Layout

	'/user/{userId}/preferences/': '@user'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The IDs must each be unique in your application.
 You must furthermore configure your dispatchers.
 There is one dispatcher per programming language, and JavaScript is the
 default dispatcher.
 We can configure it like so:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.dispatchers = {
\end_layout

\begin_layout Plain Layout

	javascript: '/manual-resources/'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

/manual-resources/
\begin_inset Quotes erd
\end_inset

 value is the document name to be executed from your application's 
\begin_inset Quotes eld
\end_inset

/libraries/
\begin_inset Quotes erd
\end_inset

 subdirectory.
 In our case, we must thus also have a 
\begin_inset Quotes eld
\end_inset

/libraries/manual-resources.js
\begin_inset Quotes erd
\end_inset

 file:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var UserResource = function() {
\end_layout

\begin_layout Plain Layout

	this.handleInit = function(conversation) {
\end_layout

\begin_layout Plain Layout

		conversation.addMediaTypeByName('text/plain')
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	this.handleGet = function(conversation) {
\end_layout

\begin_layout Plain Layout

		return 'This is user #' + conversation.locals.get('userId')
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

resources = {
\end_layout

\begin_layout Plain Layout

	session: {
\end_layout

\begin_layout Plain Layout

		handleInit: function(conversation) {
\end_layout

\begin_layout Plain Layout

			conversation.addMediaTypeByName('text/plain')
\end_layout

\begin_layout Plain Layout

		},
\end_layout

\begin_layout Plain Layout

		handleGet: function(conversation) {
\end_layout

\begin_layout Plain Layout

			return 'This is session #' + conversation.locals.get('sessionId')
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	},
\end_layout

\begin_layout Plain Layout

	user: new UserResource()
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The dispatcher will execute the above library and look for the 
\begin_inset Quotes eld
\end_inset

resources
\begin_inset Quotes erd
\end_inset

 dict, which maps dispatch IDs to resource implementations.
 In our example we've mapped the 
\begin_inset Quotes eld
\end_inset

session
\begin_inset Quotes erd
\end_inset

 dispatch ID to a dict, and used simple JavaScript object-oriented programming
 for the 
\begin_inset Quotes eld
\end_inset

user
\begin_inset Quotes erd
\end_inset

 dispatch ID.
 (Note that the Sincerity.Classes facility offers a comprehensive object-oriented
 system for JavaScript, but we preferred more straightforward code for this
 example.)
\end_layout

\begin_layout Standard
As you can see, the manual-resources.js file does not refer to URIs, but
 instead to dispatch IDs, which you can dispatch as you see fit.
\end_layout

\begin_layout Subsubsection
Inversion of Control
\end_layout

\begin_layout Standard
Object-oriented inheritance is one useful way to reuse code while allowing
 for special implementations.
 Additionally, Prudence allows for a straightforward IoC (Inversion of Control)
 mechanism.
\end_layout

\begin_layout Standard
When defining the dispatch, you can also inject set values to conversation.locals.
 You would need to use the long-form configuration to do this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/user/{userId}/preferences': {type: 'dispatch', id: 'user', locals: {section:
 'preferences'}},
\end_layout

\begin_layout Plain Layout

	'/user/{userId}/profile: {type: 'dispatch', id: 'user', locals: {section:
 'profile'}}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that both URI templates are dispatched to the exact same ID, but the
 
\begin_inset Quotes eld
\end_inset

locals
\begin_inset Quotes erd
\end_inset

 dict used is different for each.
 In your resource implementation, you can allow for different behavior according
 to the value of the 
\begin_inset Quotes eld
\end_inset

section
\begin_inset Quotes erd
\end_inset

 conversation.local.
 This allows you to configure your resource in routing.js, rather from its
 implementation in resource.js.
 In other words, 
\begin_inset Quotes eld
\end_inset

control
\begin_inset Quotes erd
\end_inset

 is 
\begin_inset Quotes eld
\end_inset

inverted,
\begin_inset Quotes erd
\end_inset

 via value injection.
\end_layout

\begin_layout Subsubsection
Other Programming Languages
\end_layout

\begin_layout Standard
Resource dispatching is also supported for Python, Ruby, PHP, Lua, Groovy
 and Clojure.
 To use them, you must specify the dispatcher together with the dispatch
 ID in routing.js, and configure that specific dispatcher.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/session/{sessionId}/': '@python:session'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

app.dispatchers = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	python: '/resources/'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
app.dispatchers
\end_layout

\begin_layout Standard
The common use of 
\begin_inset Quotes eld
\end_inset

app.dispatchers
\begin_inset Quotes erd
\end_inset

 has been 
\bar under
discussed above (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "resource-dispatching"

\end_inset

)
\bar default
.
 Here we'll delve into more details and see how to create your own custom
 dispatchers.
\end_layout

\begin_layout Standard
Under the hood, resource dispatching is handled by the URI capturing mechanism:
 the URI is captured to a special manual resource---the 
\begin_inset Quotes eld
\end_inset

dispatcher
\begin_inset Quotes erd
\end_inset

---with an injected value specifying the ID of resource to which it should
 dispatch.
\end_layout

\begin_layout Standard
Prudence's default dispatchers can be found in the 
\begin_inset Quotes eld
\end_inset

/libraries/scripturian/prudence/dispatchers/
\begin_inset Quotes erd
\end_inset

 directory of your container.
 For example, the JavaScript dispatcher is 
\begin_inset Quotes eld
\end_inset

/libraries/scripturian/prudence/dispatchers/javascript.js
\begin_inset Quotes erd
\end_inset

.
 You are encouraged to look at the code there in order to understand how
 dispatching works: it's quite straightforward delegation of the 
\bar under
entry points of a manual resource (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "manual-resources"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Standard
However, you can also write your own dispatchers to handle different dispatching
 paradigms.
 To configure them, you will need to use a long-form for 
\begin_inset Quotes eld
\end_inset

app.dispatchers
\begin_inset Quotes erd
\end_inset

.
 For example, here we override the default 
\begin_inset Quotes eld
\end_inset

javascript
\begin_inset Quotes erd
\end_inset

 dispatcher:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.dispatchers = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	special: {
\end_layout

\begin_layout Plain Layout

		dispatcher: '/dispatchers/special-dispatcher/',
\end_layout

\begin_layout Plain Layout

		customValue1: 'hello',
\end_layout

\begin_layout Plain Layout

		customValue2: 'world'
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The dispatcher code (a standard manual resource) would be in a 
\begin_inset Quotes eld
\end_inset

/libraries/dispatchers/special-dispatcher.js
\begin_inset Quotes erd
\end_inset

 file under your application's subdirectory.
 You would be able to access the dispatch ID there as the injected 
\begin_inset Quotes eld
\end_inset

prudence.dispatcher.id
\begin_inset Quotes erd
\end_inset

 conversation.local.
 
\begin_inset Quotes eld
\end_inset

customValue1
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

customValue2
\begin_inset Quotes erd
\end_inset

 would be application.globals: 
\begin_inset Quotes eld
\end_inset

prudence.dispatcher.special.customValue1
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

prudence.dispatcher.special.customValue2
\begin_inset Quotes erd
\end_inset

 respectively.
\end_layout

\begin_layout Standard
You can also override the default dispatchers:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.dispatchers = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	javascript: {
\end_layout

\begin_layout Plain Layout

		dispatcher: '/dispatchers/my-javascript-dispatcher/',
\end_layout

\begin_layout Plain Layout

		resources: '/resources/'
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
app.errors
\begin_inset CommandInset label
LatexCommand label
name "app-errors"

\end_inset


\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Subsection
app.hosts
\begin_inset CommandInset label
LatexCommand label
name "app-hosts"

\end_inset


\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Standard
Use app.hosts in routing.js to assign the application to a base URI on that
 host.
 By default we only use a single host, the default one, but you can assign
 each app to one or more hosts, with different base URIs under each.
 The application instance only runs 
\emph on
once
\emph default
 in such cases: all application.globals are shared no matter which host a
 request is routed from.
\end_layout

\begin_layout Paragraph
Minimal definition
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.hosts = {
\end_layout

\begin_layout Plain Layout

	'default': '/publicbaseuri/'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Custom
\end_layout

\begin_layout Standard
Here's an example of “attaching” the app to two different virtual hosts,
 with different base URIs under each:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.hosts = {
\end_layout

\begin_layout Plain Layout

	'default': '/publicbaseuri/',
\end_layout

\begin_layout Plain Layout

	'privatehost': '/privatebaseuri'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
The Internal URI-space
\begin_inset CommandInset label
LatexCommand label
name "internal-uri-space"

\end_inset


\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Standard
app.hosts internal
\end_layout

\begin_layout Subsection
app.preheat
\begin_inset CommandInset label
LatexCommand label
name "app-preheat"

\end_inset


\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Subsection
Architecture Tips
\end_layout

\begin_layout Standard
REST does not standardize URI-spaces, and indeed has little to say about
 URI design.
 However, it does 
\emph on
imply
\emph default
 a preference for certain architectural principles.
\end_layout

\begin_layout Standard
It's a good idea to think very carefully about your URI-space.
 A RESTful URI-space can help you define well-encapsulated RESTful resources.
\end_layout

\begin_layout Subsubsection
Nouns vs.
 Verbs
\end_layout

\begin_layout Standard
It's useful to think of URIs as syntactic 
\emph on
nouns
\emph default
, a grammatical counterpart to HTTP's 
\emph on
verbs
\emph default
.
 In other worlds, make sure that you do not include verbs in your URIs.
 Examples:
\end_layout

\begin_layout Itemize
Good: 
\begin_inset Quotes eld
\end_inset

/service/{id}/status/
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Bad: 
\begin_inset Quotes eld
\end_inset

/service/{id}/start/
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

/service/{id}/stop/
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
What is wrong with verbs in URIs?
\end_layout

\begin_layout Standard
One potential problem is clarity.
 Which HTTP verb should be used on a verb URI? Do you need to POST, PUT
 or DELETE to 
\begin_inset Quotes eld
\end_inset

/service/{id}/stop/
\begin_inset Quotes erd
\end_inset

 in order to stop the service? Of course, you can support all and document
 this, but it won't be immediately obvious to the user.
\end_layout

\begin_layout Standard
A second potential problem is that you need to keep increasing the size
 of your URI-space the more actions of this sort you want to support.
 [SO?]
\end_layout

\begin_layout Standard
A third, more serious potential problem is idempotency.
 The idempotent verbs PUT and DELETE may be optimized by the HTTP infrastructure
 (for example, a smart load balancer) such that requests arrive more than
 once: this is allowed by the very definition of idempotency.
 However, your operations 
\emph on
may
\emph default
 not be semantically idempotent.
 For example, if a 
\begin_inset Quotes eld
\end_inset

stop
\begin_inset Quotes erd
\end_inset

 is sent to an already-stopped service, it may return an 
\begin_inset Quotes eld
\end_inset

already stopped
\begin_inset Quotes erd
\end_inset

 500 error.
 In this case, if the infrastructure allows for two 
\begin_inset Quotes eld
\end_inset

stop
\begin_inset Quotes erd
\end_inset

 commands to come through, then the user may get an error even though the
 operation succeeded for the first 
\begin_inset Quotes eld
\end_inset

stop.
\begin_inset Quotes erd
\end_inset

 There's an easy way around this: simply allow 
\emph on
only
\emph default
 POST, the non-idempotent verb, for all such operations.
 The infrastructure will never allow more than request to come through per
 POST.
 However, if you enforce the use of POST, you will lose the ability of the
 infrastructure to optimize for non-idempotency.
 POST is the least scalable HTTP verb.
\end_layout

\begin_layout Standard
The bottom line is that if you standardize on only using nouns for your
 URIs, you will avoid many of these semantic entanglements.
\end_layout

\begin_layout Standard
Note: Beware of gerunds! A URI such as 
\begin_inset Quotes eld
\end_inset

/service/{id}/stopping/
\begin_inset Quotes erd
\end_inset

 is technically a noun, but allows for some verb-related problems to creep
 in.
\end_layout

\begin_layout Subsubsection
Do You Really Need REST?
\end_layout

\begin_layout Standard
In the above section, it was suggested that you prefer nouns to verbs.
 However, this preference may not make much sense to apply in your application.
 Your application may be very command-oriented, such that you will end up
 with a very small set of 
\begin_inset Quotes eld
\end_inset

noun
\begin_inset Quotes erd
\end_inset

 URIs that need to support a vast amount of commands.
\end_layout

\begin_layout Standard
REST shines because it is based on a tiny set of very tightly defined verbs:
 GET, POST, PUT, DELETE.
 The entire infrastructure is highly optimized around them: load balancers,
 caches, browsers, gateways, etc., all should know how best to handle each
 of these for maximum scalability and reliability.
 But, it's entirely possible that your needs cannot be easily satisfied
 by just four verbs.
\end_layout

\begin_layout Standard
And that's OK.
 REST is not always the best solution for APIs.
\end_layout

\begin_layout Standard
Instead, take a look at RPC (Remote Procedure Call) mechanisms.
 The Diligence framework, based on Prudence, provides robust and powerful
 support for JSON-RPC, XML-RPC and ExtDirect, allowing you to hook a JavaScript
 function on the server directly to a URI.
 In terms of HTTP, these protocols all use HTTP POST, and do not leverage
 the HTTP infrastructure as well as a more fully RESTful API.
 But, one size does not fit all, an an RPC-based solution may prove a better
 match for your project.
\end_layout

\begin_layout Standard
It's also perfectly possible to allow for both REST and RPC.
 Use each approach where it is most appropriate.
\end_layout

\begin_layout Subsubsection
Hierarchies
\end_layout

\begin_layout Standard
It's entirely a matter of convention that the use of 
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset

 in URIs implies hierarchy.
 Historically, the convention was likely imported from filesystem paths,
 where a name before a 
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset

 signifies a directory rather than a file.
\end_layout

\begin_layout Standard
This convention is useful because it's very familiar to users, but additionally
 it implies semantic properties that can add clarity and power to your resource
 design.
 There are two possible semantic principles you may consider:
\end_layout

\begin_layout Enumerate
A descendant resource 
\emph on
belongs to
\emph default
 its ancestor, such that resources have cascading relationships in the hierarchy.
 This implies two rules:
\end_layout

\begin_deeper
\begin_layout Enumerate
Operations on a resource 
\emph on
may
\emph default
 affect descendants.
 This rule is most obvious when applied to the DELETE verb: for example,
 if you delete 
\begin_inset Quotes eld
\end_inset

/user/{id}/
\begin_inset Quotes erd
\end_inset

, then it is expected that the resources at 
\begin_inset Quotes eld
\end_inset

/user/{id}/profile/
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

/user/{id}/preferences/
\begin_inset Quotes erd
\end_inset

 also be deleted.
 A PUT, too, would also affect the descendant resources.
\end_layout

\begin_layout Enumerate
Operations on a resource 
\emph on
should not
\emph default
 affect ancestors.
 In other words, a descendant's state is isolated from its ancestors.
 For example, if I send a POST to 
\begin_inset Quotes eld
\end_inset

/user/{id}/profile/
\begin_inset Quotes erd
\end_inset

, the representation at 
\begin_inset Quotes eld
\end_inset

/user/{id}/
\begin_inset Quotes erd
\end_inset

 should remain unaltered.
\end_layout

\end_deeper
\begin_layout Enumerate
A descendant resource 
\emph on
belongs to
\emph default
 its ancestor and also represents 
\emph on
an aspect of
\emph default
 its ancestor, such that operations on a resource can be fine-tuned to particula
r aspects of it.
 This implies three rules:
\end_layout

\begin_deeper
\begin_layout Enumerate
Descendant representations 
\emph on
are included
\emph default
 in ancestor representations.
 For example, a GET on 
\begin_inset Quotes eld
\end_inset

/service/{id}/
\begin_inset Quotes erd
\end_inset

 would include information about the status that you would see if you GET
 on 
\begin_inset Quotes eld
\end_inset

/service/{id}/status/
\begin_inset Quotes erd
\end_inset

.
 The latter URI makes it easier for the client to direct operations at the
 status aspect.
\end_layout

\begin_layout Enumerate
Operations on a resource 
\emph on
may
\emph default
 affect descendants.
 See above.
\end_layout

\begin_layout Enumerate
Operations on a resource 
\emph on
will
\emph default
 affect ancestors.
 This is the 
\emph on
opposite 
\emph default
of the above: the descendant's state is 
\emph on
not isolated 
\emph default
from its ancestors.
 For example, a POST to 
\begin_inset Quotes eld
\end_inset

/service/{id}/status/
\begin_inset Quotes erd
\end_inset

 would surely also affect 
\begin_inset Quotes eld
\end_inset

/service/{id}/
\begin_inset Quotes erd
\end_inset

, which includes the status.
\end_layout

\end_deeper
\begin_layout Standard
You can see from the difference between rule 1.b and 2.c.
 that it's important to carefully define the 
\emph on
nature
\emph default
 of your hierarchical relationships.
 Unlike filesystem directory hierarchies, in a URI-space there is no single
 standard or interpretation of what of a hierarchy means.
\end_layout

\begin_layout Standard
Note that a format should not be considered 
\begin_inset Quotes eld
\end_inset

an aspect
\begin_inset Quotes erd
\end_inset

 in the sense used in principle 2.
 For example, 
\begin_inset Quotes eld
\end_inset

/service/{id}/html/
\begin_inset Quotes erd
\end_inset

 would not be a good way to support an HTML format for 
\begin_inset Quotes eld
\end_inset

/service/{id}/
\begin_inset Quotes erd
\end_inset

.
 The reason is that you would be allowing for more than one URI for the
 same encapsulated resource, creating confusion for users.
 For example, it's not immediately clear what would happen if they DELETE
 
\begin_inset Quotes eld
\end_inset

/service/{id}/html/
\begin_inset Quotes erd
\end_inset

.
 Would that just remove the ability to represent the service as HTML? Or
 delete the service itself?
\end_layout

\begin_layout Standard
Supporting multiple formats is best handled with content negotiation, within
 the REST architecture.
 If further formatting is required, URI query parameters can be used.
 For example: 
\begin_inset Quotes eld
\end_inset

/service/{id}/?indent=2
\begin_inset Quotes erd
\end_inset

 might return a JSON representation with 2-space indentation.
\end_layout

\begin_layout Subsubsection
Plural vs.
 Singular
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Subsubsection
Documenting Your URI-Space
\end_layout

\begin_layout Standard
If you create a programming language API, you will surely want to document
 it in a human language.
 You will want to define the acceptable types and usages of function arguments,
 describe return values, possible raises exceptions, add implementation
 and performance notes, etc.
 Many programming languages include tools for embedding such documentation
 as comments in the source code, and generating a reference manual from
 it.
\end_layout

\begin_layout Standard
Consider that documenting your URI-space is just as important.
 A tool to generate such documentation for you is being considered for a
 future version of Prudence.
 Until it is available, consider adopting a resource documentation standard
 for your project.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

 * This resource represents a service running on the server.
 Servers have unique
\end_layout

\begin_layout Plain Layout

 * IDs defined by integers.
 A service can be either active or inactive.
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * Use POST to change the name or status of an existing service.
 You may
\end_layout

\begin_layout Plain Layout

 * not use it change the ID of an existing service.
 PUT will create a new
\end_layout

\begin_layout Plain Layout

 * service, and DELETE will stop and remove it.
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * Implementation note: if you PUT a service with an ID that already exists,
 then
\end_layout

\begin_layout Plain Layout

 * it will only stop and restart the service rather than removing/recreate
 it,
\end_layout

\begin_layout Plain Layout

 * which would be too resource intensive.
 Use DELETE if you absolutely need the
\end_layout

\begin_layout Plain Layout

 * service to be removed first, or set the "clean" query param to "true"
 to
\end_layout

\begin_layout Plain Layout

 * force removal.
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * URI: /service/{id:decimal}/
\end_layout

\begin_layout Plain Layout

 * Aspects: /service/{id:decimal}/status/
\end_layout

\begin_layout Plain Layout

 * Verbs: GET, POST, PUT, DELETE
\end_layout

\begin_layout Plain Layout

 * Media types: application/json, application/xml, text/plain (as JSON)
\end_layout

\begin_layout Plain Layout

 * Query params:
\end_layout

\begin_layout Plain Layout

 *  indent: decimal - if non-zero will return a human-readable indented
 version
\end_layout

\begin_layout Plain Layout

 *          of the representation with lines indented by the integer value
\end_layout

\begin_layout Plain Layout

 *  clean: boolean - if "true" or "yes" or "1" wil force removal of an existing
\end_layout

\begin_layout Plain Layout

 *         service during a PUT operation on an existing service
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * Representation as application/json:
\end_layout

\begin_layout Plain Layout

 *  {
\end_layout

\begin_layout Plain Layout

 *   "id": number,
\end_layout

\begin_layout Plain Layout

 *   "name": string (the service name),
\end_layout

\begin_layout Plain Layout

 *   "status": string:"active"|"inactive"
\end_layout

\begin_layout Plain Layout

 *  }
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * POST/PUT payload as application/json:
\end_layout

\begin_layout Plain Layout

 *  {
\end_layout

\begin_layout Plain Layout

 *   "name": ...
\end_layout

\begin_layout Plain Layout

 *   "status": ...
\end_layout

\begin_layout Plain Layout

 *  }
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

 * This resource represents the status of a service.
 
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * DELETE on this resource is identical to PUT or POST with "inactive".
\end_layout

\begin_layout Plain Layout

 * PUT and POST are handled identically.
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * URI: /service/{id:decimal}/status/
\end_layout

\begin_layout Plain Layout

 * Aspect of: /service/{id:decimal}/
\end_layout

\begin_layout Plain Layout

 * Verbs: GET, POST, PUT, DELETE
\end_layout

\begin_layout Plain Layout

 * Media types: text/plain
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * Representation as text/plain:
\end_layout

\begin_layout Plain Layout

 *   "active"|"inactive"
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\end_inset


\end_layout

\begin_layout Section
Implementing Resources
\begin_inset CommandInset label
LatexCommand label
name "implementing-resources"

\end_inset


\end_layout

\begin_layout Subsection
Comparison Table
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top" width="4cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Manual
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Scriptlet
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Static
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Supports URI Mapping
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Supports URI Dispatching
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Filename Extension
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Determines programming language
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Determines MIME type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Determines MIME type
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Filename Pre-extension
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*.m.*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*.s.*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Programming Languages
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Determined by filename extension
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Determined by scriptlet tags (multiple languages possible per resource)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Content Negotiation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Manually determined in handleInit; multiple MIME types possible
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Single MIME type determined by filename extension; multiple encodings automatica
lly supported and cached
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Single MIME type determined by filename extension; multiple encodings automatica
lly supported
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Server-Side Caching
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Manual (via API)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Automatic (handled by Prudence)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Client-Side Caching
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Manual (via API)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Automatic (determined by server-side caching)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Can be added with CacheControlFilter
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Manual Resources
\begin_inset CommandInset label
LatexCommand label
name "manual-resources"

\end_inset


\end_layout

\begin_layout Subsubsection
Mapping vs.
 Dispatching
\end_layout

\begin_layout Subsubsection
handleInit
\begin_inset CommandInset label
LatexCommand label
name "handle-init"

\end_inset


\end_layout

\begin_layout Standard
This is the only required entry point.
 It is called once for 
\emph on
every user request
\emph default
, and always before any of the other entry points.
\end_layout

\begin_layout Standard
The main work is to initialize supported media types via 
\bar under
conversation.addMediaType (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|conversation-add-media-type"

\end_inset

)
\bar default
, in order of preference.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

function handleInit(conversation) {
\end_layout

\begin_layout Plain Layout

    conversation.addMediaTypeByName('application/json')
\end_layout

\begin_layout Plain Layout

    conversation.addMediaTypeByName('text/plain') 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Prudence handles content negotiation automatically, choosing the best media
 type according to list of acceptable and preferred formats sent by the
 client and this list.
\end_layout

\begin_layout Paragraph
But, Why?
\end_layout

\begin_layout Standard
You might wonder why we add these supported media types dynamically for
 each request via a call to handleInit, since they are usually always the
 same for a resource.
 The reason is that sometimes they may not be the same.
 In handleInit, you can check for various conditions of the conversation,
 or even external to the conversation, to decide which media types to support.
 For example, you might not want to support XHTML for old browsers, but
 you'd want it at the top of the list for new browsers.
 Or, you might not be able to support PDF in case an external service is
 down.
 In which case, you won't want it on the list at all, in which case content
 negotiation would choose a different format that the client supports, such
 as DVI.
\end_layout

\begin_layout Standard
So, this gives you a lot flexibility, at no real expense: adding media types
 per request is extremely lightweight.
\end_layout

\begin_layout Subsubsection
handleGet
\begin_inset CommandInset label
LatexCommand label
name "handle-get"

\end_inset


\end_layout

\begin_layout Standard
Handles HTTP “GET” requests.
\end_layout

\begin_layout Standard
In a conventional 
\bar under
resource-oriented architecture (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../../rest/"

\end_inset

)
\bar default
, clients will not be expecting the resource to be altered in any way by
 a GET operation.
\end_layout

\begin_layout Standard
What you'll usually do here is construct a representation of the resource,
 possibly according to specific parameters of the request, and return this
 representation to the client.
 See the “
\bar under
conversation” API documentation (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|conversation"

\end_inset

)
\bar default
 for a complete reference.
 Note especially that if you've 
\bar under
captured URI segments (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../routing/|static-capturing"

\end_inset

)
\bar default
, they'll be available in 
\bar under
conversation.locals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|conversation-locals"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Standard
The following return types are supported:
\end_layout

\begin_layout Itemize
Numbers: Returns the number as an HTTP status code to the client, with no
 other content.
 Usually used for errors.
 For example, 404 means “not found.” Note that 
\bar under
error capturing (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../routing/|capturing-errors"

\end_inset

)
\bar default
 can let you take over and return an appropriate error page to the client.
\end_layout

\begin_layout Itemize
Arrays of bytes: Used for returning binary representations.
 Note that some languages (JavaScript, for example) have their own implementatio
ns of arrays, which are not exactly compatible with JVM arrays.
 In such cases, you have to make sure to return JVM arrays.
 Internally, Prudence represents these values with a 
\begin_inset CommandInset href
LatexCommand href
name "ByteArrayRepresentation"
target "http://threecrickets.com/prudence/api/index.html?com/threecrickets/prudence/util/ByteArrayRepresentation.html"

\end_inset

.
\end_layout

\begin_layout Itemize
Representation instances: You can construct and return a 
\begin_inset CommandInset href
LatexCommand href
name "Restlet representation"
target "http://www.restlet.org/documentation/2.0/jse/api/index.html?org/restlet/representation/Representation.html"

\end_inset

 directly.
\end_layout

\begin_layout Itemize
Other return values: If the 
\bar under
conversation.mediaType (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|conversation-media-type"

\end_inset

)
\bar default
 is “application/java” the value will be wrapped in an 
\begin_inset CommandInset href
LatexCommand href
name "ObjectRepresentation instance"
target "http://www.restlet.org/documentation/2.0/jse/api/index.html?org/restlet/representation/ObjectRepresentation.html"

\end_inset

.
 Otherwise, it will be converted into a string if it isn't a string already,
 and returned to the client as a textual representation.
\end_layout

\begin_layout Standard
Beyond the return value, you can affect the response sent to the client
 by the response attributes in the “
\bar under
conversation” service (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|conversation"

\end_inset

)
\bar default
.
 In particular, the 
\bar under
conversation.modificationDate (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|conversation-modification-date"

\end_inset

)
\bar default
 and 
\bar under
conversation.tag (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|conversation-tag"

\end_inset

)
\bar default
 can be used to affect 
\bar under
conditional HTTP requests (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../resources/|conditional-requests"

\end_inset

)
\bar default
.
 For these, you may also consider implementing the 
\bar under
handleGetInfo entry point (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "handle-get-info"

\end_inset

)
\bar default
 for more scalable handling of conditional requests.
\end_layout

\begin_layout Subsubsection
handlePost
\begin_inset CommandInset label
LatexCommand label
name "handle-post"

\end_inset


\end_layout

\begin_layout Standard
Handles HTTP “POST” requests.
\end_layout

\begin_layout Standard
In a conventional 
\bar under
resource-oriented architecture (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../../rest/"

\end_inset

)
\bar default
, POST is the “update” operation (well, not exactly: see note below).
 Clients will expect the resource to already exist for the POST operation
 to succeed.
 That is, a call to GET before the POST may succeed.
 Clients expect you to return a modified representation, in the selected
 media type, if the POST succeeded.
 Subsequent GET operations would then return the same modified representation.
 A failed POST should not alter the resource.
\end_layout

\begin_layout Standard
Note that the entity sent by the client does not have to be identical in
 format or content to what you return.
 In fact, it's likely that the client will send smaller delta updates in
 a POST, rather than a complete representation.
\end_layout

\begin_layout Standard
What you'll usually do here is fetch the data, and alter it according to
 data sent by the client.
 See the “
\bar under
conversation” API documentation (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|conversation"

\end_inset

)
\bar default
 for a complete reference.
 Note especially that if you've 
\bar under
captured URI segments (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../routing/|static-capturing"

\end_inset

)
\bar default
, they'll be available in 
\bar under
conversation.locals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|conversation-locals"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Standard
See 
\bar under
handleGet (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "handle-get"

\end_inset

)
\bar default
 for supported return types.
 In fact, you may want handlePost to share the same code path as handleGet
 for creating the representation.
\end_layout

\begin_layout Quote
POST is the only HTTP operation that is not “idempotent,” which means that
 multiple 
\emph on
identical
\emph default
 POST operations on a resource 
\emph on
may
\emph default
 yield different results from a single POST operation.
 This is why web browsers warn you if you try to refresh a web page that
 is the result of a POST operation.
 As such, POST is the correct operation to use for manipulations of a resource
 that 
\emph on
cannot be repeated
\emph default
.
 See 
\begin_inset CommandInset href
LatexCommand href
name "this blog post by John Calcote"
target "http://jcalcote.wordpress.com/2008/10/16/put-or-post-the-rest-of-the-story/"

\end_inset

 for an in-depth explanation.
\end_layout

\begin_layout Subsubsection
handlePut
\begin_inset CommandInset label
LatexCommand label
name "handle-put"

\end_inset


\end_layout

\begin_layout Standard
Handles HTTP “PUT” requests.
\end_layout

\begin_layout Standard
In a conventional 
\bar under
resource-oriented architecture (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../../rest/"

\end_inset

)
\bar default
, PUT is the “create” operation (well, not exactly: see note below).
 Clients will expect whatever current data exists in the resource to be
 discarded, and for you to return a representation of the new resource in
 the selected media type.
 A failed PUT should not alter the resource.
\end_layout

\begin_layout Standard
Note that the entity sent by the client does not have to be identical in
 format or content to what you return.
 In fact, it's likely that you will return more information to the client
 than what was sent.
\end_layout

\begin_layout Standard
What you'll usually do here is parse and store the data sent by the client.
 See the “
\bar under
conversation” API documentation (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|conversation"

\end_inset

)
\bar default
 for a complete reference.
 Note especially that if you've 
\bar under
captured URI segments (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../routing/|static-capturing"

\end_inset

)
\bar default
, they'll be available in 
\bar under
conversation.locals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|conversation-locals"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Standard
See 
\bar under
handleGet (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "handle-get"

\end_inset

)
\bar default
 for supported return types.
 In fact, you may want handlePut to share the same code path as handleGet
 for creating the representation.
\end_layout

\begin_layout Quote
PUT, like most HTTP operations, is “idempotent,” which means that multiple
 
\emph on
identical
\emph default
 PUT operations on a resource are expected to yield the same result as a
 single PUT operation.
 If you are implementing a “create” operation that 
\emph on
cannot
\emph default
 be repeated, then you should use POST instead.
 See note in POST.
\end_layout

\begin_layout Subsubsection
handleDelete
\begin_inset CommandInset label
LatexCommand label
name "handle-delete"

\end_inset


\end_layout

\begin_layout Standard
Handles HTTP “DELETE” requests.
\end_layout

\begin_layout Standard
In a conventional 
\bar under
resource-oriented architecture (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../../rest/"

\end_inset

)
\bar default
, clients expect subsequent GET operations to fail with a “not found” (404)
 code.
 A DELETE should fail with 404 if the resource is not already there; it
 should 
\emph on
not 
\emph default
silently succeed.
 A failed DELETE should not alter the resource.
\end_layout

\begin_layout Standard
What you'll usually do here is make sure the identified resource exists,
 and if it does, remove or mark it somehow as deleted.
 See the “
\bar under
conversation” API documentation (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|conversation"

\end_inset

)
\bar default
 for a complete reference.
 Note especially that if you've 
\bar under
captured URI segments (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../routing/|static-capturing"

\end_inset

)
\bar default
, they'll be available in 
\bar under
conversation.locals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|conversation-locals"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Standard
The following return types are supported:
\end_layout

\begin_layout Itemize
Numbers: Returns the number as an HTTP status code to the client, with no
 other content.
 Usually used for errors.
 For example, 404 means “not found.” Note that 
\bar under
error capturing (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../routing/|capturing-errors"

\end_inset

)
\bar default
 can let you take over and return an appropriate error page to the client.
\end_layout

\begin_layout Itemize
Null: Signifies success.
\end_layout

\begin_layout Quote
Note: It's good practice to always explicitly return null in handleDelete.
 Some languages return null if no explicit return statement is used.
 Others, however, return the value of the last executed operation, which
 could be a number, which would in turn become an HTTP status code for the
 client.
 This can lead to some very bizarre bugs, as clients receive apparently
 random status codes!
\end_layout

\begin_layout Subsubsection
handleGetInfo
\begin_inset CommandInset label
LatexCommand label
name "handle-get-info"

\end_inset


\end_layout

\begin_layout Standard
Handles HTTP “GET” requests 
\emph on
before
\emph default
 
\bar under
handleGet (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "handle-get"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Standard
This entry point, if it exists, is called before handleGet in order to provide
 Prudence with information required for 
\bar under
conditional HTTP requests (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../resources/|conditional-requests"

\end_inset

)
\bar default
.
 Only if conditions are not met---for example if our resource is newer than
 the version the client has cached, or the tag has changed---does Prudence
 continue to handleGet.
 Using handleGetInfo can thus improve on the gains of conditional requests:
 not only are you saving bandwidth, but you are also avoiding a potentially
 costly handleGet call.
\end_layout

\begin_layout Standard
The following return types are supported:
\end_layout

\begin_layout Itemize
Numbers: Considered as Unix timestamps, and converted into the modification
 date.
 See 
\bar under
conversation.modificationDate (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|conversation-modification-date"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Itemize
JVM Date instances: The modification date.
 Refer to the Java API documentation for details.
\end_layout

\begin_layout Itemize
Strings: Considered as HTTP tags.
 See 
\bar under
conversation.tag (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|conversation-tag"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Itemize
Tag instances: You can construct and return your own 
\begin_inset CommandInset href
LatexCommand href
name "Restlet tag"
target "http://www.restlet.org/documentation/2.0/jse/api/index.html?org/restlet/data/Tag.html"

\end_inset

.
\end_layout

\begin_layout Itemize
RepresentationInfo instances: You can construct and return your own 
\begin_inset CommandInset href
LatexCommand href
name "Restlet representation info"
target "http://www.restlet.org/documentation/2.0/jse/api/index.html?org/restlet/representation/RepresentationInfo.html"

\end_inset

.
\end_layout

\begin_layout Standard
Note that even if though you can only set either the modification date or
 the tag by the return value, you can set the other one using 
\bar under
conversation.modificationDate (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|conversation-modification-date"

\end_inset

)
\bar default
 and 
\bar under
conversation.tag (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|conversation-tag"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Standard
If you implement handleGetInfo, you should be returning the same conditional
 information in your handleGet implementation, so that the client would
 know how to tag the data.
 The return value from handleGetInfo does not, in fact, ever get to the
 client: it is only used internally by Prudence to process conditional requests.
\end_layout

\begin_layout Paragraph
In the real world\SpecialChar \ldots{}

\end_layout

\begin_layout Standard
You might be tempted to go ahead and provide a handleGetInfo entry point
 for every resource you create.
 This is not necessarily a good practice, for three reasons:
\end_layout

\begin_layout Enumerate
It could be that you don't need this optimization.
 Make sure, first, that you've actually identified a problem with performance
 or scalability, and that you've traced it to handleGet on this resource.
\end_layout

\begin_layout Enumerate
It could be that you won't gain anything from this optimization.
 Caches and other optimizations along the route between your data and your
 client might already be doing a great job at keeping handleGet as efficient
 as it could be.
 If not, improving them could offer far greater benefits overall than a
 handleGetInfo.
\end_layout

\begin_layout Enumerate
It could be that you'll even hurt your scalability! The reason is that an
 efficient handleGetInfo implementation would need some mechanism in place
 to track of data modification, and this mechanism can introduce overhead
 into your system that causes it to scale worse than without your handleGetInfo.
\end_layout

\begin_layout Standard
See “
\bar under
Scaling Tips” (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../../scaling/"

\end_inset

)
\bar default
 for a thorough discussion of the problem of scalability.
\end_layout

\begin_layout Subsubsection
Controlling the Formats
\end_layout

\begin_layout Standard
Negotiated via handleInit: the order matters
\end_layout

\begin_layout Standard
You can check what was negotiated
\end_layout

\begin_layout Standard
But you can set it to whatever you want later
\end_layout

\begin_layout Subsubsection
Client-Side Caching
\end_layout

\begin_layout Standard
conversation.modificationDate, conversation.tag
\end_layout

\begin_layout Subsubsection
Server-Side Caching
\end_layout

\begin_layout Standard
Not supported directly.
\end_layout

\begin_layout Subsubsection
Integrating Textual Resources
\end_layout

\begin_layout Standard
MVC
\end_layout

\begin_layout Subsubsection
Java Resources
\begin_inset CommandInset label
LatexCommand label
name "java-resources"

\end_inset


\end_layout

\begin_layout Standard
Resources
\end_layout

\begin_layout Standard
Other Restlets
\end_layout

\begin_layout Subsection
Scriptlet Resources
\begin_inset CommandInset label
LatexCommand label
name "scriptlet-resources"

\end_inset


\end_layout

\begin_layout Standard
Must be mapped.
 In the future may be dispatched.
\end_layout

\begin_layout Subsubsection
Scriptlets
\end_layout

\begin_layout Subsubsection
Choice of Programming Language
\end_layout

\begin_layout Subsubsection
Markup Languages
\end_layout

\begin_layout Subsubsection
Controlling the Format
\end_layout

\begin_layout Standard
Rely on the filename extension (see static resources) or change it in code.
\end_layout

\begin_layout Subsubsection
Server-Side Caching
\end_layout

\begin_layout Subsubsection
Client-Side Caching
\end_layout

\begin_layout Subsubsection
Scriptlet Plugins
\end_layout

\begin_layout Subsubsection
On-the-Fly Scriptlet Resources
\begin_inset CommandInset label
LatexCommand label
name "on-the-fly-scriptlet-resources"

\end_inset


\end_layout

\begin_layout Standard
You can add support for on-the-fly scriptlet resources to your application
 via the 
\bar under

\begin_inset Quotes eld
\end_inset

execute
\begin_inset Quotes erd
\end_inset

 route type (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "execute-route-type"

\end_inset

)
\bar default
.
 This powerful (and dangerous) resource executes all POST payloads as if
 they were scriptlet resources in the application, and is very useful for
 
\bar under
debugging (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "live-execution"

\end_inset

)
\bar default
 and maintenance.
\end_layout

\begin_layout Standard
To install it, modify your application's routing.js and create a route for
 the 
\begin_inset Quotes eld
\end_inset

execute
\begin_inset Quotes erd
\end_inset

 type:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	'/execute/': 'execute'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Quote
Because it allows execution of arbitrary code, you very likely do not want
 its URL publicly exposed.
 If you use it, make sure to protect its URL on publicly available machines!
\end_layout

\begin_layout Standard
Example use with 
\begin_inset CommandInset href
LatexCommand href
name "cURL"
target "http://curl.haxx.se/"

\end_inset

 command line:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

curl -v -d "<% println(1+2) %>" "http://localhost:8080/myapp/execute/"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that if you use cURL with a file, you need to send it as binary, otherwise
 curl will strip your newlines:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

curl -v --data-binary @myscriptfile "http://localhost:8080/myapp/execute/"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Where 
\begin_inset Quotes eld
\end_inset

myscriptfile
\begin_inset Quotes erd
\end_inset

 would like like a scriptlet resource:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<%
\end_layout

\begin_layout Plain Layout

document.executeOnce('/sincerity/templates/')
\end_layout

\begin_layout Plain Layout

println(Hello, {0}'.cast('Linus'))
\end_layout

\begin_layout Plain Layout

%>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Almost all the usual scriptlet resource APIs work (with the exception of
 caching, which isn't supported):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<%
\end_layout

\begin_layout Plain Layout

document.executeOnce('/sincerity/templates/')
\end_layout

\begin_layout Plain Layout

var name = conversation.query.get('name') || 'Linus'
\end_layout

\begin_layout Plain Layout

println('Hello, {0}'.cast(name))
\end_layout

\begin_layout Plain Layout

%>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For the above, you could then POST with a query param:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

curl -v --data-binary @myscriptfile "http://localhost:8080/myapp/execute/?name=R
ichard"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that you can, as usual, use scriptlets in any supported programming
 language:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<%python
\end_layout

\begin_layout Plain Layout

name = conversation.query['name'] or 'Linus'
\end_layout

\begin_layout Plain Layout

print 'Hello, %s' % name
\end_layout

\begin_layout Plain Layout

%>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Also note that the default response MIME type is 
\begin_inset Quotes eld
\end_inset

text/plain
\begin_inset Quotes erd
\end_inset

, but you can modify it with the conversation.mediaType API:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<%
\end_layout

\begin_layout Plain Layout

document.executeOnce('/sincerity/json/')
\end_layout

\begin_layout Plain Layout

conversation.mediaTypeName = 'application/json'
\end_layout

\begin_layout Plain Layout

println(Sincerity.JSON.to({greeting: 'Hello'}, true))
\end_layout

\begin_layout Plain Layout

%>
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Static Resources
\begin_inset CommandInset label
LatexCommand label
name "static-resources"

\end_inset


\end_layout

\begin_layout Standard
Prudence works fine as a static web server: it's fast, supports non-blocking
 chunking, and has many useful features detailed below.
\end_layout

\begin_layout Standard
Of course, there are servers out there that specialize in serving static
 files and might do a better job, but you might be surprised by how far
 Prudence can take you.
\end_layout

\begin_layout Standard
Note that if Internet scalability is really important to you, it's better
 to even not use a standard web server at all, but instead rely on a CDN
 (Content Delivery Network) product or service with true global reach.
\end_layout

\begin_layout Subsubsection
Configuration
\end_layout

\begin_layout Standard
Add support for static resources using the 
\bar under

\begin_inset Quotes eld
\end_inset

static
\begin_inset Quotes erd
\end_inset

 route type (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "static-route-type"

\end_inset

)
\bar default
 in your routing.js, mapping it to a URI template ending in a wildcard:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	'/*': 'static'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The default configuration for 
\begin_inset Quotes eld
\end_inset

static
\begin_inset Quotes erd
\end_inset

 will map all files from your application's 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

 subdirectory, 
\emph on
as well as
\emph default
 the container's 
\begin_inset Quotes eld
\end_inset

/libraries/web/
\begin_inset Quotes erd
\end_inset

 directory.
 Here is the above configuration with all the defaults fleshed out:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	'/*': {
\end_layout

\begin_layout Plain Layout

		type: 'static',
\end_layout

\begin_layout Plain Layout

		roots: [
\end_layout

\begin_layout Plain Layout

			'resources',
\end_layout

\begin_layout Plain Layout

			sincerity.container.getLibrariesFile('web')
\end_layout

\begin_layout Plain Layout

		],
\end_layout

\begin_layout Plain Layout

		listingAllowed: false,
\end_layout

\begin_layout Plain Layout

		negotiate: true,
\end_layout

\begin_layout Plain Layout

		compress: true
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that the 
\begin_inset Quotes eld
\end_inset

roots
\begin_inset Quotes erd
\end_inset

 (pluralized) param is a shortcut to create a chain of two 
\begin_inset Quotes eld
\end_inset

static
\begin_inset Quotes erd
\end_inset

 instances.
 The above is equivalent to:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	'/*': [
\end_layout

\begin_layout Plain Layout

		{type: 'static', root: 'resources'},
\end_layout

\begin_layout Plain Layout

		{type: 'static', root: sincerity.container.getLibrariesFile('web')}
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you want to also support manual and scriptlet resources, make sure to
 chain 
\begin_inset Quotes eld
\end_inset

static
\begin_inset Quotes erd
\end_inset

 after them, so it will catch whatever doesn't have the special 
\begin_inset Quotes eld
\end_inset

.m.
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

.s.
\begin_inset Quotes erd
\end_inset

 pre-extensions:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	'/*': [
\end_layout

\begin_layout Plain Layout

		'manual',
\end_layout

\begin_layout Plain Layout

		'scriptlet',
\end_layout

\begin_layout Plain Layout

		'static'
\end_layout

\begin_layout Plain Layout

	]
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Controlling the Format
\begin_inset CommandInset label
LatexCommand label
name "static-resources-controlling-the-format"

\end_inset


\end_layout

\begin_layout Standard
When 
\begin_inset Quotes eld
\end_inset

negotiate
\begin_inset Quotes erd
\end_inset

 is true, Prudence will handle HTTP content negotiation for your static
 resources, and will assume a single MIME type per resource.
 That MIME type is determined by the filename extension.
 For example, a resource named 
\begin_inset Quotes eld
\end_inset

logo.png
\begin_inset Quotes erd
\end_inset

 will have the 
\begin_inset Quotes eld
\end_inset

image/png
\begin_inset Quotes erd
\end_inset

 MIME type.
\end_layout

\begin_layout Standard
Prudence recognizes many common file types by default, but you can add your
 own mappings in you application's settings.js, using 
\bar under

\begin_inset Quotes eld
\end_inset

app.settings.mediaTypes
\begin_inset Quotes erd
\end_inset

 (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "settings-media-types"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Subsubsection
Client-Side Caching
\begin_inset CommandInset label
LatexCommand label
name "static-resources-client-side-caching"

\end_inset


\end_layout

\begin_layout Standard
Prudence adds modification timestamp headers to all static resources, which
 allow clients, such as web browsers, to cache the contents and use conditional
 HTTP requests to later check if the cache needs to be refreshed.
\end_layout

\begin_layout Standard
Conditional HTTP is efficient and fast, but you can go one step further
 and tell clients to avoid even that check.
 Use the 
\bar under

\begin_inset Quotes eld
\end_inset

cacheControl
\begin_inset Quotes erd
\end_inset

 filter (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "cache-control-route-type"

\end_inset

)
\bar default
 before your 
\begin_inset Quotes eld
\end_inset

static
\begin_inset Quotes erd
\end_inset

 route type:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	'/*': {
\end_layout

\begin_layout Plain Layout

		type: 'cacheControl',
\end_layout

\begin_layout Plain Layout

		mediaTypes: {
\end_layout

\begin_layout Plain Layout

			'image/png': '10m',
\end_layout

\begin_layout Plain Layout

			'image/jpeg': '10m',
\end_layout

\begin_layout Plain Layout

			'image/gif': '10m'
\end_layout

\begin_layout Plain Layout

		},
\end_layout

\begin_layout Plain Layout

		next: 'static'
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
With the above, Prudence will ask web browsers to cache common image types
 for 10 minutes before sending conditional HTTP requests.
\end_layout

\begin_layout Standard
Make sure you understand the implications of this: after the client's first
 hit, for 10 minutes 
\emph on
it will not be able to see changes to that static resource
\emph default
.
 The client's web browser would continue using the older version of the
 resource until its cache expires.
\end_layout

\begin_layout Paragraph
Bypassing the Client Cache
\begin_inset CommandInset label
LatexCommand label
name "static-resources-bypassing-the-client-cache"

\end_inset


\end_layout

\begin_layout Standard
There is a widely-used trick that lets you use client-side caching while
 still letting you propagate changes 
\emph on
immediately
\emph default
.
 It makes use of the fact that the client cache uses the 
\emph on
complete 
\emph default
URL as the cache key, which 
\emph on
includes the query matrix
\emph default
.
 If you use a query param with the URL, the 
\begin_inset Quotes eld
\end_inset

static
\begin_inset Quotes erd
\end_inset

 resource will ignore it, but the client will still consider it a new resource
 in terms of caching.
 For example, let's say you include an image in an HTML page:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<img src="/media/logo.png" />
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you made a change to the 
\begin_inset Quotes eld
\end_inset

logo.png
\begin_inset Quotes erd
\end_inset

 file, and you want to bypass the client cache, then just change the HTML
 to this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<img src="/media/logo.png?_=1" />
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Voila: it's a new URL, so older cached values will not be used.
 For Prudence, the query makes no difference.
 You can then simply increase the value of the 
\begin_inset Quotes eld
\end_inset

_
\begin_inset Quotes erd
\end_inset

 query param every time you make a change.
\end_layout

\begin_layout Standard
This trick works so well that, if you use it, it's recommended that you
 actually ask clients to cache your resources 
\emph on
forever
\emph default
.
 
\begin_inset Quotes eld
\end_inset

Forever
\begin_inset Quotes erd
\end_inset

 is not actually supported, but it's customary to use 10 years in the future
 as a practical equivalent.
 Use 
\begin_inset Quotes eld
\end_inset

farFuture
\begin_inset Quotes erd
\end_inset

 as a shortcut in 
\begin_inset Quotes eld
\end_inset

cacheControl
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	'/*': {
\end_layout

\begin_layout Plain Layout

		type: 'cacheControl',
\end_layout

\begin_layout Plain Layout

		mediaTypes: {
\end_layout

\begin_layout Plain Layout

			'image/png': 'farFuture',
\end_layout

\begin_layout Plain Layout

			'image/jpeg': 'farFuture',
\end_layout

\begin_layout Plain Layout

			'image/gif': 'farFuture'
\end_layout

\begin_layout Plain Layout

		},
\end_layout

\begin_layout Plain Layout

		next: 'static'
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Remembering to increase the query param in all uses of the resource might
 be too cumbersome and error-prone.
 Consider using the 
\begin_inset CommandInset href
LatexCommand href
name "Diligence Assets service"
target "http://threecrickets.com/diligence/manual/service/assets/"

\end_inset

, or something similar, instead: it calculates digests for the resource
 file contents and use them as the query param.
 Thus, any change to the file contents will result in a new, unique URL.
\end_layout

\begin_layout Quote
What happens to cache entries that have been marked to expire in 10 years,
 but are no longer used by your site? They indeed will linger in your client's
 web browser cache.
 This isn't too bad: web browsers normally are configured with a maximum
 cache size and the disk space will be cleared and reused if needed.
 It's still an inelegant waste, for which unfortunately there is no solution
 in HTTP and HTML.
\end_layout

\begin_layout Subsubsection
JavaScript and CSS Optimization
\begin_inset CommandInset label
LatexCommand label
name "static-resources-javascript-and-css-optimization"

\end_inset


\end_layout

\begin_layout Standard
When writing JavaScript code, you likely want to use a lot of spacing, indentati
on and comments to keep the code clear and manageable.
 You would likely also want to divide a large code base among multiple files.
 Unfortunately, this is not so efficient, because clients must download
 these files.
\end_layout

\begin_layout Standard
Prudence's 
\bar under

\begin_inset Quotes eld
\end_inset

javaScriptUnifyMinify
\begin_inset Quotes erd
\end_inset

 filter (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "javascript-unify-minify-route-type"

\end_inset

)
\bar default
 can help.
 To configure:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	'/*': {
\end_layout

\begin_layout Plain Layout

		type: 'javaScriptUnifyMinify',
\end_layout

\begin_layout Plain Layout

		next: 'static'
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The filter will catch URLs ending in 
\begin_inset Quotes eld
\end_inset

/all.js
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

/all.min.js
\begin_inset Quotes erd
\end_inset

, the former being unified and the latter unified 
\emph on
and
\emph default
 minified.
 The contents to be used, by default, will be all the 
\begin_inset Quotes eld
\end_inset

.js
\begin_inset Quotes erd
\end_inset

 files under your application's 
\begin_inset Quotes eld
\end_inset

/resources/scripts/
\begin_inset Quotes erd
\end_inset

 subdirectory 
\emph on
as well as
\emph default
 those under your container's 
\begin_inset Quotes eld
\end_inset

/libraries/web/scripts/
\begin_inset Quotes erd
\end_inset

 directory.
 The filter writes out the generated 
\begin_inset Quotes eld
\end_inset

all.js
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

all.min.js
\begin_inset Quotes erd
\end_inset

 files to 
\begin_inset Quotes eld
\end_inset

/resources/scripts/
\begin_inset Quotes erd
\end_inset

, and makes sure to update these files (unifying and minifying again) if
 any one of the source files are changed.
\end_layout

\begin_layout Standard
Note that the files are unified in alphabetical order, so make sure to rename
 them accordingly if order of execution is important.
 
\end_layout

\begin_layout Standard
Here is the above configuration with all the defaults fleshed out:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	'/*': {
\end_layout

\begin_layout Plain Layout

		type: 'javaScriptUnifyMinify',
\end_layout

\begin_layout Plain Layout

		roots: [
\end_layout

\begin_layout Plain Layout

			'resources/scripts',
\end_layout

\begin_layout Plain Layout

			sincerity.container.getLibrariesFile('web', 'scripts')
\end_layout

\begin_layout Plain Layout

		],
\end_layout

\begin_layout Plain Layout

		next: 'static'
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For a usage example, let's say we have the following three files under the
 application's subdirectory:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/resources/scripts/jquery.js
\end_layout

\begin_layout Plain Layout

/resources/scripts/jquery.highlight.js
\end_layout

\begin_layout Plain Layout

/resources/scripts/jquery.popup.js
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Your HTML files can then include something like this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<head>
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	<script src="/scripts/all.min.js"></script>
\end_layout

\begin_layout Plain Layout

</head>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that the first entry in the 
\begin_inset Quotes eld
\end_inset

roots
\begin_inset Quotes erd
\end_inset

 array is where the generated 
\begin_inset Quotes eld
\end_inset

all.js
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

all.min.js
\begin_inset Quotes erd
\end_inset

 files are stored.
\end_layout

\begin_layout Standard
The 
\bar under

\begin_inset Quotes eld
\end_inset

cssUnifyMinify
\begin_inset Quotes erd
\end_inset

 filter (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "css-unify-minify-route-type"

\end_inset

)
\bar default
 does the same for CSS files, with the default roots being the application's
 
\begin_inset Quotes eld
\end_inset

/resources/style/
\begin_inset Quotes erd
\end_inset

 subdirectory and the container's 
\begin_inset Quotes eld
\end_inset

/libraries/web/style/
\begin_inset Quotes erd
\end_inset

 directory.
 The relevant files are 
\begin_inset Quotes eld
\end_inset

all.css
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

all.min.css
\begin_inset Quotes erd
\end_inset

.
 Note, however, that similar functionality is provided by using 
\bar under
ZUSS (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "static-resources-zuss-to-css"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Standard
Here's an example with both filters configured:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	'/*': {
\end_layout

\begin_layout Plain Layout

		type: 'javaScriptUnifyMinify',
\end_layout

\begin_layout Plain Layout

		next: {
\end_layout

\begin_layout Plain Layout

			type: 'cssUnifyMinify',
\end_layout

\begin_layout Plain Layout

			next: 'static'
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Usage in HTML:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<head>
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	<link rel="stylesheet" type="text/css" href="/style/all.min.css" />
\end_layout

\begin_layout Plain Layout

</head>
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
ZUSS to CSS
\begin_inset CommandInset label
LatexCommand label
name "static-resources-zuss-to-css"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "ZUSS"
target "https://github.com/tomyeh/ZUSS"

\end_inset

 is a extended CSS language, inspired by 
\begin_inset CommandInset href
LatexCommand href
name "LESS"
target "http://lesscss.org/"

\end_inset

 and 
\begin_inset CommandInset href
LatexCommand href
name "SASS"
target "http://sass-lang.com/"

\end_inset

.
 It greatly increases the power of CSS by allowing for code re-usability,
 variables and expressions, as well as nesting CSS.
 Using the the 
\bar under

\begin_inset Quotes eld
\end_inset

zuss
\begin_inset Quotes erd
\end_inset

 filter (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "zuss-route-type"

\end_inset

)
\bar default
 you can compile 
\begin_inset Quotes eld
\end_inset

.zuss
\begin_inset Quotes erd
\end_inset

 files to CSS, and also apply the same minifier used by 
\bar under

\begin_inset Quotes eld
\end_inset

cssUnifyMinify
\begin_inset Quotes erd
\end_inset

 (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "css-unify-minify-route-type"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Standard
To configure:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	'/*': {
\end_layout

\begin_layout Plain Layout

		type: 'zuss',
\end_layout

\begin_layout Plain Layout

		next: 'static'
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The filter works by catching all URLs ending in 
\begin_inset Quotes eld
\end_inset

.css
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

.min.css
\begin_inset Quotes erd
\end_inset

.
 It will then try to find an equivalent 
\begin_inset Quotes eld
\end_inset

.zuss
\begin_inset Quotes erd
\end_inset

 file, and if it does, will compile it and produce the equivalent 
\begin_inset Quotes eld
\end_inset

.css
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

.min.css
\begin_inset Quotes erd
\end_inset

 file.
 It makes sure to recompile if the source 
\begin_inset Quotes eld
\end_inset

.zuss
\begin_inset Quotes erd
\end_inset

 file is changed.
\end_layout

\begin_layout Standard
For a usage example, let's say we have a 
\begin_inset Quotes eld
\end_inset

/resources/style/dark/main.zuss
\begin_inset Quotes erd
\end_inset

 file the application's subdirectory.
 Your HTML files can then include something like this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<head>
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	<link rel="stylesheet" type="text/css" href="/style/dark/main.min.css" />
\end_layout

\begin_layout Plain Layout

</head>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

zuss
\begin_inset Quotes erd
\end_inset

 filter can be configured with a 
\begin_inset Quotes eld
\end_inset

roots
\begin_inset Quotes erd
\end_inset

 param similarly to the 
\bar under

\begin_inset Quotes eld
\end_inset

javaScriptMinifyUnify
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

cssUnifyMinify
\begin_inset Quotes erd
\end_inset

 (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "static-resources-javascript-and-css-optimization"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Subsection
Resources As Internal APIs
\begin_inset CommandInset label
LatexCommand label
name "internal-api"

\end_inset


\end_layout

\begin_layout Standard
See the 
\bar under
internal URI-space (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "internal-uri-space"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Standard
document.internal
\end_layout

\begin_layout Standard
Prudence.Resources.request
\end_layout

\begin_layout Standard
Optimizing using application/java MIME type
\end_layout

\begin_layout Subsection
Tricks
\end_layout

\begin_layout Subsubsection
Browser Downloads
\end_layout

\begin_layout Standard
You can create browser-friendly downloadable responses using the conversation.dis
position API:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Item,Cost,Sold,Profit
\end_layout

\begin_layout Plain Layout

Keyboard,$10.00,$16.00,$6.00
\end_layout

\begin_layout Plain Layout

Monitor,$80.00,$120.00,$40.00
\end_layout

\begin_layout Plain Layout

Mouse,$5.00,$7.00,$2.00
\end_layout

\begin_layout Plain Layout

,,Total,$48.00
\end_layout

\begin_layout Plain Layout

<%
\end_layout

\begin_layout Plain Layout

conversation.mediaTypeName = 'text/csv'
\end_layout

\begin_layout Plain Layout

conversation.disposition.type = 'attachment'
\end_layout

\begin_layout Plain Layout

conversation.disposition.filename = bill.csv'
\end_layout

\begin_layout Plain Layout

%>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most web browsers would recognize the MIME type and offer the user to either
 download the file with the suggested 
\begin_inset Quotes eld
\end_inset

bill.csv
\begin_inset Quotes erd
\end_inset

 filename, or open it in a supporting application, such as a spreadsheet
 editor.
\end_layout

\begin_layout Section
Background Tasks
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Subsection
crontab
\begin_inset CommandInset label
LatexCommand label
name "crontab"

\end_inset


\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Subsection
Task API
\begin_inset CommandInset label
LatexCommand label
name "task-api"

\end_inset


\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Section
Accepting Uploads
\begin_inset CommandInset label
LatexCommand label
name "accepting-uploads"

\end_inset


\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Section
Cookies
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Section
Caching
\begin_inset CommandInset label
LatexCommand label
name "caching"

\end_inset


\end_layout

\begin_layout Subsection
Introduction: Integrated Caching
\end_layout

\begin_layout Subsection
Two Caching Strategies
\end_layout

\begin_layout Standard
The default Prudence application template is configured for very minimal
 caching, which is suitable for development deployments.
 However, once you are ready to move your application to production or staging,
 you will likely want a more robust caching strategy.
\end_layout

\begin_layout Standard
We will here present two common strategies, and discuss the pros and cons
 of each.
\end_layout

\begin_layout Subsubsection
Cautious: Short-Term Caching
\end_layout

\begin_layout Standard
This is a great strategy if you're 
\emph on
not
\emph default
 feeling very confident about managing caching in your application logic.
 Perhaps you have too many different kinds of pages requiring different
 caching strategies.
 Perhaps you can't maintain the strict discipline required for more aggressive
 caching, due to a quickly changing application structure (
\begin_inset Quotes eld
\end_inset

agile
\begin_inset Quotes erd
\end_inset

?) or third-party constraints.
\end_layout

\begin_layout Standard
If you're in that boat, short-term caching is recommended over no caching
 at all, because it would still offer better performance and scalability.
 Because caching is short-term, any mistakes you make won't last for very
 long, and can quickly be fixed.
\end_layout

\begin_layout Standard
How short a term depends on two factors: 1) usage patterns for your web
 site, and 2) the content update frequency.
\end_layout

\begin_layout Standard
If a user tends to spend about an hour browsing your site, then a one-hour
 duration
\end_layout

\begin_layout Standard
routing.js:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	'/*': [
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			type: 'scriptlet',
\end_layout

\begin_layout Plain Layout

			clientCachingMode: 'conditional' // this is actually the default
\end_layout

\begin_layout Plain Layout

		},
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			type: 'cacheControl',
\end_layout

\begin_layout Plain Layout

			mediaTypes: {
\end_layout

\begin_layout Plain Layout

				'image/png': '1h',
\end_layout

\begin_layout Plain Layout

				'image/gif': '1h',
\end_layout

\begin_layout Plain Layout

				'image/jpeg': '1h',
\end_layout

\begin_layout Plain Layout

				'text/css': '1h',
\end_layout

\begin_layout Plain Layout

				'application/x-javascript': '1h'
\end_layout

\begin_layout Plain Layout

			},
\end_layout

\begin_layout Plain Layout

			next: {
\end_layout

\begin_layout Plain Layout

				type: 'zuss',
\end_layout

\begin_layout Plain Layout

				next: 'static'
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
settings.js:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

document.executeOnce('/sincerity/localization/')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

app.globals = {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	cacheDuration = '1m'.toMilliseconds()
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Selectively Disabling Caching
\end_layout

\begin_layout Subsubsection
Confident: Indefinite Caching
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	'/*': [
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			type: 'scriptlet',
\end_layout

\begin_layout Plain Layout

			clientCachingMode: 'offline',
\end_layout

\begin_layout Plain Layout

			maxClientCachingDuration: '5m'.toMilliseconds()
\end_layout

\begin_layout Plain Layout

		},
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			type: 'cacheControl',
\end_layout

\begin_layout Plain Layout

			mediaTypes: {
\end_layout

\begin_layout Plain Layout

				'image/png': 'farFuture',
\end_layout

\begin_layout Plain Layout

				'image/gif': 'farFuture',
\end_layout

\begin_layout Plain Layout

				'image/jpeg': 'farFuture',
\end_layout

\begin_layout Plain Layout

				'text/css': 'farFuture',
\end_layout

\begin_layout Plain Layout

				'application/x-javascript': 'farFuture'
\end_layout

\begin_layout Plain Layout

			},
\end_layout

\begin_layout Plain Layout

			next: {
\end_layout

\begin_layout Plain Layout

				type: 'zuss',
\end_layout

\begin_layout Plain Layout

				next: 'static'
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		},
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Paranoid: No Caching
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.routes = {
\end_layout

\begin_layout Plain Layout

	'/*': [
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			type: 'scriptlet',
\end_layout

\begin_layout Plain Layout

			clientCachingMode: 'disabled'
\end_layout

\begin_layout Plain Layout

		},
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			type: 'zuss',
\end_layout

\begin_layout Plain Layout

			next: 'static'
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		...
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Server-Side Caching
\begin_inset CommandInset label
LatexCommand label
name "server-side-caching"

\end_inset


\end_layout

\begin_layout Standard
TODO: write the manual.
\end_layout

\begin_layout Standard
The APIs:
\end_layout

\begin_layout Subsubsection
document.cacheDuration
\end_layout

\begin_layout Subsubsection
document.cacheTags
\end_layout

\begin_layout Subsubsection
document.cacheKeyPattern
\end_layout

\begin_layout Subsubsection
document.cacheKey
\end_layout

\begin_layout Subsection
Client-Side Caching
\begin_inset CommandInset label
LatexCommand label
name "client-side-caching"

\end_inset


\end_layout

\begin_layout Subsubsection
Conditional Requests
\end_layout

\begin_layout Standard
HTTP clients, such as web browsers, store downloaded content in their local
 cache, marking it with a modification date and tag according to HTTP headers
 in the response.
 Subsequent requests to the same URL will be “conditional,” meaning that
 the client will tell the server what the latest modification date it has.
 If the server does not have new data, then it returns an empty response
 with the 304 “not modified” HTTP status, letting the client know that it
 is safe to use its cached version.
 This saves both bandwidth and processing resources on the server.
\end_layout

\begin_layout Standard
To support conditional requests, you have to explicitly set at least one
 of 
\bar under
conversation.modificationDate (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|conversation-modification-date"

\end_inset

)
\bar default
 and 
\bar under
conversation.tag (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|conversation-tag"

\end_inset

)
\bar default
.
 If you implement 
\bar under
handleGetInfo (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "handle-get-info"

\end_inset

)
\bar default
, you should be returning one of these values instead.
\end_layout

\begin_layout Standard
Note that these attributes are ignored in case you are constructing and
 returning your own 
\begin_inset CommandInset href
LatexCommand href
name "Representation instance"
target "http://www.restlet.org/documentation/2.0/jse/api/index.html?org/restlet/representation/Representation.html"

\end_inset

.
\end_layout

\begin_layout Paragraph
Client Caching
\end_layout

\begin_layout Standard
Though clients rely on a local cache for conditional requests, you can provide
 them with additional caching directives.
 In Prudence, you can control the expiration of the client's cached entry
 with 
\bar under
conversation.maxAge (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|conversation-max-age"

\end_inset

)
\bar default
 or 
\bar under
conversation.expirationDate (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|conversation-expiration-date"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Standard
Explicitly setting cache directives has an important side effect: most clients
 will 
\emph on
not
\emph default
 send conditional HTTP requests for the cached data until the cache entry
 expires.
 This allows you to save bandwidth and improves client performance, but
 at the expense of not being able to update the client upon changes.
 Use with care.
\end_layout

\begin_layout Section
Filtering
\begin_inset CommandInset label
LatexCommand label
name "filtering"

\end_inset


\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Subsection
How Routing Works
\end_layout

\begin_layout Subsection
Injection
\end_layout

\begin_layout Subsection
Built-in Filters
\end_layout

\begin_layout Section
Configuring Applications
\end_layout

\begin_layout Standard
Prudence application's live in their own subdirectory under 
\begin_inset Quotes eld
\end_inset

/component/applications/
\begin_inset Quotes erd
\end_inset

.
 The subdirectory name itself can be considered a setting, as it is used
 as a default identifier for the application in various use cases.
\end_layout

\begin_layout Standard
Prudence uses 
\begin_inset Quotes eld
\end_inset

configuration-by-script
\begin_inset Quotes erd
\end_inset

 almost everywhere: configuration files are true JavaScript source code,
 meaning that you can do pretty much anything you need during the bootstrap
 process, allowing for dynamic configurations that adjust to their working
 environments.
\end_layout

\begin_layout Quote
Prudence, as of version 2.0, does not support live re-configuring of applications.
 You must restart Prudence in order for changed settings to take hold.
 The one exception is 
\bar under
crontab (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "crontab"

\end_inset

)
\bar default
: changes there are picked up on-the-fly once per minute.
\end_layout

\begin_layout Subsubsection
Overview
\end_layout

\begin_layout Standard
The subdirectory contains five main configuration files:
\end_layout

\begin_layout Itemize

\series bold
settings.js
\series default
: This required file, detailed in this chapter, includes settings used by
 Prudence as well as your own custom settings.
\end_layout

\begin_layout Itemize

\series bold
routing.js
\series default
: This required file defines the application's 
\bar under
URI-space (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "the-uri-space"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Itemize

\series bold
crontab
\series default
: This optional file defines 
\bar under
regularly scheduled background tasks (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "crontab"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Itemize

\series bold
default.js
\series default
: This required file is used to load the other configuration files above.
 You should not normally need to edit this file, but feel free to examine
 it to understand the application bootstrapping process.
\end_layout

\begin_layout Subsection
settings.js
\end_layout

\begin_layout Standard
If you use the default template with the 
\begin_inset Quotes eld
\end_inset

sincerity prudence create
\begin_inset Quotes erd
\end_inset

 command, you should get a setting.js file that looks something like this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.settings = {
\end_layout

\begin_layout Plain Layout

	description: {
\end_layout

\begin_layout Plain Layout

		name: 'myapp',
\end_layout

\begin_layout Plain Layout

		description: 'Skeleton for myapp application',
\end_layout

\begin_layout Plain Layout

		author: 'The Author',
\end_layout

\begin_layout Plain Layout

		owner: 'The Project'
\end_layout

\begin_layout Plain Layout

	},
\end_layout

\begin_layout Plain Layout

	errors: {
\end_layout

\begin_layout Plain Layout

		debug: true,
\end_layout

\begin_layout Plain Layout

		homeUrl: 'http://threecrickets.com/prudence/', // Only used when debug=false
\end_layout

\begin_layout Plain Layout

		contactEmail: 'info@threecrickets.com' // Only used when debug=false
\end_layout

\begin_layout Plain Layout

	}, 
\end_layout

\begin_layout Plain Layout

	code: {
\end_layout

\begin_layout Plain Layout

		libraries: ['libraries'], // Handlers and tasks will be found here
\end_layout

\begin_layout Plain Layout

		defrost: true,
\end_layout

\begin_layout Plain Layout

		minimumTimeBetweenValidityChecks: '1s',
\end_layout

\begin_layout Plain Layout

		defaultDocumentName: 'default',
\end_layout

\begin_layout Plain Layout

		defaultExtension: 'js',
\end_layout

\begin_layout Plain Layout

		defaultLanguageTag: 'javascript',
\end_layout

\begin_layout Plain Layout

		sourceViewable: true
\end_layout

\begin_layout Plain Layout

	}, 
\end_layout

\begin_layout Plain Layout

	uploads: {
\end_layout

\begin_layout Plain Layout

		root: 'uploads',
\end_layout

\begin_layout Plain Layout

		sizeThreshold: '0kb'
\end_layout

\begin_layout Plain Layout

	}, 
\end_layout

\begin_layout Plain Layout

	mediaTypes: {
\end_layout

\begin_layout Plain Layout

		php: 'text/html'
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that some values can be specified as either numbers or string:
\end_layout

\begin_layout Itemize
Durations: numerically as milliseconds, or using 'ms', 's', 'm', 'h' or
 'd' suffixes for milliseconds, seconds, minutes, hours or days.
 Fractions can be used, for example: 
\begin_inset Quotes eld
\end_inset

1.5d
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
Data sizes: numerically as bytes, or using 'b', 'kb', 'mb', 'gb' or 'tb'
 suffixes.
 Magnitude uses the binary system: 1kb = 1024b.
 Fractions can be used, for example: 
\begin_inset Quotes eld
\end_inset

1.5mb
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsubsection
app.settings.description
\end_layout

\begin_layout Standard
Information here is meant for humans.
 It appears in the Prudence Administration application.
\end_layout

\begin_layout Subsubsection
app.settings.errors
\end_layout

\begin_layout Standard
How should Prudence deal with errors in your application?
\end_layout

\begin_layout Standard
When 
\begin_inset Quotes eld
\end_inset

debug
\begin_inset Quotes erd
\end_inset

 is true, Prudence will return a very detailed 
\bar under
debug page (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "debug-page"

\end_inset

)
\bar default
 in HTML for uncaught exceptions in your code.
 Because this can reveal your application's internal data, 
\series bold
make sure to set 
\begin_inset Quotes eld
\end_inset

debug
\begin_inset Quotes erd
\end_inset

 to false for production deployments
\series default
.
 Debug mode also enables scriptlet resource debugging: under your container's
 
\begin_inset Quotes eld
\end_inset

/cache/scripturian/
\begin_inset Quotes erd
\end_inset

 directory you will see the generated source code for each resource.
\end_layout

\begin_layout Standard
When 
\begin_inset Quotes eld
\end_inset

debug
\begin_inset Quotes erd
\end_inset

 is false, a generic error page will be returned instead, using 
\begin_inset Quotes eld
\end_inset

homeUrl
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

contactEmail
\begin_inset Quotes erd
\end_inset

 in its template.
 Alternatively, you can also route your own custom error pages using 
\bar under

\begin_inset Quotes eld
\end_inset

app.errors
\begin_inset Quotes erd
\end_inset

 in routing.js (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "app-errors"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Subsubsection
app.settings.code
\end_layout

\begin_layout Standard
Here you can control how Prudence deals with your code:
\end_layout

\begin_layout Itemize

\series bold
libraries
\series default
: An array of paths where importable libraries will be found.
 If relative, they will be based on the application's root subdirectory.
\end_layout

\begin_layout Itemize

\series bold
defrost
\series default
: When true will attempt to 
\begin_inset Quotes eld
\end_inset

defrost
\begin_inset Quotes erd
\end_inset

 manual and scriptlet resources under the 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

 subdirectory.
 Defrosting means pre-parsing and sometimes pre-compiling the code: this
 allows for faster startup times on first hits to these resources.
 Note that defrosting is 
\emph on
not
\emph default
 pre-heating: the former only pre-compiles, the latter actually does a 
\begin_inset Quotes eld
\end_inset

GET
\begin_inset Quotes erd
\end_inset

 on your resources, which would ensure that services used by your resources
 are also warmed up.
 See 
\bar under

\begin_inset Quotes eld
\end_inset

app.preheat
\begin_inset Quotes erd
\end_inset

 (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "app-preheat"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Itemize

\series bold
minimumTimeBetweenValidityChecks
\series default
: Scripturian makes sure to reload (and thus re-compile) code if the source
 files are changed, for which it compares the file's modification dates
 to the cached values.
 For high-volume deployments, this might involve constantly checking the
 filesystem, potentially resulting in performance problems on some operating
 systems.
 This value allows you to enforce a delay between these checks.
 It's a good idea to set it to anything greater than zero.
\end_layout

\begin_layout Itemize

\series bold
defaultDocumentName
\series default
: When a document name specifies to a directory, Scripturian will internally
 change the specification to a document with this name in the subdirectory
 (excluding the extension).
 Example, if the value is 
\begin_inset Quotes eld
\end_inset

default
\begin_inset Quotes erd
\end_inset

 and you are calling 
\begin_inset Quotes eld
\end_inset

document.require('/mylibrary/')
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

/libraries/mylibrary/
\begin_inset Quotes erd
\end_inset

 is a directory, the it would specify 
\begin_inset Quotes eld
\end_inset

/libraries/mylibrary/default.*
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize

\series bold
defaultExtension
\series default
: If more than one file in a directory has the same name but different extension
s, then this extension will be preferred.
 For example, if the value is 
\begin_inset Quotes eld
\end_inset

js
\begin_inset Quotes erd
\end_inset

 and a directory has both 
\begin_inset Quotes eld
\end_inset

mylibrary.js
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

mylibrary.py
\begin_inset Quotes erd
\end_inset

, then the former file will be preferred.
\end_layout

\begin_layout Itemize

\series bold
defaultLanguageTag
\series default
: If a scriptlet tag does not specify a language, then this value will be
 the default.
\end_layout

\begin_layout Subsubsection
app.settings.uploads
\end_layout

\begin_layout Standard
Configure 
\bar under
file upload behavior (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "accepting-uploads"

\end_inset

)
\bar default
 here:
\end_layout

\begin_layout Itemize

\series bold
root
\series default
: This is where uploaded files are stored.
 If relative, it will be based on the application's root subdirectory.
\end_layout

\begin_layout Itemize

\series bold
sizeThreshold
\series default
: The file upload mechanism can optimize by caching small files in memory
 instead of saving them to disk.
 Only if files are greater in size will be they be stored.
 Set to zero to save all files to disk.
\end_layout

\begin_layout Subsubsection
app.settings.mediaTypes
\begin_inset CommandInset label
LatexCommand label
name "settings-media-types"

\end_inset


\end_layout

\begin_layout Standard
This dict maps filename extensions to MIME types.
\end_layout

\begin_layout Standard
Prudence recognizes many common file types by default: for example, 
\begin_inset Quotes eld
\end_inset

png
\begin_inset Quotes erd
\end_inset

 is mapped to 
\begin_inset Quotes eld
\end_inset

image/png
\begin_inset Quotes erd
\end_inset

.
 However, using this setting you can define additional mappings or change
 the default ones.
 Note that each filename extension can be mapped to one 
\emph on
and only one
\emph default
 MIME type.
\end_layout

\begin_layout Standard
This setting is used mostly for scriptlet and 
\bar under
static resources (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "static-resources-controlling-the-format"

\end_inset

)
\bar default
.
 For example, a scriptlet resource named 
\begin_inset Quotes eld
\end_inset

person.s.html
\begin_inset Quotes erd
\end_inset

 will have the default 
\begin_inset Quotes eld
\end_inset

text/html
\begin_inset Quotes erd
\end_inset

 MIME type (which you can change in scriptlet code via the conversation.mediaType
 APIs), and a static resource named 
\begin_inset Quotes eld
\end_inset

logo.png
\begin_inset Quotes erd
\end_inset

 will have the 
\begin_inset Quotes eld
\end_inset

image/png
\begin_inset Quotes erd
\end_inset

 MIME type.
\end_layout

\begin_layout Standard
For manual resources, you define their supported MIME types manually in
 
\bar under
handleInit (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "handle-init"

\end_inset

)
\bar default
.
 There, you can refer to MIME types directly via the conversation.addMediaTypeByN
ame API, or you can look them up from this setting using the conversation.addMedi
aTypeByExtension API.
\end_layout

\begin_layout Subsubsection
app.globals
\end_layout

\begin_layout Standard
Use this for custom settings for your application: values here will become
 application.globals when your application is running.
\end_layout

\begin_layout Standard
Note that this dict is 
\begin_inset Quotes eld
\end_inset

flattened
\begin_inset Quotes erd
\end_inset

 using dot separators.
 For example, the following:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.globals = {
\end_layout

\begin_layout Plain Layout

	database: {
\end_layout

\begin_layout Plain Layout

		driver: 'mysql',
\end_layout

\begin_layout Plain Layout

		table: {
\end_layout

\begin_layout Plain Layout

			db: 'myapp',
\end_layout

\begin_layout Plain Layout

			name: 'users'
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\SpecialChar \ldots{}
would be interpreted as if it were:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

app.globals = {
\end_layout

\begin_layout Plain Layout

	'database.driver': 'mysql',
\end_layout

\begin_layout Plain Layout

	'database.table.db': 'myapp',
\end_layout

\begin_layout Plain Layout

	'database.table.name': 'users'
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Configuring the Component
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Standard
Order: applications, services, starts component, then runs initialization
 tasks
\end_layout

\begin_layout Subsection
/component/servers/
\end_layout

\begin_layout Standard
See 
\bar under
configuring servers (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "servers"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Subsection
/component/clients/
\end_layout

\begin_layout Subsection
/component/hosts/
\end_layout

\begin_layout Standard
See 
\bar under
configuring hosts (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "hosts"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Subsection
/component/services/
\end_layout

\begin_layout Standard
Run 
\emph on
after
\emph default
 the component is configured but 
\emph on
before
\emph default
 it is started.
\end_layout

\begin_layout Subsubsection
/component/services/prudence/caching
\end_layout

\begin_layout Standard
Configure the caching backend
\end_layout

\begin_layout Subsubsection
/component/services/prudence/distributed
\end_layout

\begin_layout Standard
Load the Hazelcast configuration
\end_layout

\begin_layout Subsubsection
/component/services/prudence/executor
\end_layout

\begin_layout Standard
Configures thread pools for task execution.
\end_layout

\begin_layout Subsubsection
/component/services/log
\end_layout

\begin_layout Standard
Configures the component's log service, which is used for logging client
 requests.
 (By default web.log)
\end_layout

\begin_layout Subsubsection
/component/services/prudence/singleton
\end_layout

\begin_layout Standard
Prudence assumes a single Restlet Component instance.
 If for some reason you have a more complex setup, you can configure Prudence's
 initialization here.
\end_layout

\begin_layout Subsubsection
/component/services/prudence/scheduler
\end_layout

\begin_layout Standard
Configure the cron scheduler (cron4j)
\end_layout

\begin_layout Subsubsection
/component/services/prudence/status
\end_layout

\begin_layout Standard
Configures Restlet's status service to use Prudence's implementation.
\end_layout

\begin_layout Subsubsection
/component/services/prudence/version
\end_layout

\begin_layout Standard
Provides access to Prudence and Restlet versions.
\end_layout

\begin_layout Subsection
/component/templates/
\end_layout

\begin_layout Section
Servers and Hosts
\end_layout

\begin_layout Standard
Restlet has excellent virtual host support, and there is a many-to-many
 relationship routing between almost servers, hosts and application.
 So, you can easily have a single Prudence container (running in a single
 JVM instance) managing several sites at once with several applications
 on several domains on several servers.
\end_layout

\begin_layout Subsection
Configuring Servers
\begin_inset CommandInset label
LatexCommand label
name "servers"

\end_inset


\end_layout

\begin_layout Standard
Define your servers under 
\begin_inset Quotes eld
\end_inset

/component/servers/
\begin_inset Quotes erd
\end_inset

.
 At the simplest, you just add a new file and assign a port for it.
 A minimal server definition for HTTP:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var server = new Server(Protocol.HTTP, 8080)
\end_layout

\begin_layout Plain Layout

server.name = 'myserver'
\end_layout

\begin_layout Plain Layout

component.servers.add(server)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can also bind a server to a specific IP address, in case your machine
 has more than one IP address:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

server.address = [string]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are also many configuration parameters for Jetty, the HTTP engine,
 which you can set in the server's context.
 Here we configure the size of the thread pool:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

server.context.parameters.set('minThreads', '6')
\end_layout

\begin_layout Plain Layout

server.context.parameters.set('maxThreads', '12')
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here we switch to a blocking server:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

server.context.parameters.set('type', '1') // blocking NIO
\end_layout

\end_inset


\end_layout

\begin_layout Standard
See Jetty's 
\begin_inset CommandInset href
LatexCommand href
name "HttpServerHelper"
target "http://restlet.org/learn/javadocs/2.1/jse/ext/org/restlet/ext/jetty/HttpServerHelper.html"

\end_inset

 as well as all inherited parameters from the parent classes.
\end_layout

\begin_layout Subsubsection
Secure Servers (HTTPS)
\begin_inset CommandInset label
LatexCommand label
name "secure-servers"

\end_inset


\end_layout

\begin_layout Standard
If you are using a 
\bar under
load balancer or another kind of proxy (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "proxying"

\end_inset

)
\bar default
, it may make sense to handle secure connections there.
 But Prudence can also handle secure (HTTPS) connections itself.
 Here's an example configuration for 
\begin_inset Quotes eld
\end_inset

/component/servers/https.js
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

var server = new Server(Protocol.HTTPS, 443)
\end_layout

\begin_layout Plain Layout

server.name = 'secure'
\end_layout

\begin_layout Plain Layout

component.servers.add(server)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Configure it to use our security keys
\end_layout

\begin_layout Plain Layout

server.context.parameters.set('keystorePath', '/path/prudence.jks')
\end_layout

\begin_layout Plain Layout

server.context.parameters.set('keystorePassword', 'mykeystorepassword')
\end_layout

\begin_layout Plain Layout

//server.context.parameters.set('keyPassword', 'mykeypassword')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Add support for the X-FORWARDED-FOR header used by proxies
\end_layout

\begin_layout Plain Layout

server.context.parameters.set('useForwardedForHeader', 'true')
\end_layout

\end_inset


\end_layout

\begin_layout Standard
See the 
\begin_inset CommandInset href
LatexCommand href
name "Restlet Jetty HttpServerHelper documentation"
target "http://restlet.org/learn/javadocs/2.1/jse/ext/index.html?org/restlet/ext/ssl/DefaultSslContextFactory.html"

\end_inset

 for all secuirty configuration parameters.
\end_layout

\begin_layout Paragraph
Security Keys
\end_layout

\begin_layout Standard
The above configuration assumes the you have a Java KeyStore (JKS) file
 at “/path/prudence.jks” containing your security key.
 You can create a key using the 
\begin_inset CommandInset href
LatexCommand href
name "“keytool” utility"
target "http://docs.oracle.com/javase/1.5.0/docs/tooldocs/index.html#security"

\end_inset

 that is bundled with most JVMs.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

keytool -keystore /path/prudence.jks -alias mykey -genkey -keyalg RSA
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When creating the keystore, you will be asked provide a password for it,
 and you may optionally provide a password for your key, too, in which case
 you need to comment out the relevant line in the example above.
 (The key alias and key password would be transferred together with the
 key if you move it to a different keystore.)
\end_layout

\begin_layout Standard
Such self-created keys are useful for controlled intranet environments,
 in which you can provide clients with the public key, but for Internet
 applications you will likely want a key created by one of the “certificate
 authorities” trusted by most web browsers.
 Some of these certificate authorities may conveniently let you download
 a key in JKS format.
 Otherwise, if they support PKCS12 format, you can use keytool (only JVM
 version 6 and later) to convert PKCS12 to JKS.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

keytool -importkeystore -srcstoretype PKCS12 -srckeystore /path/prudence.pkcs12
 -destkeystore /path/prudence.jks
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If your certificate authority won't even let you download PKCS12 file, you
 can create one from your “.key” and “.crt” (or “.pem”) files using 
\begin_inset CommandInset href
LatexCommand href
name "OpenSSL"
target "http://www.openssl.org/"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

openssl pkcs12 -inkey /path/mykey.key -in /path/mykey.crt -export -out /path/prude
nce.pkcs12 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
(Note that in this case you 
\emph on
must
\emph default
 give your new PKCS12 a non-empty password, or else keytool will fail with
 an unhelpful error message.)
\end_layout

\begin_layout Paragraph
Handling HTTPS
\end_layout

\begin_layout Standard
It's sometimes necessary to support HTTPS specially in your implementation.
 One useful strategy is to create separate applications for HTTP and HTTPS,
 and then attach them to different 
\bar under
virtual hosts (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "hosts"

\end_inset

)
\bar default
, one for each protocol (the 
\begin_inset Quotes eld
\end_inset

resourceScheme
\begin_inset Quotes erd
\end_inset

 parameter).
 However, if the application behaves mostly the same for HTTP and HTTPS,
 but differs only in a few specific resources, it may be useful to check
 for HTTPS programatically.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

if (conversation.reference.schemeProtocol.name == 'HTTPS') {
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Configuring Hosts
\begin_inset CommandInset label
LatexCommand label
name "hosts"

\end_inset


\end_layout

\begin_layout Standard
Define you virtual hosts under 
\begin_inset Quotes eld
\end_inset

/component/hosts/
\begin_inset Quotes erd
\end_inset

.
 A minimal host definition:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var host = new VirtualHost(component.context)
\end_layout

\begin_layout Plain Layout

host.name = 'privatehost'
\end_layout

\begin_layout Plain Layout

component.hosts.add(host)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

host.name
\begin_inset Quotes erd
\end_inset

 param exactly matches the string used in 
\bar under
app.hosts (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "app-hosts"

\end_inset

)
\bar default
 per each application.
\end_layout

\begin_layout Standard
A virtual host can route according to domain name, and incoming server IP
 address and port assignment:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

host.resourceScheme = [string]
\end_layout

\begin_layout Plain Layout

host.resourceDomain = [string]
\end_layout

\begin_layout Plain Layout

host.resourcePort = [string]
\end_layout

\begin_layout Plain Layout

host.serverAddress = [string]
\end_layout

\begin_layout Plain Layout

host.serverPort = [string]
\end_layout

\begin_layout Plain Layout

host.hostScheme = [string]
\end_layout

\begin_layout Plain Layout

host.hostDomain = [string]
\end_layout

\begin_layout Plain Layout

host.hostPort = [string]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
“*” wildcards are supported for all of these properties.
 Some notes:
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

resourceScheme
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

resourceDomain
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

resourcePort
\begin_inset Quotes erd
\end_inset

 refer to the actual incoming URI.
 Thus 
\begin_inset Quotes eld
\end_inset

resourcePort
\begin_inset Quotes erd
\end_inset

 would be meaningful 
\emph on
only if
\emph default
 URIs explicitly include a port number.
 To match a host to a specific server you would likely want to use 
\begin_inset Quotes eld
\end_inset

serverPort
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

hostScheme
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

hostDomain
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

hostPort
\begin_inset Quotes erd
\end_inset

 are for matching the 
\begin_inset Quotes eld
\end_inset

Host
\begin_inset Quotes erd
\end_inset

 HTTP header used by some proxies.
\end_layout

\begin_layout Subsubsection
The Hungry Host
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

default
\begin_inset Quotes erd
\end_inset

 host that comes with the Prudence skeleton doesn't configure any routing
 limitations, meaning that 
\emph on
all
\emph default
 incoming requests are routed.
 We call such a host 
\begin_inset Quotes eld
\end_inset

hungry.
\begin_inset Quotes erd
\end_inset

 Thus, if you want to use more than one host, you have to make sure that
 the hungry host is the 
\emph on
last
\emph default
 one, so that it acts as a fallback for when other hosts don't match incoming
 requests.
 Otherwise, it would 
\begin_inset Quotes eld
\end_inset

eat
\begin_inset Quotes erd
\end_inset

 requests from other hosts.
 Because host files are executed in alphabetical order, a good way to ensure
 that the hungry host is last is to number your host filenames.
 For example:
\end_layout

\begin_layout Itemize
1-public.js
\end_layout

\begin_layout Itemize
2-private.js
\end_layout

\begin_layout Itemize
3-default.js (this is the hungry host)
\end_layout

\begin_layout Subsubsection
Deploying Multiple Sites
\end_layout

\begin_layout Standard
Using the virtual hosts and application model, Prudence can let you manage
 several sites using a single Prudence installation (a 
\begin_inset Quotes eld
\end_inset

container
\begin_inset Quotes erd
\end_inset

).
 But is this always a good idea?
\end_layout

\begin_layout Paragraph
Advantages of Using a Single Container
\end_layout

\begin_layout Enumerate
Possibly simpler deployment: you are using a single base directory for the
 entire project, which might be easier for you.
 Because all configuration is done by JavaScript inside the container, it
 is very flexible.
\end_layout

\begin_layout Enumerate
Less memory use than running multiple JVMs.
\end_layout

\begin_layout Enumerate
Shared memory: you can use application.sharedGlobals to share state between
 applications.
\end_layout

\begin_layout Paragraph
Advantages of Using Multiple Containers
\end_layout

\begin_layout Enumerate
Possibly simpler deployment: several base directories can mean separate
 code/distribution repositories, which might be easier for you.
 Configuration will be at your web frontend (reverse proxy).
\end_layout

\begin_layout Enumerate
Robustness: crashes/deadlocks/memory leaks in one VM won't affect others.
 With this in mind, it may even be worth having each 
\emph on
single application
\emph default
 running in its own JVM/container.
\end_layout

\begin_layout Enumerate
Run-time flexibility: you can restart the JVM for one container without
 affecting others that are running.
\end_layout

\begin_layout Standard
There is no performance advantage in either scenario.
 Everything in Prudence is designed around high-concurrency and threading,
 and generally threads are managed by the OS globally.
\end_layout

\begin_layout Quote
Well, there are caveats to that statement: Linux can group threads per running
 process for purposes of prioritization, but this is only really done for
 desktop applications.
 The feature could be possibly useful when running several containers, if
 you want to guarantee high thread priority to one of the containers over
 the others.
 Any of this would only effect 
\emph on
very
\emph default
 high concurrency and highly CPU-bound deployments.
\end_layout

\begin_layout Subsection
Routing In-Depth
\begin_inset CommandInset label
LatexCommand label
name "routing-in-depth"

\end_inset


\end_layout

\begin_layout Standard
In this final section, we'll describe in detail how routing works in Prudence.
 It can be considered optional, advanced reading.
\end_layout

\begin_layout Standard
In Prudence, “routing” refers to the decision-making process by which an
 incoming client request reaches its server-side handler .
 Usually, information in the request itself is used to make the decision,
 such as the URI, cookies, the client type, capabilities and geolocation.
 But routing can also take server-side and other circumstances into account.
 For example, a round-robin load-balancing router might send each incoming
 request to a different handler in sequence.
\end_layout

\begin_layout Standard
A request normally goes through many route types before reaching its handler.
 Filters along the way can change information in the request, which could
 also affect routing, and indeed filters can be used as routing tools.
\end_layout

\begin_layout Standard
This abstract, flexible routing mechanism is one of Prudence's most powerful
 features, but it's important to understand these basic principles.
 A common misconception is that routing is based on the hierarchical structure
 of URIs, such that a child URI's routing is somehow affected by its parent
 URI.
 While it's possible to explicitly design your routes hierarchically, routing
 is primarily to be understood in terms of the order of routers and filters
 along the way.
 A parent and child URI could thus use entirely different handlers.
\end_layout

\begin_layout Standard
To give you a better understanding of how Prudence routing works, let's
 follow the journey of a request, starting with routing at the server level.
\end_layout

\begin_layout Paragraph
Step 1: Servers
\end_layout

\begin_layout Standard
Requests come in from servers.
 Prudence instances have at the minimum one server, but can have more than
 one.
 Each server listens at a particular HTTP port, and multiple servers may
 in turn be restricted to particular network interfaces on your machine.
 By default, Prudence has a single server that listens to HTTP requests
 on port 8080 coming in from all network interfaces.
\end_layout

\begin_layout Paragraph
Step 2: The Component
\end_layout

\begin_layout Standard
There is only one component per Prudence instance, and 
\emph on
all 
\emph default
servers route to it.
 This allows Prudence a unified mechanism to deal with all incoming requests.
\end_layout

\begin_layout Paragraph
Step 3: Virtual Hosts
\end_layout

\begin_layout Standard
The component's router decides which virtual host should receive the request.
 The decision is often made according to the domain name in the URL, but
 can also take into account which server it came from.
 Virtual hosting is a tool to let you host multiple sites on the same Prudence
 instance, but it can be used for more subtle kinds of routing, too.
\end_layout

\begin_layout Standard
At the minimum you must have one virtual host.
 By default, Prudence has one that accepts all incoming requests from all
 servers.
 If you have multiple servers and want to treat them differently, you can
 create a virtual host for each.
\end_layout

\begin_layout Paragraph
Step 4: Applications
\end_layout

\begin_layout Standard
Using app.hosts, you can configure which virtual hosts your application will
 be attached to, and the base URI for the application on each virtual host.
 An application can accept requests from several virtual hosts at once.
\end_layout

\begin_layout Standard
To put it another way, there's a many-to-many relationship between virtual
 hosts and applications: one host can have many applications, and the same
 application can be attached to many hosts.
\end_layout

\begin_layout Standard
Note that you can create a “nested” URI scheme for your applications.
 For example, one application might be attached at the root URI at a certain
 virtual host, “/”, while other applications might be at different URIs
 beneath the root, “/wackywiki” and “/wackywiki/support/forum”.
 The root application will not “steal” requests from the other applications,
 because the request is routed to the right application by the virtual host.
 The fact that the latter URI is the hierarchical descendant of the former
 makes no difference to the virtual host router.
\end_layout

\begin_layout Paragraph
A Complete Route
\end_layout

\begin_layout Standard
Let's assume a client from the Internet send a request to URI “http://www.wacky.or
g/wackywicki/support/forum/thread/12/.”
\end_layout

\begin_layout Standard
Our machine has two network interfaces, one facing the Internet and one
 facing the intranet, and we have two servers to listen on each.
 This particular request has come in through the external server.
 The request reachers the component's router.
\end_layout

\begin_layout Standard
We have a few virtual hosts: one to handle “www.wacky.org”, our organization's
 main site, and another to handle “support.wacky.org”, a secure site where
 paying customers can open support tickets.
\end_layout

\begin_layout Standard
Our forum application (in the 
\begin_inset Quotes eld
\end_inset

/applications/forum/
\begin_inset Quotes erd
\end_inset

 subdirectory) is attached to both virtual hosts, but at different URIs.
 It's at “www.wacky.org/wackywiki/support/forum” and at “support.wacky.org/forum”.
 In this case, our request is routed to the first virtual host.
 Though there are a few applications installed at this virtual host, our
 request follows the route to the forum application.
\end_layout

\begin_layout Standard
The remaining part of the URI, “/thread/12/” will be further routed inside
 the forum application, according to route types installed in its routing.js.
\end_layout

\begin_layout Section
Working in a Cluster
\begin_inset CommandInset label
LatexCommand label
name "clusters"

\end_inset


\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Subsection
Distributed Globals
\end_layout

\begin_layout Subsection
Task Farming
\end_layout

\begin_layout Section
Programming
\end_layout

\begin_layout Subsection
Introduction: Scripturian
\end_layout

\begin_layout Subsection
JavaScript
\end_layout

\begin_layout Subsection
Other Languages
\end_layout

\begin_layout Subsection
Execution Environments
\end_layout

\begin_layout Subsubsection
Bootstrap
\end_layout

\begin_layout Standard
Straightforward beginning-to-end script
\end_layout

\begin_layout Standard
Except for initialization tasks
\end_layout

\begin_layout Subsubsection
Manual Resources and Handlers
\end_layout

\begin_layout Subsubsection
Scriptlet Resources
\end_layout

\begin_layout Subsubsection
Execute Resource
\end_layout

\begin_layout Subsubsection
Cron Tasks
\end_layout

\begin_layout Standard
Two options!
\end_layout

\begin_layout Subsection
Managing State
\end_layout

\begin_layout Standard
Prudence is designed to allow massive concurrency and scalability while
 at the same time shielding you from the gorier details.
 However, when it comes to sharing state between different parts of your
 code, it's critical that you understand Prudence's state services.
\end_layout

\begin_layout Subsubsection
conversation.locals
\begin_inset CommandInset label
LatexCommand label
name "conversation-locals"

\end_inset


\end_layout

\begin_layout Standard
These are not “local” in the same way that code scope locals are.
 The term “local” here should be read as “local to the conversation.” They
 are “global” in the sense that they can be accessed by any function in
 your code, but are “local” in the sense that they persist only for the
 duration of the user request.
 (Compare with “thread locals” in the JVM, which are also “local” in a specific
 sense.)
\end_layout

\begin_layout Standard
You may ask, then, why you wouldn't want to just use your language globals,
 which have similar scope and life.
 
\bar under
conversation.locals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|conversation-locals"

\end_inset

)
\bar default
 have three main uses in Prudence:
\end_layout

\begin_layout Enumerate
To easily share conversation-scope state between scriptlets written in different
 languages.
\end_layout

\begin_layout Enumerate
To share state for deferred conversations---see 
\bar under
conversation.defer (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|conversation-defer"

\end_inset

)
\bar default
.
 In such cases, your language's globals would not persist across the thread
 boundaries.
\end_layout

\begin_layout Enumerate
They are Prudence's general mechanism for sending state to your code in
 a conversation.
 For example, 
\bar under
captured URI segments are stored here (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../routing/|static-capturing"

\end_inset

)
\bar default
 as well as 
\bar under
document.cacheKeyPattern (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|document-cache-key-pattern"

\end_inset

)
\bar default
 variables.
\end_layout

\begin_layout Subsubsection
Global Variables
\begin_inset CommandInset label
LatexCommand label
name "global-variables"

\end_inset


\end_layout

\begin_layout Standard
You know how local variables work in your programming language: they exist
 only for the duration of a function call, after which their state is discarded.
 If you want state to persist beyond the function call, you use a global
 variable (or a “static” local, which is really a global).
\end_layout

\begin_layout Standard

\emph on
But in Prudence, you cannot expect global variables to persist beyond a
 user request.

\emph default
 To put it another way, you should consider every single user request as
 a separate “program” with its own global state.
 See the “life” sections for 
\bar under
generating HTML (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../generating-html/|life"

\end_inset

)
\bar default
 and 
\bar under
resources (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../resources/|life"

\end_inset

)
\bar default
 for more information on when this global state is created and discarded.
 If you need global variables to persist, you must use 
\bar under
application.globals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|application-globals"

\end_inset

)
\bar default
, 
\bar under
application.sharedGlobals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|application-shared-globals"

\end_inset

)
\bar default
 or even 
\bar under
application.distributedGlobals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|application-distributed-globals"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Standard
Why does Prudence discard your language's globals? This has to do with allowing
 for concurrency while shielding you from the complexity of having to guarantee
 the thread-safety of your code.
 By making each user request a separate “program,” you don't have to worry
 about overlapping shared state, coordinating thread access, etc., for every
 use of a variable.
\end_layout

\begin_layout Quote
The exception to this is code in /resources/, in which language globals
 
\emph on
might
\emph default
 persist.
 To improve performance, Prudence caches the global context for these in
 memory, with the side effect that your language globals persist beyond
 a single user request.
 For various reasons, however, Prudence may reset this global context.
 You should not rely on this side effect, and instead always use 
\bar under
application.globals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|application-globals"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Subsubsection
application.globals vs.
 application.sharedGlobals
\end_layout

\begin_layout Standard
The rule of thumb is to always prefer to use
\bar under
 application.globals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|application-globals"

\end_inset

)
\bar default
.
 By doing so, you'll minimize interdependencies between applications, and
 help make each application deployable on its own.
\end_layout

\begin_layout Standard
Use for 
\bar under
application.sharedGlobals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|application-shared-globals"

\end_inset

)
\bar default
 (and possibly 
\bar under
application.distributedGlobals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|application-distributed-globals"

\end_inset

)
\bar default
---similar concerns apply to it) only when you explicitly need a bridge
 
\emph on
between 
\emph default
applications.
 Examples:
\end_layout

\begin_layout Enumerate
To save resources.
 For example, if an application detects that a database connection has already
 been opened by another application in the Prudence instance, and stored
 in application.sharedGlobals, then it could use that connection rather than
 create a new one.
 This would only work, of course, if a few applications share the same database,
 which is common in many deployments.
\end_layout

\begin_layout Enumerate
To send messages between applications.
 This would be necessary if operations in one application could affect another.
 For example, you could place a task queue in application.sharedGlobals,
 where applications could queue required operations.
 A thread in another application would consume these and act accordingly.
 Of course, you will have to plan for asynchronous behavior, and especially
 allow for failure.
 What happens if the consumer application is down? It may make more sense
 in these cases to use a persistent storage, such as a database, for the
 queue.
\end_layout

\begin_layout Standard
Generally, if you find yourself having to rely on application.sharedGlobals,
 ask yourself if your code would be better off encapsulated as a single
 application.
 Remember that Prudence has powerful URL routing, support for virtual hosting,
 etc., letting you easily have one application work in several sites simultaneous
ly.
\end_layout

\begin_layout Quote
Note for Clojure flavor: All Clojure vars are VM-wide globals equivalent
 in scope to executable.globals.
 You usually work with namespaces that Prudence creates on the fly, so they
 do not persist beyond the execution.
 However, if you explicitly define a name space, then you can use it as
 a place for shared state.
 It will then be up to you to make sure that your namespace doesn't collide
 with that of another application installed in the Prudence instance.
 Though this approach might seem to break our rule of thumb here, of preferring
 application.globals to application.sharedGlobals, it is more idiomatic to
 Clojure and Lisps more generally.
\end_layout

\begin_layout Subsubsection
application.sharedGlobals vs.
 executable.globals
\end_layout

\begin_layout Standard

\bar under
executable.globals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|executable-globals"

\end_inset

)
\bar default
 are in practice identical to 
\bar under
application.sharedGlobals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|application-shared-globals"

\end_inset

)
\bar default
.
 The latter is simply reserved for Prudence applications.
 If you are running non-Prudence 
\begin_inset CommandInset href
LatexCommand href
name "Scripturian"
target "http://threecrickets.com/scripturian/"

\end_inset

 code on the same VM, and need to share state with Prudence, then executable.glob
als are available for you.
\end_layout

\begin_layout Subsubsection
Concurrency
\begin_inset CommandInset label
LatexCommand label
name "concurrency"

\end_inset


\end_layout

\begin_layout Standard
Though 
\bar under
application.globals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|application-globals"

\end_inset

)
\bar default
, 
\bar under
application.sharedGlobals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|application-shared-globals"

\end_inset

)
\bar default
, 
\bar under
application.distributedGlobals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|application-distributed-globals"

\end_inset

)
\bar default
 and 
\bar under
executable.globals (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../api/|executable-globals"

\end_inset

)
\bar default
 are all thread safe, it's important to understand how to use them properly.
\end_layout

\begin_layout Quote
Note for Clojure flavor: Though Clojure goes a long way towards simplifying
 concurrent programming, it does not solve the problem of concurrent access
 to global state.
 You still need to read this section!
\end_layout

\begin_layout Standard
For example, this code (Python flavor) is broken:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

def get_connection()
\end_layout

\begin_layout Plain Layout

	data_source = application.globals['myapp.data.source']
\end_layout

\begin_layout Plain Layout

	if data_source is None:
\end_layout

\begin_layout Plain Layout

		data_source = data_source_factory.create()
\end_layout

\begin_layout Plain Layout

		application.globals['myapp.data.source'] = data_source
\end_layout

\begin_layout Plain Layout

	return data_source.get_connection()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The problem is that in the short interval between comparing the value in
 the “if” statement and setting the global value in the “then” statement,
 another thread may have already set the value.
 Thus, the “data_source” instance you are referring to in the current thread
 would be different from the “myapp.data.source” global used by other threads.
 The value is not truly shared! In some cases, this would only result in
 a few extra, unnecessary resources being created.
 But in some cases, when you rely on the uniqueness of the global, this
 can lead to subtle bugs.
\end_layout

\begin_layout Quote
This may seem like a very rare occurrence to you: another thread would have
 to set the value 
\emph on
exactly
\emph default
 between our comparison and our set.
 If your application has many concurrent users, and your machine has many
 CPU cores, it can actually happen quite frequently.
 And, even if rare, your application has a chance of breaking if 
\emph on
just two users use it at the same time
\emph default
.
 This is not a problem you can gloss over, even for simple applications.
\end_layout

\begin_layout Standard
Use this code instead:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

def get_connection()
\end_layout

\begin_layout Plain Layout

	data_source = application.globals['myapp.data.source']
\end_layout

\begin_layout Plain Layout

	if data_source is None:
\end_layout

\begin_layout Plain Layout

		data_source = data_source_factory.create()
\end_layout

\begin_layout Plain Layout

		data_source = application.getGlobal('myapp.data.source', data_source)
\end_layout

\begin_layout Plain Layout

	return data_source.get_connection()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The getGlobal call is an atomic compare-and-set operation.
 It guarantees that the returned value is the unique one.
\end_layout

\begin_layout Paragraph
Optimizing for Performance
\end_layout

\begin_layout Standard
You may have noticed, in the code above, that if another thread had already
 set the global value, then our created data source would be discarded.
 If data source creation is heavy and slow, then this could affect our performan
ce.
 The only way to guarantee that this would not happen would be to make the
 entire operation atomic, by synchronizing it with a lock:
\end_layout

\begin_layout Standard
Here's an example:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

def get_connection()
\end_layout

\begin_layout Plain Layout

	lock = application.getGlobal('myapp.data.source.lock', RLock())
\end_layout

\begin_layout Plain Layout

	lock.acquire()
\end_layout

\begin_layout Plain Layout

	try:
\end_layout

\begin_layout Plain Layout

		data_source = application.globals['myapp.data.source']
\end_layout

\begin_layout Plain Layout

		if data_source is None:
\end_layout

\begin_layout Plain Layout

			data_source = data_source_factory.create()
\end_layout

\begin_layout Plain Layout

			application.globals['myapp.data.source'] = data_source
\end_layout

\begin_layout Plain Layout

		return data_source.get_connection()
\end_layout

\begin_layout Plain Layout

	finally:
\end_layout

\begin_layout Plain Layout

		lock.release()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that we have to store our RLock as a unique global, too.
\end_layout

\begin_layout Standard
Not only is the code above complicated, but synchronization has its own
 performance penalties, which 
\emph on
might
\emph default
 make this apparent optimization actually perform worse.
 It's definitely not a good idea to blindly apply this technique: attempt
 it only if you are experiencing a problem with resource use or performance,
 and then make sure that you're not making things worse with synchronization.
\end_layout

\begin_layout Standard
Here's a final version of our get_connection function that lets you control
 whether to lock access.
 This can help you more easily compare which technique works better for
 your application:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

def get_connection(lock_access=False)
\end_layout

\begin_layout Plain Layout

	if lock_access:
\end_layout

\begin_layout Plain Layout

		lock = application.getGlobal('myapp.data.source.lock', RLock())
\end_layout

\begin_layout Plain Layout

		lock.acquire()
\end_layout

\begin_layout Plain Layout

	try:
\end_layout

\begin_layout Plain Layout

		data_source = application.globals['myapp.data.source']
\end_layout

\begin_layout Plain Layout

		if data_source is None:
\end_layout

\begin_layout Plain Layout

			data_source = data_source_factory.create()
\end_layout

\begin_layout Plain Layout

			if lock_access:
\end_layout

\begin_layout Plain Layout

				application.globals['myapp.data.source'] = data_source
\end_layout

\begin_layout Plain Layout

			else:
\end_layout

\begin_layout Plain Layout

				data_source = application.getGlobal('myapp.data.source', data_source)
\end_layout

\begin_layout Plain Layout

		return data_source.get_connection()
\end_layout

\begin_layout Plain Layout

	finally:
\end_layout

\begin_layout Plain Layout

		if lock_access:
\end_layout

\begin_layout Plain Layout

			lock.release()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Complicated, isn't it? Unfortunately, complicated code and fine-tuning is
 the price you must pay in order to support concurrent access, which is
 the key to Prudence's scalability.
\end_layout

\begin_layout Standard
But, don't be discouraged.
 The standard protocol for using Prudence's globals will likely be good
 enough for the vast majority of your state-sharing needs.
\end_layout

\begin_layout Subsection
APIs
\end_layout

\begin_layout Standard
Prudence provides you with an especially rich set of APIs.
\end_layout

\begin_layout Standard
The core APIs required for using Prudence are multilingual, in that they
 are implemented via standard JVM classes that can be called from all supported
 programming languages: JavaScript, Python, Ruby, PHP, Lua, Groovy and Clojure.
 Indeed, the entire JVM standard APIs can be access in this manner, in addition
 to any JVM library installed in your container (under 
\begin_inset Quotes eld
\end_inset

/libraries/jars/
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Standard
Most of these languages additionally have a rich standard API of their own
 which you can use, as well as an ecology of libraries.
 JavaScript, however, stands out for having a very meager standard API.
 To fill in this gap, Sincerity comes with a useful set of JavaScript Libraries,
 which you are free to use.
 Some of these are written pure JavaScript, offering new and useful functionalit
y, while others provide JavaScript-friendly wrappers over standard JVM libraries.
\end_layout

\begin_layout Standard
Furthermore, Prudence comes with JavaScript-friendly wrappers over the core
 Prudence APIs.
 Future versions of Prudence may provide similar friendly wrappers for the
 other supported languages (please contribute!).
 Until then, there's nothing that these wrappers can do that you can't do
 with the core APIs.
\end_layout

\begin_layout Subsubsection
Using the Documentation
\end_layout

\begin_layout Quote
The Prudence team has spent a great amount of time on meticulously documenting
 the APIs.
 Please send us a 
\begin_inset CommandInset href
LatexCommand href
name "bug report"
target "http://code.google.com/p/prudence/issues/list"

\end_inset

 if you find a mistake, or think that the documentation can use some clarificati
on!
\end_layout

\begin_layout Standard
For the sake of coherence all these APIs are 
\begin_inset CommandInset href
LatexCommand href
name "documented together online"
target "http://threecrickets.com/api/javascript/"

\end_inset

 in their JavaScript format.
 This includes both the multilingual as well as the JavaScript-specific
 APIs.
 For the multilingual APIs, just make sure to call the APIs using the appropriat
e syntax for the programming language you are using.
 For example, here is the same API call in all supported languages:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

JavaScript: conversation.redirectSeeOther('http://newsite.org/')
\end_layout

\begin_layout Plain Layout

Python:     conversation.redirectSeeOther('http://newsite.org/')
\end_layout

\begin_layout Plain Layout

Ruby:       $conversation.redirect_see_other 'http://newsite.org/'
\end_layout

\begin_layout Plain Layout

PHP:        $conversation->redirectSeeOther('http://newsite.org/');
\end_layout

\begin_layout Plain Layout

Lua:        conversation:redirectSeeOther('http://newsite.org/')
\end_layout

\begin_layout Plain Layout

Groovy:     conversation.redirectSeeOther('http://newsite.org/')
\end_layout

\begin_layout Plain Layout

Clojure:    (..
 conversation redirectSeeOther "http://newsite.org/")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The APIs are not fully documented here, but rather summarized to give you
 a global view of what's available, with links to the full documentation
 available online.
 The documentation also lets you view the complete JavaScript source code.
\end_layout

\begin_layout Standard
You may be further interested in Prudence's low-level API, which is also
 
\begin_inset CommandInset href
LatexCommand href
name "fully documented online"
target "http://threecrickets.com/api/java/prudence/"

\end_inset

.
 As a final resort, sometimes the best documentation is the 
\begin_inset CommandInset href
LatexCommand href
name "source code itself"
target "http://code.google.com/p/prudence/source/browse/"

\end_inset

.
\end_layout

\begin_layout Standard
A few more language-specific notes:
\end_layout

\begin_layout Paragraph
JavaScript
\end_layout

\begin_layout Standard
Prudence's current JavaScript engine, Rhino, does not provide dictionary
 access to maps, so you must use get- and put- notation to access map attributes.
 For example, use 
\begin_inset Quotes eld
\end_inset

application.globals.get('myapp.data.name')
\begin_inset Quotes erd
\end_inset

 rather than 
\begin_inset Quotes eld
\end_inset

application.globals['myapp.data.name']
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Paragraph
Python
\end_layout

\begin_layout Standard
If you're using the Jepp engine, rather than the default Jython engine,
 you will need to use get- and set- notation to access attributes.
 For example, use 
\begin_inset Quotes eld
\end_inset

application.getArguments()
\begin_inset Quotes erd
\end_inset

 to access application.arguments in Jepp.
\end_layout

\begin_layout Paragraph
Ruby
\end_layout

\begin_layout Standard
Prudence's Ruby engine, JRuby, conveniently lets you use the Ruby naming
 style for API calls.
 For example, you can use $application.get_global instead of $application.getGloba
l.
\end_layout

\begin_layout Paragraph
Lua
\end_layout

\begin_layout Standard
You will need to use the get- and set- notation to access attributes.
 For example, you must use 
\begin_inset Quotes eld
\end_inset

conversation:getEntity()
\begin_inset Quotes erd
\end_inset

 to access conversation.entity.
\end_layout

\begin_layout Paragraph
Clojure
\end_layout

\begin_layout Standard
You will need to use get- and set- notation to access attributes.
 For example, use 
\begin_inset Quotes eld
\end_inset

(.getArguments application)
\begin_inset Quotes erd
\end_inset

 to access application.arguments.
 You can also use Clojure's bean form, for example 
\begin_inset Quotes eld
\end_inset

(bean application)
\begin_inset Quotes erd
\end_inset

, to create a read-only representation of Prudence services.
\end_layout

\begin_layout Subsubsection
Prudence APIs
\end_layout

\begin_layout Standard
These core APIs are implemented by the JVM and can be used by any support
 programming language.
 The APIs consist of three namespaces that are defined as global variables.
\end_layout

\begin_layout Paragraph
\begin_inset CommandInset href
LatexCommand href
name "application"
target "http://threecrickets.com/api/javascript/?namespace=application"

\end_inset


\end_layout

\begin_layout Paragraph
\begin_inset CommandInset href
LatexCommand href
name "document"
target "http://threecrickets.com/api/javascript/?namespace=document"

\end_inset


\end_layout

\begin_layout Paragraph
\begin_inset CommandInset href
LatexCommand href
name "conversation"
target "http://threecrickets.com/api/javascript/?namespace=conversation"

\end_inset


\end_layout

\begin_layout Subsubsection
Scripturian API
\end_layout

\begin_layout Paragraph
\begin_inset CommandInset href
LatexCommand href
name "executable"
target "http://threecrickets.com/api/javascript/?namespace=executable"

\end_inset


\end_layout

\begin_layout Subsubsection
JavaScript Libraries
\end_layout

\begin_layout Standard
The APIs are only available for JavaScript running within Scripturian.
\end_layout

\begin_layout Paragraph
Sincerity JavaScript Library
\end_layout

\begin_layout Itemize
/sincerity/calendar/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Calendar"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Calendar"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/classes/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Classes"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Classes"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/cryptography/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Cryptography"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Cryptography"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/files/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Files"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Files"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/iterators/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Iterators"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Iterators"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/json/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.JSON"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.JSON"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/jvm/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.JVM"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.JVM"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/localization/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Localization"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Localization"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/lucene/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Lucene"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Lucene"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/mail/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Mail"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Mail"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/objects/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Objects"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Objects"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/rhino/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Rhino"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Rhino"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/templates/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Templates"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Templates"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/xml/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.XML"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.XML"

\end_inset


\end_layout

\begin_layout Paragraph
Prudence JavaScript Library
\end_layout

\begin_layout Itemize
/prudence/blocks/: 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Blocks"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Blocks"

\end_inset


\end_layout

\begin_layout Itemize
/prudence/lazy/: 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Lazy"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Lazy"

\end_inset


\end_layout

\begin_layout Itemize
/prudence/logging/: 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Logging"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Logging"

\end_inset


\end_layout

\begin_layout Itemize
/prudence/resources/: 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Resources"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Resources"

\end_inset


\end_layout

\begin_layout Itemize
/prudence/tasks/: 
\begin_inset CommandInset href
LatexCommand href
name "Prudence.Tasks"
target "http://threecrickets.com/api/javascript/?namespace=Prudence.Tasks"

\end_inset


\end_layout

\begin_layout Paragraph
Libraries for Bootstrap and Configuration
\end_layout

\begin_layout Itemize
/sincerity/annotations/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Annotations"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Annotations"

\end_inset


\end_layout

\begin_layout Itemize
/sincerity/container/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Container"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Containter"

\end_inset


\end_layout

\begin_layout Itemize
/prudence/routing/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Routing"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Routing"

\end_inset


\end_layout

\begin_layout Itemize
/prudence/lazy/: 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Lazy"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Lazy"

\end_inset


\end_layout

\begin_layout Paragraph
Diligence
\end_layout

\begin_layout Section
Debugging
\begin_inset CommandInset label
LatexCommand label
name "debugging"

\end_inset


\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Subsection
Logging
\end_layout

\begin_layout Subsubsection
application.logger
\end_layout

\begin_layout Subsubsection
application.getSubLogger
\end_layout

\begin_layout Subsubsection
Configuring Logging
\end_layout

\begin_layout Standard
/configuration/logging/
\end_layout

\begin_layout Standard
See Sincerity Manual
\end_layout

\begin_layout Subsection
Debug Page
\begin_inset CommandInset label
LatexCommand label
name "debug-page"

\end_inset


\end_layout

\begin_layout Subsection
Live Execution
\begin_inset CommandInset label
LatexCommand label
name "live-execution"

\end_inset


\end_layout

\begin_layout Standard
See the 
\bar under
on-the-fly scriptlet resources (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "on-the-fly-scriptlet-resources"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Section
Deployment
\end_layout

\begin_layout Subsection
The Joys of Sincerity
\end_layout

\begin_layout Subsubsection
Configuration-by-Script
\end_layout

\begin_layout Subsubsection
Plugins
\end_layout

\begin_layout Subsection
Deployment Strategies
\end_layout

\begin_layout Subsubsection
Synchronization
\end_layout

\begin_layout Standard
Unison, rsync
\end_layout

\begin_layout Subsubsection
Packaging
\end_layout

\begin_layout Paragraph
Maven
\end_layout

\begin_layout Standard
Using your own repository (Nexus)
\end_layout

\begin_layout Paragraph
Debian/RPM
\end_layout

\begin_layout Subsubsection
Version Control
\end_layout

\begin_layout Paragraph
Subversion
\end_layout

\begin_layout Paragraph
Git
\end_layout

\begin_layout Standard
What to ignore
\end_layout

\begin_layout Subsection
Directory Organization
\end_layout

\begin_layout Subsubsection
Sincerity Standalone
\end_layout

\begin_layout Subsection
Operating System Service
\end_layout

\begin_layout Standard
See Sincerity Manual
\end_layout

\begin_layout Subsection
Monitoring
\end_layout

\begin_layout Subsection
Security
\end_layout

\begin_layout Subsubsection
SSL
\end_layout

\begin_layout Standard
Howto
\end_layout

\begin_layout Subsubsection
HTTP Authentication
\end_layout

\begin_layout Subsubsection
Locked-Down User
\end_layout

\begin_layout Standard
Service Plugin
\end_layout

\begin_layout Subsubsection
Firewall
\end_layout

\begin_layout Standard
HTTP ports
\end_layout

\begin_layout Standard
Hazelcast ports
\end_layout

\begin_layout Standard
Cache backends
\end_layout

\begin_layout Standard
Database and other services
\end_layout

\begin_layout Subsection
Proxying
\begin_inset CommandInset label
LatexCommand label
name "proxying"

\end_inset


\end_layout

\begin_layout Subsubsection
Nginx
\end_layout

\begin_layout Subsubsection
Apache
\end_layout

\begin_layout Subsection
Deploying Clusters
\end_layout

\begin_layout Subsubsection
Loadbalancing
\end_layout

\begin_layout Standard
Perlbal
\end_layout

\begin_layout Subsubsection
Security Concerns
\end_layout

\begin_layout Subsubsection
Configuring Hazelcast
\end_layout

\begin_layout Standard
/configuration/hazelcast/prudence/
\end_layout

\begin_layout Standard
or
\end_layout

\begin_layout Standard
/configuration/hazelcast.alt.conf
\end_layout

\begin_layout Subsection
Cache Backends
\end_layout

\begin_layout Section
Utilities for Restlet
\end_layout

\begin_layout Standard
If you are a Restlet Java programmer, Prudence may still be of use to use.
 Prudence is also available as a small standalone Java library (a jar),
 and as such has several well-documented classes useful for any Java-written
 Restlet application.
 They're all in the 
\begin_inset Quotes eld
\end_inset

com.threecrickets.prudence.util
\begin_inset Quotes erd
\end_inset

 package, and introduced below.
\end_layout

\begin_layout Subsection
Utility Restlets
\end_layout

\begin_layout Standard
We wish these general-purpose utilities existed in the standard Restlet
 library!
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "CacheControlFilter"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/CacheControlFilter.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Filter"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Filter.html"

\end_inset

 that adds cache control directives to responses.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Injector"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/Injector.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Filter"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Filter.html"

\end_inset

 that adds values to the request attributes before moving to the next restlet.
 It allows for a straightforward implementation of IoC (Inversion of Control).
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "StatusRestlet"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/StatusRestlet.html"

\end_inset

: A restlet that always sets a specific status and does nothing else.
\end_layout

\begin_layout Subsection
Client Data
\end_layout

\begin_layout Standard
These classes add no new functionality, but make working with some client
 data a bit easier.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "CompressedStringRepresentation"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/CompressedStringRepresentation.html"

\end_inset

: This is a 
\begin_inset CommandInset href
LatexCommand href
name "ByteArrayRepresentation"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/representation/ByteArrayRepresentation.html"

\end_inset

 that can be constructed using text and an encoding, which it then compresses
 into bytes according the encoding.
 This is an alternative to using an 
\begin_inset CommandInset href
LatexCommand href
name "Encoder"
target "http://restlet.org/learn/javadocs/2.1/jse/engine/index.html?org/restlet/engine/application/Encoder.html"

\end_inset

 filter, allowing you direct control over and access to the final representation.
 
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "ConversationCookie"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/ConversationCookie.html"

\end_inset

: A modifiable extension of a regular 
\begin_inset CommandInset href
LatexCommand href
name "Cookie"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/data/Cookie.html"

\end_inset

.
 Tracks modifications, and upon calling save() stores them as a 
\begin_inset CommandInset href
LatexCommand href
name "CookieSetting"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/data/CookieSetting.html"

\end_inset

, likely in the 
\begin_inset CommandInset href
LatexCommand href
name "Response"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/Response.html"

\end_inset

.
 Also supports cookie deletion via remove().
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "FormWithFiles"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/FormWithFiles.html"

\end_inset

: A form that can parse 
\begin_inset CommandInset href
LatexCommand href
name "MediaType.MULTIPART_FORM_DATA"
target "http://restlet.org/learn/javadocs/2.1/jse/api/org/restlet/data/MediaType.html#MULTIPART_FORM_DATA"

\end_inset

 entities by accepting file uploads.
 Files will appear as parameters of type 
\begin_inset CommandInset href
LatexCommand href
name "FileParameter"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/FileParameter.html"

\end_inset

.
\end_layout

\begin_layout Subsection
Redirection
\end_layout

\begin_layout Standard
Restlet's server-side redirection works by creating a new request.
 Unfortunately, this means that some information from the original request
 is lost.
 Prudence includes a set of classes that work together to preserve the original
 URI, which we here call the 
\begin_inset Quotes eld
\end_inset

captured
\begin_inset Quotes erd
\end_inset

 URI.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "CapturingRedirector"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/CapturingRedirector.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Redirector"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Redirector.html"

\end_inset

 that keeps track of the captured reference.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "NormalizingRedirector"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/NormalizingRedirector.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Redirector"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Redirector.html"

\end_inset

 that normalizes relative paths.
 This may be unnecessary in future versions of Restlet.
 See 
\begin_inset CommandInset href
LatexCommand href
name "Restlet issue 238"
target "https://github.com/restlet/restlet-framework-java/issues/238"

\end_inset

.
\end_layout

\begin_layout Subsection
Fallback Routing
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

Fallback
\begin_inset Quotes erd
\end_inset

 is a powerful new routing paradigm introduced in Prudence that lets you
 attach multiple restlets to a single route.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Fallback"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/Fallback.html"

\end_inset

: A restlet that delegates 
\begin_inset CommandInset href
LatexCommand href
name "Restlet.handle(Request, Response)"
target "http://restlet.org/learn/javadocs/2.1/jse/api/org/restlet/Restlet.html#handle(org.restlet.Request,%20org.restlet.Response)"

\end_inset

 to a series of targets in sequence, stopping at the first target that satisfies
 the condition of wasHandled.
 This is very useful for allowing multiple restlets a chance to handle a
 request, while 
\begin_inset Quotes eld
\end_inset

falling back
\begin_inset Quotes erd
\end_inset

 to subsequent restlets when those 
\begin_inset Quotes eld
\end_inset

fail.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "FallbackRouter"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/FallbackRouter.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Router"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Router.html"

\end_inset

 that takes care to bunch identical routes under Fallback restlets.
\end_layout

\begin_layout Subsection
Resolver Selection
\end_layout

\begin_layout Standard
Restlet does not provide an easy way to use different 
\begin_inset CommandInset href
LatexCommand href
name "template variable resolver"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/util/Resolver.html"

\end_inset

 instances.
 We've created new implementations of a few of the core classes that let
 you choose which resolver to use.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "ResolvingTemplate"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/ResolvingTemplate.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Template"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Template.html"

\end_inset

 that allows control over which 
\begin_inset CommandInset href
LatexCommand href
name "Resolver"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/util/Resolver.html"

\end_inset

 instances it will use.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "ResolvingRedirector"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/ResolvingRedirector.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Redirector"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Redirector.html"

\end_inset

 that uses ResolvingTemplate.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "ResolvingRouter"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/ResolvingRouter.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Router"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Router.html"

\end_inset

 that uses ResolvingTemplate for all routes.
\end_layout

\begin_layout Subsection
Web Filters
\end_layout

\begin_layout Standard
A set of filter classes for web technologies.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "CssUnifyMinifyFilter"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/CssUnifyMinifyFilter.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Filter"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Filter.html"

\end_inset

 that automatically unifies and/or compresses CSS source files, saving them
 as a single file.
 Unifying them allows clients to retrieve the CSS via one request rather
 than many.
 Compressing them makes their retrieval faster.
 Compression is done via 
\begin_inset CommandInset href
LatexCommand href
name "CSSMin"
target "http://barryvan.github.com/CSSMin/CSSMin"

\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "JavaScriptUnifyMinifyFilter"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/JavaScriptUnifyMinifyFilter.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Filter"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Filter.html"

\end_inset

 that automatically unifies and/or compresses JavaScript source files, saving
 them as a single file.
 Unifying them allows clients to retrieve the JavaScript via one request
 rather than many.
 Compressing them makes their retrieval faster.
 Compression is done via 
\begin_inset CommandInset href
LatexCommand href
name "John Reilly's Java port"
target "http://www.inconspicuous.org/projects/jsmin/jsmin.java"

\end_inset

 of Douglas Crockford's 
\begin_inset CommandInset href
LatexCommand href
name "JSMin"
target "http://www.crockford.com/javascript/jsmin.html"

\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "ZussFilter"
target "http://threecrickets.com/api/java/prudence/index.html?com/threecrickets/prudence/util/ZussFilter.html"

\end_inset

: A 
\begin_inset CommandInset href
LatexCommand href
name "Filter"
target "http://restlet.org/learn/javadocs/2.1/jse/api/index.html?org/restlet/routing/Filter.html"

\end_inset

 that automatically parses 
\begin_inset CommandInset href
LatexCommand href
name "ZUSS"
target "https://github.com/tomyeh/ZUSS"

\end_inset

 code and renders CSS.
 Also supports minifying files, if the 
\begin_inset Quotes eld
\end_inset

.min.css
\begin_inset Quotes erd
\end_inset

 extension is used.
\end_layout

\begin_layout Section
Upgrading from Prudence 1.1
\end_layout

\begin_layout Standard
Prudence 1.1 did not use Sincerity: instead, it was a self-contained container
 with everything in the box.
 This meant it could also not be modular, and instead supported several
 distributions (
\begin_inset Quotes eld
\end_inset

flavors
\begin_inset Quotes erd
\end_inset

) per supported programming language.
 Because of this, it allowed you to use any programming language for your
 bootstrapping code, and indeed the project maintained a separate set of
 bootstrapping code for all languages.
\end_layout

\begin_layout Standard
This was not only cumbersome in terms of documentation and maintenance,
 but it also made it hard to port applications between 
\begin_inset Quotes eld
\end_inset

flavors.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
With the move to Sincerity in Prudence 2.0, it was possible to make Prudence
 more minimal as well as more modular, as Sincerity handles the bootstrapping
 and installation of supported languages.
 Though Sincerity can ostensibly run bootstrapping scripts in any Scripturian-su
pported language, it standardizes on JavaScript in order to maintain focus
 and portability.
 The bottom line is that if you used non-JavaScript flavors of Prudence
 1.1, you will need to use JavaScript for your bootstrapping scripts, even
 if your application code (resources, scriptlets, tasks, etc.) is written
 in a different language.
\end_layout

\begin_layout Standard
To be 100% clear: 
\emph on
all 
\begin_inset Quotes eld
\end_inset

flavors
\begin_inset Quotes erd
\end_inset

 supported in Prudence 1.1 are still supported in Prudence 2.0
\emph default
, and your application code will likely not even have to change.
 You 
\emph on
only
\emph default
 need (or rather, are recommended) to use JavaScript for bootstrapping.
\end_layout

\begin_layout Subsection
Upgrading Applications
\end_layout

\begin_layout Standard
There are no significant API changes between Prudence 1.1 and Prudence 2.0.
 However, the bootstrapping and configuration has been completely overhauled.
 You will likely need to take a few minutes to rewrite your settings.js,
 routing.js, etc.
 Here is a step-by-step checklist:
\end_layout

\begin_layout Enumerate
Start with a new application based on the default template.
\end_layout

\begin_deeper
\begin_layout Enumerate
Rename old application (add 
\begin_inset Quotes eld
\end_inset

-old
\begin_inset Quotes erd
\end_inset

), for example: 
\begin_inset Quotes eld
\end_inset

myapp-old
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Enumerate
Use the 
\begin_inset Quotes eld
\end_inset

prudence
\begin_inset Quotes erd
\end_inset

 tool to create a new application for your application name:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity prudence create myapp
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Copy over individual settings from settings.js, using the new Prudence Manual
 to find equivalences.
\end_layout

\begin_layout Enumerate
Copy over individual settings from routing.js, using the new Prudence Manual
 to find equivalences.
 Prudence 2.0 has a far more powerful and clearer routing configuration.
\end_layout

\begin_layout Enumerate
Rename 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

 files to add a 
\begin_inset Quotes eld
\end_inset

.m.
\begin_inset Quotes erd
\end_inset

 pre-extension (they are now called 
\begin_inset Quotes eld
\end_inset

manual resources
\begin_inset Quotes erd
\end_inset

).
 Under Unix-like operation systems, you can rename the all files in the
 tree via a Perl expression using something like this:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

find .
 -name "*.js" -exec rename -v 's/
\backslash
.js$/
\backslash
.m.js/i' {} 
\backslash
;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Rename 
\begin_inset Quotes eld
\end_inset

/web/dynamic/
\begin_inset Quotes erd
\end_inset

 files to add a 
\begin_inset Quotes eld
\end_inset

.s.
\begin_inset Quotes erd
\end_inset

 pre-extension (they are now called 
\begin_inset Quotes eld
\end_inset

scriptlet resources
\begin_inset Quotes erd
\end_inset

).
 Under Unix-like operation systems, you can rename the all files in the
 tree via a Perl expression using something like this:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

find .
 -name "*.html" -exec rename -v 's/
\backslash
.html$/
\backslash
.s.html/i' {} 
\backslash
;
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Merge 
\begin_inset Quotes eld
\end_inset

/web/dynamic/
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

/web/static/
\begin_inset Quotes erd
\end_inset

 into 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
Move 
\begin_inset Quotes eld
\end_inset

/web/fragments/
\begin_inset Quotes erd
\end_inset

 to 
\begin_inset Quotes eld
\end_inset

/libraries/scriptlet-resources
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection
Upgrading the Component
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Section
FAQ
\begin_inset CommandInset label
LatexCommand label
name "faq"

\end_inset


\end_layout

\begin_layout Standard
Please also refer to the FAQs for 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity"
target "http://threecrickets.com/sincerity/manual/faq/"

\end_inset

 and 
\begin_inset CommandInset href
LatexCommand href
name "Scripturian"
target "http://threecrickets.com/scripturian/manual/faq/"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Prudence or Node.js?
\begin_inset CommandInset label
LatexCommand label
name "prudence-vs-node-js"

\end_inset


\end_layout

\begin_layout Standard
Both are server-side platforms for creating network servers using JavaScript.
 Both have evolved to support package managers: Sincerity for Prudence,
 npm for Node.js.
\end_layout

\begin_layout Standard
But that's pretty much where the similarities end.
\end_layout

\begin_layout Paragraph
Purpose and Architecture
\end_layout

\begin_layout Standard
Prudence is a platform for REST services, such as web pages and RESTful
 APIs.
 Node.js is a platform for asynchronous services, such as streaming video
 and audio servers.
 These are 
\emph on
very
\emph default
 different use cases.
\end_layout

\begin_layout Standard
First, note that 
\emph on
both
\emph default
 use non-blocking servers at the low level.
 So they're 
\emph on
both
\emph default
 asynchronous in 
\emph on
that
\emph default
 particular respect.
\end_layout

\begin_layout Quote
Actually, because Prudence uses 
\begin_inset CommandInset href
LatexCommand href
name "Jetty"
target "http://www.eclipse.org/jetty/"

\end_inset

 as its driver, you have the option to change it to a 
\emph on
blocking
\emph default
 server, which may behave better in some controlled workloads.
 See 
\bar under
configuring servers (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "servers"

\end_inset

)
\bar default
.
 Generally, Jetty is designed from the ground-up for web services, and behaves
 
\begin_inset CommandInset href
LatexCommand href
name "smartly"
target "http://webtide.intalio.com/2010/06/lies-damned-lies-and-benchmarks-2/"

\end_inset

 and exceptionally well under high volumes.
\end_layout

\begin_layout Standard
On top of the server Prudence uses a multi-threaded RESTful application
 environment with 
\begin_inset CommandInset href
LatexCommand href
name "Restlet"
target "http://restlet.org/"

\end_inset

 handling the many intricacies of HTTP.
 Why multi-threaded? Because generating HTML is logically a 
\emph on
single-event
\emph default
 procedure: at the moment you get the client's request, you generate the
 HTML content and send it immediately.
 Thus, via a managed, configurable thread-pool, Prudence can leverage multi-core
 CPUs as well as highly-concurrent database backends to serve several several
 user requests simultaneously.
\end_layout

\begin_layout Standard
Node.js could not be more different: it is by design 
\emph on
single
\emph default
-threaded and event-
\emph on
driven
\emph default
: requests are 
\emph on
never 
\emph default
handed simultaneously, and only a single CPU core would ever be used by
 the HTTP server itself.
\end_layout

\begin_layout Standard
Seems odd? Actually, this 
\begin_inset Quotes eld
\end_inset

raw
\begin_inset Quotes erd
\end_inset

 architecture makes a lot of sense for streaming applications: as opposed
 to HTML pages, streams are always 
\emph on
multi
\emph default
-event procedures, each event generating a 
\begin_inset Quotes eld
\end_inset

chunk
\begin_inset Quotes erd
\end_inset

 of the stream that saturates the socket with data.
 There is no advantage to using more than one thread if a single thread
 is already taking up all the bandwidth.
 In fact, thread synchronization could introduce overhead that would slow
 the server down.
 Really, your only variable in terms of scalability is the size of the chunks:
 you'll want them smaller under high load in order to degrade performance
 fairly among clients.
 That said, other libraries you might use from Node.js 
\emph on
can and do
\emph default
 use threads: this is useful for CPU-bound workloads like CPU-intensive
 video encoding.
\end_layout

\begin_layout Standard
Node.js is great for its intended use case.
 It's vastly easier to write event handlers in JavaScript than in C/C++,
 and JavaScript also makes it easy to bootstrap the server.
\end_layout

\begin_layout Quote
If you like Node.js but JavaScript is not your favorite dynamic language,
 similarly excellent asynchronous platforms are available: check out 
\begin_inset CommandInset href
LatexCommand href
name "Tornado"
target "www.tornadoweb.org/"

\end_inset

 and 
\begin_inset CommandInset href
LatexCommand href
name "Twisted"
target "http://twistedmatrix.com/"

\end_inset

 for Python, and 
\begin_inset CommandInset href
LatexCommand href
name "EventMachine"
target "http://rubyeventmachine.com/"

\end_inset

 for Ruby.
\end_layout

\begin_layout Paragraph
You're Doing It Wrong
\end_layout

\begin_layout Standard
It's very odd that Node.js has become a popular platform for the 
\emph on
non
\emph default
-streaming web: 
\begin_inset CommandInset href
LatexCommand href
name "Express"
target "http://expressjs.com/"

\end_inset

, for example, provides some limited RESTful functionality on top of it.
 But event-driven servers are not designed for REST, and are in fact quite
 a bad fit: consider that in a single-threaded runtime, if a single event
 handler hangs, the whole server will hang.
 Node.js deals with the problem by in effect offloading it to external libraries
 written in C++: its database drivers, for example, handle queries in their
 own connection thread pools, and push events to Node.js when data is available.
 But in your JavaScript event handlers, you have to take extra care not
 to do any time-consuming work: a delay you cause would affect 
\emph on
all
\emph default
 operations waiting their turn on the single-threaded event loop.
 Thus, a scalable Node.js application must have event handlers with no risky
 
\begin_inset Quotes eld
\end_inset

side effects,
\begin_inset Quotes erd
\end_inset

 while external services must be called upon in C++.
\end_layout

\begin_layout Standard
You can utilize more CPU cores by running multiple Node.js processes behind
 a load balancer, but the problems quickly multiply: each process loads
 its own version of the database driver, with its own connection thread
 pool that can't be shared with the other Node.js processes.
 In Prudence, by contrast, the same pool is trivially shared by all threads,
 and this is true for all resources.
 It should be clear that Node.js is simply the wrong tool for the job.
\end_layout

\begin_layout Standard
So, why is Node.js so misused? One reason is that its raw architecture is
 attractively simple: multi-threaded programming is hard to get right, single-th
readed easy.
 JavaScript, too, is a draw, as a language that many programmers already
 know.
 So, despite being a problematic web platform, it's one in which you can
 build web services quickly and with little fuss, and sometimes that's more
 important than scalability or even robustness, especially if the goal is
 to create in-house services.
 But another reason for Node.js' popularity is more worrying: ignorance.
 People who should know better heard that Node.js is 
\begin_inset Quotes eld
\end_inset

fast
\begin_inset Quotes erd
\end_inset

 because it's 
\begin_inset Quotes eld
\end_inset

asynchronous
\begin_inset Quotes erd
\end_inset

 and think that would lead to faster page load-times for web browsers and
 the ability to handle more page hits.
 That's a very wrong conclusion.
 You can do great REST in Node.js, but would have to work against the platform's
 limitations for the scenario.
\end_layout

\begin_layout Standard
We believe that Prudence is a much more sensible choice for the RESTful
 web.
 Beyond the basic architecture, also consider Prudence's features aimed
 specifically at scalability, such as 
\bar under
integrated caching (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "caching"

\end_inset

)
\bar default
, full control of 
\bar under
conditional HTTP (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "handle-get-info"

\end_inset

)
\bar default
, and 
\bar under
clusters (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "clusters"

\end_inset

)
\bar default
 for expanding horizontally in the 
\begin_inset Quotes eld
\end_inset

cloud.
\begin_inset Quotes erd
\end_inset

 Check out our 
\begin_inset CommandInset href
LatexCommand href
name "Scaling Tips"
target "http://threecrickets.com/prudence/scaling/"

\end_inset

 article, too, which is useful even if you don't choose Prudence.
\end_layout

\begin_layout Paragraph
Technology and Ecosystem
\end_layout

\begin_layout Standard
Prudence was designed specifically for the JVM, to provide you with access
 to its rich and high-quality ecosystem, to leverage its excellent concurrency
 libraries and monitoring/profiling capabilities, and to be portable and
 integrative.
 The JVM platform is very mature and reliable, as are many of the libraries
 that Prudence uses, such as Jetty, Restlet and 
\begin_inset CommandInset href
LatexCommand href
name "Hazelcast"
target "http://www.hazelcast.com/"

\end_inset

.
 It's easier to connect C/C++ libraries to Node.js, but on the other hand
 it's easier to write and deploy extensions in Java/Scala/Groovy for Prudence.
\end_layout

\begin_layout Standard
And Prudence is not just JavaScript: it supports many dynamic languages
 running on top of the JVM---Python, Ruby, PHP, Lua, Groovy and Clojure---as
 well as their respective ecosystems.
 That said, it does give special love to JavaScript: Sincerity comes with
 a 
\begin_inset CommandInset href
LatexCommand href
name "rich foundation library"
target "http://threecrickets.com/sincerity/manual/programming/#sincerity-javascript-library"

\end_inset

, offering essentials such as OOP and string interpolation, as well as friendly
 wrappers for powerful JVM services, such as concurrent collections and
 cryptography.
\end_layout

\begin_layout Standard
Node.js is JavaScript-centric, and though it has a much younger and narrower
 ecosystem, it is 
\begin_inset CommandInset href
LatexCommand href
name "vibrant and quickly growing"
target "https://npmjs.org/"

\end_inset

.
\end_layout

\begin_layout Paragraph
No Benchmarks for You
\end_layout

\begin_layout Standard
In terms of sheer computational performance, Node.js has done well to leverage
 the 
\begin_inset Quotes eld
\end_inset

browser wars,
\begin_inset Quotes erd
\end_inset

 which have resulted in very performative JavaScript interpreters and JITs.
 However, it's worth remembering that these engines are really optimized
 for web browser environments, not servers, and have very limited support
 for threading.
 Prudence can run JavaScript on your choice of either 
\begin_inset CommandInset href
LatexCommand href
name "Nashorn"
target "http://openjdk.java.net/projects/nashorn/"

\end_inset

 or 
\begin_inset CommandInset href
LatexCommand href
name "Rhino"
target "https://developer.mozilla.org/en-US/docs/Rhino"

\end_inset

, which can both use the JVM's excellent concurrency management.
 Nashorn is as of this writing still under development, to be released with
 JVM 8 in March 2014.
 It promises excellent performance, on par with Java code in some cases.
 Rhino is not as fast, but still performs well and is very mature.
\end_layout

\begin_layout Standard
But a comparative benchmark would make little sense.
 Node.js' single-threaded model really 
\emph on
needs
\emph default
 blazing-fast language performance, as it directly affects its scalability.
 Prudence's multi-threaded model and RESTful expectations mean that it's
 rarely CPU-bound: for example, you spend orders of magnitude more time
 waiting for database backends to respond than for functions to be called.
 For the web page use case, smart architecture---and smart caching---are
 
\emph on
far 
\emph default
more important for scalability than language engine performance.
\end_layout

\begin_layout Standard
Note, too, that all the performance-critical parts of Prudence are written
 in Java, just as they are written in C++ for Node.js.
\end_layout

\begin_layout Paragraph
Summary
\end_layout

\begin_layout Standard
Choose the right tool for the job! Node.js is a great choice for streaming
 and streaming-like services, and Prudence---we hope you'll agree---is a
 great choice for web services and RESTful APIs.
\end_layout

\begin_layout Section
The Case for REST
\begin_inset CommandInset label
LatexCommand label
name "the-cast-for-rest"

\end_inset


\end_layout

\begin_layout Standard
There's a lot of buzz about REST, but also a lot confusion about what it
 is and what it's good for.
 This essay attempts to convey REST's simple essence.
\end_layout

\begin_layout Standard
Let's start, then, not at REST, but at an attempt to create a new architecture
 for building scalable applications.
 Our goals are for it to be minimal, straightforward, and still have enough
 features to be productive.
 We want to learn some lessons from the failures of other, more elaborate
 and complicated architectures.
\end_layout

\begin_layout Standard
Let's call ours a 
\begin_inset Quotes eld
\end_inset

resource-oriented architecture.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsection
Resources
\end_layout

\begin_layout Standard
Our base unit is a 
\begin_inset Quotes eld
\end_inset

resource,
\begin_inset Quotes erd
\end_inset

 which, like an object in object-oriented architectures, encapsulates data
 with some functionality.
 However, we've learned from object-orientation that implementing arbitrary
 interfaces is a recipe for complexity: proxy generation, support for arbitrary
 types, marshaling, etc.
 All that often requires a middleware layer to handle the protocol.
 So, instead, we'll keep it simple and define a limited, unified interface
 that would be just useful enough.
\end_layout

\begin_layout Standard
From our experience with relational databases, we've learned that a tremendous
 amount of power can be found in 
\begin_inset Quotes eld
\end_inset

CRUD
\begin_inset Quotes erd
\end_inset

: Create, Read, Update and Delete.
 If we support just these operations, our resources will already be very
 powerful, enjoying the accumulated wisdom and design patterns from the
 database world.
 
\end_layout

\begin_layout Subsection
Identifiers
\end_layout

\begin_layout Standard
First, let's start with a way of uniquely identifying our resources.
 We'll define a name-based address space where our resources live.
 Each resource is 
\begin_inset Quotes eld
\end_inset

attached
\begin_inset Quotes erd
\end_inset

 to one or more addresses.
 We'll allow for 
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset

 as a customary separator to allow for hierarchical addressing schemes.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

/animal/dog/3/
\end_layout

\begin_layout Plain Layout

/animal/cat/12/image/
\end_layout

\begin_layout Plain Layout

/animal/cat/12/image/large/
\end_layout

\begin_layout Plain Layout

/animal/cat/12/specs/
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the above, we've allowed for different kinds of animals, a way of referencing
 individual animals, and a way of referencing specific aspects of these
 animals.
\end_layout

\begin_layout Standard
Let's now go over CRUD operations in increasing order of complexity.
\end_layout

\begin_layout Subsection
Delete
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

Delete
\begin_inset Quotes erd
\end_inset

 is the most trivial operation.
 After sending 
\begin_inset Quotes eld
\end_inset

delete
\begin_inset Quotes erd
\end_inset

 to an identifier, we expect it to not exist anymore.
 Whether sub-resources in our hierarchy can exist or not, we'll leave up
 to individual implementations.
 For example, deleting 
\begin_inset Quotes eld
\end_inset

/animal/cat/12/image
\begin_inset Quotes erd
\end_inset

 may or may not delete 
\begin_inset Quotes eld
\end_inset

/animal/cat/12/image/large
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Note that we don't care about atomicity here, because we don't expect anything
 to happen after our 
\begin_inset Quotes eld
\end_inset

delete
\begin_inset Quotes erd
\end_inset

 operation.
 A million changes can happen to our cat before our command is processed,
 but they're all forgotten after 
\begin_inset Quotes eld
\end_inset

delete.
\begin_inset Quotes erd
\end_inset

 (See 
\begin_inset Quotes eld
\end_inset

update,
\begin_inset Quotes erd
\end_inset

 below, for a small caveat.)
\end_layout

\begin_layout Subsection
Read
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

Read
\begin_inset Quotes erd
\end_inset

 is a bit more complicated than 
\begin_inset Quotes eld
\end_inset

delete.
\begin_inset Quotes erd
\end_inset

 Since our resource might be changed by other clients, too, we want to make
 sure that there's some kind of way to mark which version we are reading.
 This will allow us to avoid unnecessary reads if there hasn't been any
 change.
\end_layout

\begin_layout Standard
Thus, we'll need our resource-oriented architecture to support some kind
 of version tagging feature.
\end_layout

\begin_layout Subsection
Update
\end_layout

\begin_layout Standard
The problem with 
\begin_inset Quotes eld
\end_inset

update
\begin_inset Quotes erd
\end_inset

 is that it always references a certain version that we have 
\begin_inset Quotes eld
\end_inset

read” before.
 In some cases, though not all, we need some way to make sure that the data
 we expect to be there hasn't changed since we've last “read” it.
 Let's call this a “conditional update.” (In databases, this is called a
 
\begin_inset Quotes eld
\end_inset

compare-and-set
\begin_inset Quotes erd
\end_inset

 atomic operation.)
\end_layout

\begin_layout Standard
Actually, we've oversimplified our earlier definition of “delete.” In some
 cases, we'd want a “conditional delete” to depend on certain expectations
 about the data.
 We might not want the resource deleted in some cases.
\end_layout

\begin_layout Standard
We'll need our resource-oriented architecture to support a general “conditional”
 operation feature.
 
\end_layout

\begin_layout Subsection
Create
\end_layout

\begin_layout Standard
This is our most complex operation.
 Our first problem is that our identifier might not exist yet, or might
 already be attached to a resource.
 One approach could be to try identifiers in sequence:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

Create: /animal/cat/13/ -> Error, already exists
\end_layout

\begin_layout Plain Layout

Create: /animal/cat/14/ -> Error, already exists
\end_layout

\begin_layout Plain Layout

Create: /animal/cat/15/ -> Error, already exists
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

Create: /animal/cat/302041/ -> Success!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Obviously, this is not a scalable solution.
 Another approach could be to have a helper resource which provides us with
 the necessary ID:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

Read: /animal/cat/next/ -> 14
\end_layout

\begin_layout Plain Layout

Create: /animal/cat/14/ -> Oops, someone else beat us to 14!
\end_layout

\begin_layout Plain Layout

Read: /animal/cat/next/ -> 15
\end_layout

\begin_layout Plain Layout

Create: /animal/cat/15/ -> Success!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Of course, we can also have “/animal/cat/next” return unique IDs (such as
 GUIDs) to avoid duplications.
 If we never create our cat, they will be wasted, though.
 The main problem with this approach is that it requires two calls per creation:
 a “read,” and then a “create.” We can handle this in one call by allowing
 for “partial” creation, a “create” linked with an intrinsic “read”:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

Create: /animal/cat/ -> We send the data for the cat without the ID, and
 get back the same cat with an ID
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Other solutions exist, too.
 The point of this discussion is to show you that “create” is not trivial,
 but also that solutions to “create” already exist within the resource-oriented
 architecture we've defined.
 “Create,” though programmatically complex, does not require any additional
 architectural features.
\end_layout

\begin_layout Subsection
Aggregate Resources
\end_layout

\begin_layout Standard
At first glance, handling the problem of getting lots of resources at the
 same time, thus saving on the number of calls, can trivially be handled
 by the features we've listed so far.
 A common solution is to define a 
\begin_inset Quotes eld
\end_inset

plural” version of the 
\begin_inset Quotes eld
\end_inset

singular” resource:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

/animal/cats/
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A “read” would give us all cats.
 But what if there are ten million cats? We can support paging.
 Again, we have a solution within our current feature set, using identifiers
 for each subset of cats:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

/animal/cats/100/200/
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We can define the above to return no more than 100 cats: from the 100th,
 to the 200th.
 There's a slight problem in this solution: the burden is on whatever component
 in our system handles mapping identifiers to resources.
 This is not terrible, but if we want our system to be more generic, it
 could help if things like “100 to 200” could be handled by our resource
 more directly.
 For convenience, let's implement a simple parameter system for all commands:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

Read(100, 200): /animal/cats/
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the above, our mapping component only needs to know about “/animal/cats”.
 The dumber our mapping component is, the easier it is to implement.
 
\end_layout

\begin_layout Subsection
Formats
\end_layout

\begin_layout Standard
The problem of supporting multiple formats seems similar, at first glance,
 to that of aggregate resources.
 Again, we could potentially solve it with command parameters:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

Read(UTF-8, Russian): /animal/cat/13/
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This would give us a Russian, Unicode UTF-8 encoded version of our cat.
 Looks good, except that there is a potential problem: the client might
 prefer certain formats, but actually be able to handle others.
 It's more a matter of preference than any precision.
 Of course, we can have another resource where all available formats are
 listed, but this would require an extra call, and also introduce the problem
 of atomicity---what if the cat changes between these calls? A better solution
 would be to have the client associate certain preferences per command,
 have our resource emit its capabilities, with the mapping component in
 between “negotiating” these two lists.
 This “negotiation” is a rather simple algorithm to choose the best mutually
 preferable format.
\end_layout

\begin_layout Standard
This would be a simple feature to add to our resource-oriented architecture,
 which could greatly help to decouple its support for multiple formats from
 its addressing scheme.
 
\end_layout

\begin_layout Subsection
Shared State
\end_layout

\begin_layout Standard
Shared state between the client and server is very useful for managing sessions
 and implementing basic security.
 Of course, it's quite easy to abuse shared state, too, by treating it as
 a cache for data.
 We don't want to encourage that.
 Instead, we just want a very simple shared state system.
\end_layout

\begin_layout Standard
We'll allow for this by attaching small, named, shared state objects to
 every request and response to a command.
 Nothing fancy or elaborate.
 There is a potential security breach here, so we have to trust that all
 components along the way honor the relationship between client and server,
 and don't allow other servers access to our shared state.
 
\end_layout

\begin_layout Subsection
Summary of Features
\end_layout

\begin_layout Standard
So, what do we need?
\end_layout

\begin_layout Standard
We need a way to map identifiers to resources.
 We need support for the four CRUD operations.
 We need support for “conditional” updates and deletes.
 We need all operations to support “parameters.” We need “negotiation” of
 formats.
 And, we need a simple shared state attachment feature.
\end_layout

\begin_layout Standard
This list is very easy to implement.
 It requires very little computing power, and no support for generic, arbitrary
 additions.
\end_layout

\begin_layout Subsection
Transactions\SpecialChar \ldots{}
 Not!
\end_layout

\begin_layout Standard
Before we go on, it's worth mentioning one important feature which we did
 not require: transactions.
 Transactions are optional, and sometimes core features in many databases
 and distributed object systems.
 They can be extremely powerful, as they allow atomicity across an arbitrary
 number of commands.
 They are also, however, heavy to implement, as they require considerable
 shared state between client and server.
 Powerful as they are, it is possible to live without them.
 For example, we can implement complex atomicity schemes ourselves within
 a single resource.
 This puts some burden on us, but it does remove the heavy burden of supporting
 arbitrary transactions from our architecture.
 With some small reluctance, then, we'll do without transactions.
 
\end_layout

\begin_layout Subsection
Let's Do It!
\end_layout

\begin_layout Standard
OK, so now we know what we need, let's go ahead and implement the infrastructure
 of components to handle our requirements.
 All we need is stacks for all supported clients, backend stacks for all
 our potential server platforms, middleware components to handle all the
 identifier routing, content negotiation, caching of data\SpecialChar \ldots{}

\end_layout

\begin_layout Standard
\SpecialChar \ldots{}
And thousands of man hours to develop, test, deploy, and integrate.
 Like any large-scale, enterprise architecture, even trivial requirements
 have to jump through the usual hoops set up by the sheer scale of the task.
 Behind every great architecture are the nuts and bolts of the infrastructure.
\end_layout

\begin_layout Standard
Wouldn't it be great if the infrastructure already existed?
\end_layout

\begin_layout Subsection
The Punchline
\end_layout

\begin_layout Standard
Well, duh.
 
\emph on
All
\emph default
 the requirements for our resource-oriented architecture are already supported
 by HTTP:
\end_layout

\begin_layout Standard
Our resource identifiers are URLs.
 The CRUD operations are in the four HTTP verbs: PUT, GET, POST and DELETE.
 “Conditional” and “negotiated” modes are handled by headers, as are “cookies”
 for shared state.
 Version stamps are e-tags and timestamps.
 Command parameters are query matrices appended to URLs.
 It's all there.
\end_layout

\begin_layout Standard
Most importantly, the infrastructure for HTTP is already fully 
\emph on
deployed
\emph default
 world-wide.
 TCP/IP stacks are part of practically every operating system; wiring, switching
 and routing are part and parcel; HTTP gateways, firewalls, load balancers,
 proxies, caches, filters, etc., are stable consumer components; certificate
 authorities, national laws, international agreements are already in place
 to support the complex inter-business interaction.
 Best of all, this available infrastructure is successfully maintained,
 with minimal down-time, by highly-skilled independent technicians, organization
s and component vendors across the world.
\end_layout

\begin_layout Quote
It's important to note a dependency and possible limitation of HTTP: it
 is bound to TCP/IP.
 Indeed, all identifiers are URLs: Uniform Resource Locators.
 In URLs, the first segment is reserved for the domain, either an IP address
 or a domain name translatable to an IP address.
 Compare this with the more general URIs (Uniform Resource Identifiers),
 which do not have this requirement.
 Though we'll often be tied to HTTP in REST, you'll see the literature attemptin
g, at least, to be more generic.
 There are definitely use cases for non-HTTP, and even non-TCP/IP addressing
 schemes.
 In Prudence, it's possible to address internal resources with URIs 
\emph on
that are not URLs
\emph default
; see 
\bar under
internal APIs (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "internal-api"

\end_inset

)
\bar default
.
 
\end_layout

\begin_layout Subsection
It's All About Infrastructure
\end_layout

\begin_layout Standard
The most important lesson to take from this exercise is the importance of
 infrastructure, something easily forgotten when planning architecture in
 ideal, abstract terms.
 This is why, I believe, Roy Fielding named 
\begin_inset CommandInset href
LatexCommand href
name "Chapter 5 of his 2000 dissertation"
target "http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm"

\end_inset

 “Representational State Transfer (REST)” rather than, say, “resource-oriented
 architecture,” as we have here.
 Fielding, one of the authors of the HTTP protocol, was intimately familiar
 with its deployment challenges, and the name “REST” is intended to point
 out the key characteristic of its infrastructure: HTTP and similar protocols
 are designed for transferring lightly annotated data representations, nothing
 more.
 “Resources” are merely logical encapsulations of these representations,
 depending on a contract between client and server.
 The infrastructure does not, in itself, do anything in particular to maintain,
 say, a sensible hierarchy of addresses, abitrary atomicity of CRUD operations,
 etc.
 That's up to your implementation.
 But, representational state transfer---REST---is the mundane, underlying
 magic that makes it all possible.
\end_layout

\begin_layout Standard
To come back to where we started: a resource-oriented architecture requires
 a REST infrastructure.
 In practice, the two terms become interchangeable.
\end_layout

\begin_layout Standard
The principles of resource-orientation can and are applied in many systems.
 The word wide web, of course, with its ecology of web browsers, web servers,
 certificate authorities, etc., is the most obvious model.
 But other core Internet systems, such as email (SMTP, POP, IMAP), file
 transfer (FTP, WebDAV) also implement some subset of REST.
 Your application can do this, too, and enjoy the same potential for scalability
 as these global, open implementations.
 
\end_layout

\begin_layout Subsection
Does REST Scale?
\end_layout

\begin_layout Standard
Part of the buzz about REST is that it's an inherently scalable architecture.
 This is true, but perhaps not in the way that you think.
\end_layout

\begin_layout Standard
Consider that there are two uses of the word “scalable”:
\end_layout

\begin_layout Standard
First, it's 
\series bold
the ability to respond to a growing number of user requests without degradation
 in response time
\series default
, by “simply” adding hardware (horizontal scaling) or replacing it with
 more powerful hardware (vertical scaling).
 This is the aspect of scalability that engineers care about.
 The simple answer is that REST can help, but it doesn't stand out.
 
\begin_inset CommandInset href
LatexCommand href
name "SOAP"
target "http://en.wikipedia.org/wiki/SOAP"

\end_inset

, for example, can also do it pretty well.
 REST aficionados sometimes point out that REST is “stateless,” or “session-less
,” both characteristics that would definitely help scale.
 But, this is misleading.
 Protocols might be stateless, but architectures built on top of them don't
 have to be.
 For example, we've specifically talked about sessions here, and many web
 frameworks manage sessions via cookies.
 On the other hand, you can easily make poorly scalable REST.
 The bottom line is that there's nothing in REST that guarantees scalability
 in 
\emph on
this
\emph default
 respect.
 Indeed, engineers coming to REST due to this false lure end up wondering
 what the big deal is.
 We wrote a whole article for 
\bar under
Scaling Tips (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "scaling-tips"

\end_inset

)
\bar default
, which is indeed not specifically about REST.
\end_layout

\begin_layout Standard
The second use of “scalability” comes from the realm of enterprise and project
 management.
 It's 
\series bold
the ability of your project to grow in complexity without degradation in
 your ability to manage it
\series default
.
 And that's REST's beauty---you already have the infrastructure, which is
 the hardest thing to scale in a project.
 You don't need to deploy client stacks.
 You don't need to create and update proxy objects for five different programmin
g languages used in your enterprise.
 You don't need to deploy incompatible middleware by three different vendors
 and spend weeks trying to force them to play well together.
 Why would engineers care about REST? Precisely because they don't have
 to: they can focus on application engineering, rather than get bogged down
 by infrastructure management.
\end_layout

\begin_layout Standard
That said, a “resource-oriented architecture” as we defined here is not
 a bad start for---engineering-wise---scalable systems.
 Keep your extras lightweight, minimize or eliminate shared state, and encapsula
te your resources according to use cases, and you won't, at least immediately,
 create any obstacles to scaling.
 
\end_layout

\begin_layout Subsection
Prudence
\end_layout

\begin_layout Standard
Convinced? The best way to understand REST is to experiment with it.
 You've come to the right place.
 Start with the 
\bar under
tutorial (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "tutorial"

\end_inset

)
\bar default
, and feel free to skip around the documentation and try things out for
 yourself.
 You'll find it easy, fun, and powerful enough for you to create large-scale
 applications that take full advantage of the inherently scalable infrastructure
 of REST.
 Happy RESTing!
\end_layout

\begin_layout Section
Scaling Tips
\begin_inset CommandInset label
LatexCommand label
name "scaling-tips"

\end_inset


\end_layout

\begin_layout Standard
Scalability is the ability to respond to a growing number of user requests
 without degradation in response time.
 Two variables influence it: 1) your total number of threads and 2) the
 time it takes each thread to process a request.
 Increasing the number of threads seems straightforward: you can keep adding
 more machines behind load balancers.
 However, the two variables are tied, as there are diminishing returns and
 even reversals: beyond a certain point, time per request can actually grow
 longer as you add threads and machines.
\end_layout

\begin_layout Standard
Let's ignore the first variable here, because the challenge of getting more
 machines is mostly financial.
 It's the second that you can do something about as an engineer.
\end_layout

\begin_layout Standard
If you want your application to handle many concurrent users, then you're
 fighting this fact: a request will get queued in the best case or discarded
 in the worst case if there is no thread available to serve it.
 Your challenge is to make sure that a thread is always available.
 And it's not easy, as you'll find out as you read through this article.
 Minimizing the time per request becomes an architectural challenge that
 encompasses the entire structure of your application
\end_layout

\begin_layout Subsection
Performance Does Not Equal Scalability
\end_layout

\begin_layout Standard
Performance does not equal scalability.
 Performance does not equal scalability.
 Performance does not equal scalability.
\end_layout

\begin_layout Standard
Get it? Performance does not equal scalability.
\end_layout

\begin_layout Standard
This is an important mantra for two reasons:
\end_layout

\begin_layout Subsubsection
1.
 Performant Can Mean Less Scalable
\end_layout

\begin_layout Standard
Optimizing for performance can adversely affect your scalability.
 The reason is contextual: when you optimize for performance, you often
 work in an isolated context, specifically so you can accurately measure
 response times and fine-tune them.
 For example, making sure that a specific SQL query is fast would involve
 just running that query.
 A full-blown experiment involving millions of users doing various operations
 on your application would make it very hard to accurately measure and optimize
 the query.
 Unfortunately, by working in an isolated context you cannot easily see
 how your efforts would affect other parts of an application.
 To do so would require a lot of experience and imagination.
 To continue our example, in order to optimize your one SQL query you might
 create an index.
 That index might need to be synchronized with many servers in your cluster.
 And that synchronization overhead, in turn, could seriously affect your
 ability to scale.
 Congratulations! You've made one query run fast in a situation that never
 happens in real life, and you've brought your web site to a halt.
\end_layout

\begin_layout Standard
One way to try to get around this is to fake scale.
 Tools such as 
\begin_inset CommandInset href
LatexCommand href
name "JMeter"
target "http://jakarta.apache.org/jmeter/"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "Siege"
target "http://www.joedog.org/index/siege-home"

\end_inset

 and 
\begin_inset CommandInset href
LatexCommand href
name "ApacheBench"
target "http://httpd.apache.org/"

\end_inset

 can create “load.” They also create unfounded confidence in engineers.
 If you simulate 10,000 users bombarding a single web page, then you're,
 as before, working in an isolated context.
 All you've done is add concurrency to your performance optimization measurement
s.
 Your application pathways might work optimally in these situations, but
 this might very well be due to the fact that the system is not doing anything
 else.
 Add those “other” operations in, and you might get worse site capacity
 than you did before “optimizing.”
\end_layout

\begin_layout Subsubsection
2.
 Wasted Effort
\end_layout

\begin_layout Standard
Even if you don't adversely affect your scalability through optimizing for
 performance, you might be making no gains, either.
 No harm done? Well, plenty of harm, maybe.
 Optimizing for performance might waste a lot of development time and money.
 This effort would be better spent on work that could actually help scalability.
\end_layout

\begin_layout Standard
And, perhaps more seriously, it demonstrates a fundamental misunderstanding
 of the problem field.
 If you don't know what your problems are, you'll never be able to solve
 them.
\end_layout

\begin_layout Subsubsection
Pitfalls
\end_layout

\begin_layout Standard
Study the problem field carefully.
 Understand the challenges and potential pitfalls.
 You don't have to apply every single scalability strategy up-front, but
 at least make sure you're not making a fatal mistake, such as binding yourself
 strongly to a technology or product with poor scalability.
 A bad decision can mean that when you need to scale up in the future, no
 amount of money and engineering effort would be able to save you before
 you lose customers and tarnish your brand.
\end_layout

\begin_layout Standard
Moreover, be very careful of blindly applying “successful” strategies used
 and recommended by others to your product.
 What worked for them might not work for you.
 In fact, there's a chance that their strategy doesn't even work for them,
 and they just think it did because of a combination of seemingly unrelated
 factors.
 The realm of web scalability is still young, full of guesswork, intuition
 and magical thinking.
 Even the experts are often making it up as they're going along.
\end_layout

\begin_layout Standard
Generally, be very suspicious of products or technologies being touted as
 “faster” than others.
 
\emph on
“Fast” doesn't say anything about the ability to scale.

\emph default
 Is a certain database engine “fast”? That's important for certain applications,
 no doubt.
 But maybe the database is missing important clustering features, such that
 it would be a poor choice for scalable applications.
 Does a certain programming language execute faster than another? That's
 great if you're doing video compression, but speed of execution might not
 have a noticeable effect on scalability.
 Web applications mostly do I/O, not computation.
 The same web application might have very similar performance characteristics
 whether it's written in C++ or PHP.
\end_layout

\begin_layout Standard
Moreover, if the faster language is difficult to work with, has poor debugging
 tools, limited integration with web technologies, then it would slow down
 your work and your ability to scale.
\end_layout

\begin_layout Quote
Speed of execution can actually help scalability in its financial aspect:
 If your application servers are constantly at maximum CPU load, then a
 faster execution platform would let you cram more web threads into each
 server.
 This could help you reduce costs.
 For example, see 
\begin_inset CommandInset href
LatexCommand href
name "Facebook's HipHop"
target "http://developers.facebook.com/blog/post/358"

\end_inset

: they saved millions by translating their PHP code to C.
 Because Prudence is built on the fast JVM platform, you're in good hands
 in this respect.
 Note, however, that there's a potential pitfall to high performance: more
 threads per machine would also mean more RAM requirements per machine,
 which also costs money.
 Crunch the numbers and make sure that you're actually saving money by increasin
g performance.
 Once again, performance does not equal scalability.
\end_layout

\begin_layout Standard
That last point about programming languages is worth some elaboration.
 Beyond how well your chosen technologies perform, it's important to evaluate
 them in terms to how easy they are to manage.
 Large web sites are large projects, involving large teams of people and
 large amounts of money.
 That's difficult enough to coordinate.
 You want the technology to present you with as few extra managerial challenges
 as possible.
\end_layout

\begin_layout Standard
Beware especially of languages and platforms described as “agile,” as if
 they somehow embody the spirit of the popular 
\begin_inset CommandInset href
LatexCommand href
name "Agile Manifesto"
target "http://agilemanifesto.org/"

\end_inset

.
 Often, “agile” seems to emphasize the following features: forgiveness for
 syntax slips, light or no type checking, automatic memory management and
 automatic concurrency---all features that seem to speed up development,
 but could just as well be used for sloppy, error-prone, hard-to-debug,
 and hard-to-fix code, slowing down development in the long run.
 If you're reading this article, then your goal is likely not to create
 a quick demo, but a stable application with a long, evolving life span.
\end_layout

\begin_layout Standard
Ignore the buzzwords (“productivity”, “fast”), and instead make sure you're
 choosing technology that you can control, instead of technology that will
 control you.
\end_layout

\begin_layout Standard
We discuss this topic some more in 
\bar under
“The Case for Rest” (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "the-cast-for-rest"

\end_inset

)
\bar default
.
 By building on the existing web infrastructure, Prudence can make large
 Internet projects easier to manage.
\end_layout

\begin_layout Subsubsection
Analysis
\end_layout

\begin_layout Standard
Be especially careful of applying a solution before you know if you even
 have a problem.
\end_layout

\begin_layout Standard
How to identify your scalability bottlenecks? You can create simulations
 and measurements of scalability rather than performance.
 You need to model actual user behavior patterns, allow for a diversity
 of such behaviors to happen concurrently, and replicate this diversity
 on a massive scale.
\end_layout

\begin_layout Standard
Creating such a simulation is a difficult and expensive, as is monitoring
 and interpreting the results and identifying potential bottlenecks.
 This is the main reason for the lack of good data and good judgment about
 how to scale.
 Most of what we know comes from tweaking real live web sites, which either
 comes at the expense of user experience, or allows for very limited experimenta
tion.
 Your best bet is to hire a team who's already been through this before.
\end_layout

\begin_layout Subsubsection
Optimizing for Scalability
\end_layout

\begin_layout Standard
In summary, your architectural objective is to increase concurrency, not
 necessarily performance.
 Optimizing for concurrency means breaking up tasks into as many pieces
 as possible, and possibly even breaking requests into smaller pieces.
 We'll cover numerous strategies here, from frontend to backend.
 Meanwhile, feel free to frame these inspirational slogans on your wall:
\end_layout

\begin_layout Quote
Requests are hot potatoes: Pass them on!
\end_layout

\begin_layout Standard
And:
\end_layout

\begin_layout Quote
It's better to have many short requests than one long one.
\end_layout

\begin_layout Subsection
Caching
\begin_inset CommandInset label
LatexCommand label
name "scaling-tips-caching"

\end_inset


\end_layout

\begin_layout Standard
Retrieving from a cache can be orders of magnitude faster than dynamically
 processing a request.
 It's your most powerful tool for increasing concurrency.
\end_layout

\begin_layout Standard
Caching, however, is only effective is there's something in the cache.
 It's pointless to cache fragments that appear only to one user on only
 one page that they won't return to.
 On the other hand, there may very well be fragments on the page that will
 recur often.
 If you design your page carefully to allow for fragmentation, you will
 reap the benefits of fine-grained caching.
 Remember, though, that the outermost fragment's expiration defines the
 expiration of the included fragments.
 It's thus good practice to define no caching on the page itself, and only
 to cache fragments.
\end_layout

\begin_layout Standard
In your plan for fine-grained caching with Prudence, take special care to
 isolate those fragments that cannot be cached, and cache everything around
 them.
\end_layout

\begin_layout Standard
Make sure to change the 
\bar under
cache key (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../manual/api/|document-cache-key-pattern"

\end_inset

)
\bar default
 to fit the lowest common denominator: you want as many possible requests
 to use the already-cached data, rather than generating new data.
 Note that, by default, Prudence includes the request URI in the cache key.
 Fragments, though, may very well appear identically in many different URIs.
 You would thus not want the URI as part of their cache key.
\end_layout

\begin_layout Standard
Cache aggressively, but also take cache validation seriously.
 Make good use of Prudence's 
\bar under
cache tags (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../manual/api/|document-cache-tags"

\end_inset

)
\bar default
 to allow you to invalidate portions of the cache that should be updated
 as data changes.
 Note, though, that every time you invalidate you will lose caching benefits.
 If possible, make sure that your cache tags don't cover too many pages.
 Invalidate only those entries that really need to be invalidated.
\end_layout

\begin_layout Standard
(It's sad that many popular web sites do cache validation so poorly.
 Users have come to expect that sometimes they see wrong, outdated data
 on a page, sometimes mixed with up-to-date data.
 The problem is usually solved within minutes, or after a few browser refreshes,
 but please do strive for a better user experience in your web site!)
\end_layout

\begin_layout Standard
If you're using a 
\bar under
deferred task handler (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "scaling-tips-deferrable-tasks"

\end_inset

)
\bar default
, you might want to invalidate tagged cache entries when tasks are done.
 Consider creating a special internal API that lets the task handler call
 back to your application to do this.
\end_layout

\begin_layout Standard
How long should you cache? As long as the user can bear! In a perfect world,
 of limitless computing resources, all pages would always be generated freshly
 per request.
 In a great many cases, however, there is no harm at all if users see some
 data that's a few hours or a few days old.
\end_layout

\begin_layout Quote
Note that even very small cache durations can make a big difference in applicati
on stability.
 Consider it the maximum throttle for load.
 For example, a huge sudden peak of user load, or even a denial-of-service
 (DOS) attack, might overrun your thread pool.
 However, a cache duration of just 1 second would mean that your page would
 never be generated more than once every second.
 You are instantly protected against a destructive scenario.
\end_layout

\begin_layout Subsubsection
Cache Warming
\end_layout

\begin_layout Standard
Caches work best when they are “warm,” meaning that they are full of data
 ready to be retrieved.
\end_layout

\begin_layout Standard
A “cold” cache is not only useless, but it can also lead indirectly to a
 serious problem.
 If your site has been optimized for a warm cache, starting from cold could
 significantly strain your performance, as your application servers struggle
 to generate all pages and fragments from scratch.
 Users would be getting slow response times until the cache is significantly
 warm.
 Worse, your system could crash under the sudden extra load.
\end_layout

\begin_layout Standard
There are two strategies to deal with cold caches.
 The first is to allow your cache to be persistent, so that if you restart
 the cache system it retains the same warmth it had before.
 This happens automatically with 
\bar under
database-backed caches (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "scaling-tips-cache-backends"

\end_inset

)
\bar default
.
 The second strategy is to deliberately warm up the cache in preparation
 for user requests.
\end_layout

\begin_layout Standard
Consider creating a special external process or processes to do so.
 Here are some tips:
\end_layout

\begin_layout Enumerate
Consider mechanisms to make sure that your warmer does not overload your
 system or take too much bandwidth from actual users.
 The best warmers are adaptive, changing their load according to what the
 servers can handle.
 Otherwise, consider shutting down your site for a certain amount of time
 until the cache is sufficiently warm.
\end_layout

\begin_layout Enumerate
If the scope is very large, you will have to pick and choose which pages
 to warm up.
 You would want to choose only the most popular pages, in which case you
 might need a system to record and measure popularity.
 For example, for a blog, it's not enough just to warm up, say, the last
 two weeks of blog posts, because a blog post from a year ago might be very
 popular at the moment.
 Effective warming would require you to find out how many times certain
 blog posts were hit in the past two weeks.
 It might make sense to embed this auditing ability into the cache backend
 itself.
\end_layout

\begin_layout Subsubsection*
Pre-Filling the Cache
\end_layout

\begin_layout Standard
If there are thousands of ways in which users can organize a data view,
 and each of these views is particular to one user, then it may make little
 sense to cache them individually, because individual schemes would hardly
 ever be re-used.
 You'll just be filling up the cache with useless entries.
\end_layout

\begin_layout Standard
Take a closer look, though:
\end_layout

\begin_layout Enumerate
It may be that of the thousands of organization schemes only a few are commonly
 used, so it's worth caching the output of just those.
\end_layout

\begin_layout Enumerate
It could be that these schemes are similar enough to each other that you
 could generate them all in one operation, and save them each separately
 in the cache.
 Even if cache entries will barely be used, if they're cheap to create,
 it still might be worth creating them.
\end_layout

\begin_layout Standard
This leads us to an important point:
\end_layout

\begin_layout Quote
Prudence is a “frontend” platform, in that it does not specify which data
 backend, if at all, you should use.
 Its cache, however, is general purpose, and you can store in it anything
 that you can encode as a string.
\end_layout

\begin_layout Standard
Let's take as a pre-filling example a tree data structure in which branches
 can be visually opened and closed.
 Additionally, according to user permissions different parts of the tree
 may be hidden.
 Sounds too complicated to cache all the view combinations? Well, consider
 that you can trigger, upon any change to the tree data structure, a function
 that loops through all the different iterations of the tree recursively
 and saves a view of each of them to the cache.
 The cache keys can be something like “branch1+.branch2-.branch3+”, with “+”
 signifying “-” whether the branch is visually open or closed.
 You can use similar +'s and -'s for permissions, and create views per permissio
n combinations.
 Later, when users with specific permissions request different views of
 the tree, no problem: all possibilities were already pre-filled.
 You might end up having to generate and cache thousands of views at once,
 but the difference between generating one view and generating thousands
 of views may be quite small, because the majority of that duration is spent
 communicating with the database backend.
 
\end_layout

\begin_layout Standard
If generating thousands of views takes too long for the duration of a single
 request, another option is to generate them on a separate thread.
 Even if it takes a few minutes to generate all the many, many tree views
 combinations, it might be OK in your application for views to be a few
 minutes out-of-date.
 Consider that the scalability benefits can be very significant: you generate
 views only 
\emph on
once 
\emph default
for the entire system, while millions of concurrent users do a simple retrieval
 from the cache.
\end_layout

\begin_layout Subsubsection*
Caching the Data Backend
\end_layout

\begin_layout Standard
Pre-filling the cache can take you very far.
 It is, however, quite complicated to implement, and can be ineffective
 if data changes too frequently or if the cache has to constantly be updated.
 Also, it's hard to scale the pre-filling to 
\emph on
millions 
\emph default
of fragments.
\end_layout

\begin_layout Standard
If we go back to our tree example above, the problem was that it was too
 costly to fetch the entire tree from the database.
 But what if we cache the tree itself? In that case, it would be very quick
 to generate any view of the tree on-demand.
 Instead of caching the view, we'd be caching the data, and achieving the
 same scalability gains.
\end_layout

\begin_layout Standard
Easy, right? So why not cache 
\emph on
all
\emph default
 our data structures? The reason is that it's very difficult to do this
 correctly beyond trivial examples.
 Data structures tend to have complex interrelationships (one-to-many, many-to-m
any, foreign keys, recursive tree structures, graphs, etc.) such that a change
 in data at one point of the structure may alter various others in particular
 ways.
 For example, consider a calendar database, and that you're caching individual
 days with all their events.
 Weekly calendar views are then generated on the fly (and quickly) for users
 according to what kinds of events they want to see in their personal calendars.
 What happens if a user adds a recurring event that happens every Monday?
 You'll need to make sure that all Mondays currently cached would be invalidated
, which might mean tagging all these as “monday” using Prudence's cache
 tags.
 This requires a specific caching strategy for a specific application.
\end_layout

\begin_layout Standard
By all means, cache your data structures if you can't easily cache your
 output, but be aware of the challenge!
\end_layout

\begin_layout Quote
Prudence's sister project, Diligence, is designed specifically to solve
 this problem.
 It not only caches your data structures, but it validates them in memory
 using your coded logic, instead of invalidating them and forcing them to
 be re-fetched from the database.
 It supports data structures commonly used with relational databases, pluggable
 storage technologies, high-performance resource pooling and throttling,
 and natural integration with Prudence.
 Together, 
\begin_inset CommandInset href
LatexCommand href
name "Diligence and Prudence"
target "http://threecrickets.com/diligenceandprudence/"

\end_inset

 form a solid platform for building scalable, data-backed web applications.
 At the time of this writing, Diligence is still under development.
 We hope to release it as open source soon, so stay tuned!
\end_layout

\begin_layout Subsubsection
Cache Backends
\begin_inset CommandInset label
LatexCommand label
name "scaling-tips-cache-backends"

\end_inset


\end_layout

\begin_layout Standard
Your cache backend can become a bottleneck to scalability if 1) it can't
 handle the amount of data you are storing, or 2) it can't respond quickly
 enough to cache fetching.
 
\end_layout

\begin_layout Standard
Before you start worrying about this, consider that it's a rare problem
 to have.
 Even if you are caching millions of pages and fragments, a simple relational-da
tabase-backed cache, such as Prudence's SqlCache implementations, could
 handle this just fine.
 A key/value table is the most trivial workload for relational databases,
 and it's also easy to 
\bar under
shard (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "scaling-tips-by-section"

\end_inset

)
\bar default
.
 Relational database are usually very good at caching these tables in their
 memory and responding optimally to read requests.
 Prudence even lets you chain caches together to create tiers: an in-process
 memory cache in front of a SQL cache would ensure that many requests don't
 even reach the SQL backend.
\end_layout

\begin_layout Standard
High concurrency can also be handled very well by this solution.
 Despite any limits to the number of concurrent connections you can maintain
 to the database, each request is handled very quickly, and it would require
 
\emph on
very 
\emph default
high loads to saturate.
 The math is straightforward: with a 10ms average retrieval time (very pessimist
ic!) and a maximum of 10 concurrent database connections (again, pessimistic!)
 you can handle 1,000 cache hits per second.
 A real environment would likely provide results orders of magnitude better.
\end_layout

\begin_layout Standard
The nice thing about this solution is that it uses the infrastructure you
 already have: the database.
\end_layout

\begin_layout Standard
But, what if you need to handle 
\emph on
millions
\emph default
 of cache hits per second? First, let us congratulate you for your global
 popularity.
 Second, there is a simple solution: distributed memory caches.
 Prudence comes with 
\begin_inset CommandInset href
LatexCommand href
name "Hazelcast"
target "http://www.hazelcast.com/"

\end_inset

 and support for 
\begin_inset CommandInset href
LatexCommand href
name "memcached"
target "http://memcached.org/"

\end_inset

, which both offer much better scalability than database backends.
 Because the cache is in memory, you lose the ability to easily persist
 your cache and keep it warm: restarting your cache nodes will effectively
 reset them.
 There are workarounds---for example, parts of the cache can be persisted
 to a second database-backed cache tier---but this is a significant feature
 to lose.
\end_layout

\begin_layout Quote
Actually, Hazelcast offers fail-safe, live backups.
 While it's not quite as permanent as a database, it might be good enough
 for your needs.
 And memcached has various plugins that allow for real database persistence,
 though using them would require you to deal with the scalability challenges
 of 
\bar under
database backends (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "scaling-tips-data-backends"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Standard
You'll see many web frameworks out there that support a distributed memory
 cache (usually memcached) and recommend you use it (“it's fast!” they claim,
 except that it can be slower per request than optimized databases, and
 that anyway performance does not equal scalability).
 We'd urge you to consider that advice carefully: keeping your cache warm
 is a challenge made much easier if you can store it in a persistent backend,
 and database backends can take you very far in scale without adding a new
 infrastructure to your deployment.
 It's good to know, though, that Prudence's support for Hazelcast and memcached
 is there to help you in case you reach the popularity levels of LiveJournal,
 Facebook, YouTube, Twitter, etc.
\end_layout

\begin_layout Subsubsection
Client-Side Caching
\end_layout

\begin_layout Standard
Modern web browsers support client-side caching, a feature meant to improve
 the user experience and save bandwidth costs.
 A site that makes good use of client-side caching will appear to work fast
 for users, and will also help to increase your site's popularity index
 with search engines.
\end_layout

\begin_layout Standard
Optimizing the user experience is not the topic of this article: our job
 here is to make sure your site doesn't degrade its performance as load
 increases.
 However, client-side caching can indirectly help you scale by reducing
 the number of hits you have to take in order for your application to work.
\end_layout

\begin_layout Quote
Actually, doing a poor job with client-side caching can help you scale:
 users will hate your site and stop using it---voila, less hits you have
 to deal with.
 OK, that was a joke!
\end_layout

\begin_layout Standard
Generally, Prudence handles client-side caching automatically.
 If you cache a page, then headers will be set to ask the client to cache
 for the same length of time.
 By default, conditional mode is used: every time the client tries to view
 a page, it will make a request to make sure that nothing has changed since
 their last request to the page.
 In case nothing has changed, no content is returned.
\end_layout

\begin_layout Standard
You can also turn on “offline caching” mode, in which the client will avoid
 even that quick request.
 Why not enable offline caching by default? Because it involves some risk:
 if you ask to cache a page for one week, but then find out that you have
 a mistake in your application, then users will not see any fix you publish
 until their local cache expires, which can take up to a week! It's important
 that you you understand the implications before using this mode.
 See the 
\bar under
dynamicWebClientCachingMode application setting (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../manual/application/|dynamic-web-client-caching-mode"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Standard
It's generally safer to apply offline caching to your static resources,
 such as graphics and other resources.
 A general custom is to ask the client to cache these “forever” (10 years),
 and then, if you need to update a file, you simply create a new one with
 a new URL, and have all your HTML refer to the new version.
 Because clients cache according to URL, their cached for the old version
 will simply not be ignored.
 See 
\bar under
CacheControlFilter (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../manual/static-web/|cache-control-filter"

\end_inset

)
\bar default
.
 There, you'll also see some more tricks Prudence offers you to help optimize
 the user experience, such as unifying/minimizing client-side JavaScript
 and CSS.
\end_layout

\begin_layout Subsubsection
Upstream Caching
\end_layout

\begin_layout Standard
If you need to quickly scale a web site that has not been designed for caching,
 a band-aid is available: upstream caches, such as 
\begin_inset CommandInset href
LatexCommand href
name "Varnish"
target "http://varnish-cache.org/"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "NCache"
target "http://code.google.com/p/ncache/"

\end_inset

 and even 
\begin_inset CommandInset href
LatexCommand href
name "Squid"
target "http://www.squid-cache.org/"

\end_inset

.
 For archaic reasons, these are called “reverse proxy” caches, but they
 really work more like filters.
 According to attributes in the user request (URL, cookies, etc.), they decide
 whether to fetch and send a cached version of the response, or to allow
 the request to continue to your application servers.
\end_layout

\begin_layout Standard
The crucial use case is archaic, too.
 If you're using an old web framework in which you cannot implement caching
 logic yourself, or cannot plug in to a good cache backend, then these upstream
 caches can do it for you.
\end_layout

\begin_layout Standard
They are problematic in two ways:
\end_layout

\begin_layout Enumerate
Decoupling caching logic from your application means losing many features.
 For example, invalidating portions of the cache is difficult if not impossible.
 It's because of upstream caching, indeed, that so many web sites do a poor
 job at showing up-to-date information.
\end_layout

\begin_layout Enumerate
Filtering actually implements a kind of partitioning, but one that is vertical
 rather than horizontal.
 In horizontal partitioning, a “switch” decides to send requests to one
 cluster of servers or another.
 Within each cluster, you can control capacity and scale.
 But in vertical partitioning, the “filter” handles requests internally.
 Not only is the “filter” more complex and vulnerable than a “switch” as
 a frontend connector to the world, but you've also complicated your ability
 to control the capacity of the caching layer.
 It's embedded inside your frontend, rather than being another cluster of
 servers.
 We'll delve into 
\bar under
backend partitioning (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "scaling-tips-backend-partitioning"

\end_inset

)
\bar default
 below.
\end_layout

\begin_layout Standard
Unfortunately, there is a use case relevant for newer web frameworks, too:
 if you've designed your application poorly, and you have many requests
 that could take a long time to complete, then your thread pools could get
 saturated when many users are concurrently making those requests.
 When saturated, you cannot handle even the super-quick cache requests.
 An upstream cache band-aid could, at least, keep serving its cached pages,
 even though your application servers are at full capacity.
 This creates an illusion of scalability: some users will see your web site
 behaving fine, while others will see it hanging.
\end_layout

\begin_layout Standard
The real solution would be to re-factor your application so that it does
 not have long requests, guaranteeing that you're never too saturated to
 handle tiny requests.
 Below are tips on how to do this.
\end_layout

\begin_layout Subsection
Dealing with Lengthy Requests
\end_layout

\begin_layout Standard
One size does not fit all: you will want to use different strategies to
 deal with different kinds of tasks.
\end_layout

\begin_layout Subsubsection
Deferrable Tasks
\begin_inset CommandInset label
LatexCommand label
name "scaling-tips-deferrable-tasks"

\end_inset


\end_layout

\begin_layout Standard

\emph on
Deferrable tasks are tasks that can be resolved later, without impeding
 on the user's ability to continue using the application.
\end_layout

\begin_layout Standard
If the deferrable task is deterministically fast, you can do all processing
 in the request itself.
 If not, you should queue the task on a handling service.
 Prudence's 
\bar under
tasks (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../manual/tasks/"

\end_inset

)
\bar default
 implementation is a great solution for deferrable tasks, as it lets you
 run tasks on other threads or even distribute them in a 
\begin_inset CommandInset href
LatexCommand href
name "Hazelcast"
target "http://www.hazelcast.com/"

\end_inset

 cluster.
\end_layout

\begin_layout Standard
Deferring tasks does present a challenge to the user experience: What do
 you do if the task fails and the user needs to know about it? One solution
 can be to send a warning email or other kind of message to the user.
 Another solution could be to have your client constantly poll in the background
 (via “AJAX”) to see if there are any error messages, which in turn might
 require you to keep a queue of such error messages per user.
\end_layout

\begin_layout Standard
Before you decide on deferring a task, think carefully of the user experience:
 for example, users might be constantly refreshing a web page waiting to
 see the results of their operation.
 Perhaps the task you thought you can defer should actually be considered
 necessary (see below)?
\end_layout

\begin_layout Subsubsection
Necessary Tasks
\end_layout

\begin_layout Standard

\emph on
Necessary tasks are tasks that must be resolved before the user can continue
 using the application.
\end_layout

\begin_layout Standard
If the necessary task is deterministically fast, you can do all processing
 in the request itself.
 If not, you should queue the task on a handling service and return a “please
 wait” page to the user.
\end_layout

\begin_layout Standard
It would be nice to add a progress bar or some other kind of estimation
 of how long it would take for the task to be done, with a maximum duraton
 set after which the task should be considered to have failed.
 The client would poll until the task status is marked “done,” after which
 they would be redirected back to the application flow.
 Each polling request sent by the client could likely be processed very
 quickly, so this this strategy effectively breaks the task into many small
 requests (“It's better to have many short requests than one long one”).
\end_layout

\begin_layout Standard
Prudence's 
\bar under
tasks (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../manual/tasks/"

\end_inset

)
\bar default
 implementation is a good start for creating such a mechanism: however,
 it would be up to you to create a “please wait” mechanism, as well as a
 way to track the tasks' progress and deal with failure.
\end_layout

\begin_layout Standard
Implementing such a handling service is not trivial.
 It adds a new component to your architecture, one that also has to be made
 to scale.
 One can also argue that it adversely affects user experience by adding
 overhead, delaying the time it takes for the task to complete.
 The bottom line, though, is you're vastly increasing concurrency and your
 ability to scale.
 And, you're improving the user experience in one respect: they would get
 a feedback on what's going on rather than having their browsers spin, waiting
 for their requests to complete.
\end_layout

\begin_layout Subsubsection
File Uploads
\end_layout

\begin_layout Standard
These are potentially very long requests that you cannot break into smaller
 tasks, because they depend entirely on the client.
 As such, they present a unique challenge to scalability.
\end_layout

\begin_layout Standard
Fortunately, Prudence handles client requests via non-blocking I/O, meaning
 that large file uploads will not hold on to a single thread for the duration
 of the upload.
 See 
\bar under
conversation.form (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../manual/api/|conversation-form"

\end_inset

)
\bar default
.
\end_layout

\begin_layout Standard
Unfortunately, many concurrent uploads will still saturate your threads.
 If your application relies on frequent file uploads, you are advised to
 handle such requests on separate Prudence instances, so that uploads won't
 stop your application from handling other web requests.
 You may also consider using a third-party service specializing in file
 storage and web uploads.
\end_layout

\begin_layout Subsubsection
Asynchronous Request Processing
\end_layout

\begin_layout Standard
Having the client poll until a task is completed lets you break up a task
 into multiple requests and increase concurrency.
 Another strategy is to break an 
\emph on
individual request
\emph default
 into pieces.
 While you're processing the request and preparing the response, you can
 free the web thread to handle other requests.
 When you're ready to deliver content, you raise a signal, and the next
 available web thread takes care of sending your response to the client.
 You can continue doing this indefinitely until the response is complete.
 From the client's perspective it's a single request: a web browser, for
 example, would spin until the request was completed.
\end_layout

\begin_layout Standard
You might be adding some extra time overhead for the thread-switching on
 your end, but the benefits for scalability are obvious: you are increasing
 concurrency by shortening the time you are holding on to web threads.
\end_layout

\begin_layout Standard
For web services that deliver heavy content, such as images, video, audio,
 it's absolutely necessary.
 Without it, a single user could tie up a thread for minutes, if not hours.
 You would still get degraded performance if you have more concurrent users
 than you have threads, but at least degradation will be shared among users.
 Without asynchronous processing, each user would tie up one thread, and
 when that finite resource is used up, more users won't be able to access
 your service.
\end_layout

\begin_layout Standard
Even for lightweight content such as HTML web pages, asynchronous processing
 can be a good tactic for increasing concurrency.
 For example, if you need to fetch data from a backend with non-deterministic
 response time, it's best to free the web thread until you actually have
 content available for the response.
\end_layout

\begin_layout Standard
It's not a good idea to do this for every page.
 While it's better to have many short requests instead of one long one,
 it's obviously better to have one short request rather than many short
 ones.
 Which web requests are good candidates for asynchronous processing?
\end_layout

\begin_layout Enumerate
Requests for which processing is made of independent operations.
 (They'll likely be required to work in sequence, but if they can be processed
 in parallel, even better!)
\end_layout

\begin_layout Enumerate
Requests that must access backend services with non-deterministic response
 times.
\end_layout

\begin_layout Standard
And, even for #2, if the service can take a 
\emph on
very
\emph default
 long time to respond, consider that it might be better to queue the task
 on a task handler and give proper feedback to the user.
\end_layout

\begin_layout Standard
And so, after this lengthy discussion, it turns out that there aren't that
 many places where asynchronous processing can help you scale.
 Caching is far more useful.
\end_layout

\begin_layout Standard
As of version 1.1, Prudence has limited support for asynchronous processing,
 via 
\bar under
conversation.defer (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "../manual/api/|conversation-defer"

\end_inset

)
\bar default
.
 Better support is planned for a future version.
\end_layout

\begin_layout Subsection
Backend Partitioning
\begin_inset CommandInset label
LatexCommand label
name "scaling-tips-backend-partitioning"

\end_inset


\end_layout

\begin_layout Standard
You can keep adding more nodes behind a load balancer insofar as each request
 does not have to access shared state.
 Useful web applications, however, are likely data-driven, requiring considerabl
e state.
\end_layout

\begin_layout Standard
If the challenge in handling web requests is cutting down the length of
 request, then that of backends is the struggle against degraded performance
 as you add new nodes to your database cluster.
 These nodes have to synchronize their state with each other, and that synchroni
zation overhead increases exponentially.
 There's a definite point of diminishing returns.
\end_layout

\begin_layout Standard
The backend is one place where high-performance hardware can help.
 Ten expensive, powerful machines might be equal in total power to forty
 cheap machines, but they require a quarter of the synchronization overhead,
 giving you more elbow room to scale up.
 Fewer nodes means better scalablity.
\end_layout

\begin_layout Standard
But CPUs can only take you so far.
\end_layout

\begin_layout Standard
Partitioning is as useful to backend scaling as caching is to web request
 scaling.
 Rather than having one big cluster of identical nodes, you would have several
 smaller, independent clusters.
 This lets you add nodes to each cluster without spreading synchronization
 overhead everywhere.
 The more partitions you can create, the better you'll be able to scale.
\end_layout

\begin_layout Standard
Partitioning can happen in various components of your application, such
 as application servers, the caching system, task queues, etc.
 However, it is most effective, and most complicated to implement, for databases.
 Our discussion will thus focus on relational (SQL) databases.
 Other systems would likely require simpler subsets of these strategies.
\end_layout

\begin_layout Subsubsection
Reads vs.
 Writes
\end_layout

\begin_layout Standard
This simple partitioning scheme greatly reduces synchronization overhead.
 Read-only servers will never send data to the writable servers.
 Also, knowing that they don't have to handle writes means you can optimize
 their configurations for aggressive caching.
\end_layout

\begin_layout Standard
(In fact, some database synchronization systems will only let you create
 this kind of cluster, providing you with one “master” writable node and
 several read-only “slaves.” They force you to partition!)
\end_layout

\begin_layout Standard
Another nice thing about read/write partitioning is that you can easily
 add it to all the other strategies.
 Any cluster can thus be divided into two.
\end_layout

\begin_layout Standard
Of course, for web services that are heavily balanced towards writes, this
 is not an effective strategy.
 For example, if you are implementing an auditing service that is constantly
 being bombarded by incoming data, but is only queried once in a while,
 then an extra read-only node won't help you scale.
\end_layout

\begin_layout Standard
Note that one feature you lose is the ability to have a transaction in which
 a write 
\emph on
might
\emph default
 happen, because a transaction cannot contain both a read-only node and
 a write-only node.
 If you must have atomicity, you will have to do your transaction on the
 writable cluster, or have two transactions: one to lookup and see if you
 need to change the data, and the second to perform the change---while first
 checking again that data didn't change since the previous transaction.
 Too much of this obviously lessens the effectiveness of read/write partitioning.
\end_layout

\begin_layout Subsubsection
By Feature
\end_layout

\begin_layout Standard
The most obvious and effective partitioning scheme is by feature.
 Your site might offer different kinds of services that are functionally
 independent of each other, even though they are displayed to users as united.
 Behind the scenes, each feature uses a different set of tables.
 The rule of thumb is trivial: if you can put the tables in separate databases,
 then you can put these databases in separate clusters.
\end_layout

\begin_layout Standard
One concern in feature-based partitioning is that there are a few tables
 that still need to be shared.
 For example, even though the features are separate, they all depend on
 user settings that are stored in one table.
\end_layout

\begin_layout Standard
The good news is that it can be cheap to synchronize just this one table
 between all clusters.
 Especially if this table doesn't change often---how often do you get new
 users signing up for your service?---then synchronization overhead will
 be minimal.
\end_layout

\begin_layout Standard
If your database system doesn't let you synchronize individual tables, then
 you can do it in your code by writing to all clusters at the same time.
\end_layout

\begin_layout Standard
Partitioning by feature is terrific in that it lets you partition other
 parts of the stack, too.
 For example, you can also use a different set of web servers for each feature.
\end_layout

\begin_layout Standard
Also consider that some features might be candidates for using a 
\bar under
“NoSQL” database (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "scaling-tips-data-backends"

\end_inset

)
\bar default
.
 Choose the best backend per feature.
\end_layout

\begin_layout Subsubsection
By Section
\begin_inset CommandInset label
LatexCommand label
name "scaling-tips-by-section"

\end_inset


\end_layout

\begin_layout Standard
Another kind of partitioning is sometimes called “sharding.” It involves
 splitting up tables into sections that can be placed in different databases.
 Some databases support sharding as part of their synchronization strategy,
 but you can also implement it in your code.
 The great thing about sharding is that it lets you create as many shards
 (and clusters) as you want.
 It's the key to the truly large scale.
\end_layout

\begin_layout Standard
Unfortunately, like partitioning by feature, sharding is not always possible.
 You need to also shard all related tables, so that queries can be self-containe
d within each shard.
 It's thus most appropriate for one-to-many data hierarchies.
 For example, if your application is a blog that supports comments, then
 you put some blogs and their comments on one shard, and others in another
 shard.
 However, if, say, you have a feature where blog posts can refer to other
 arbitrary blog posts, then querying for those would have to cross shard
 boundaries.
\end_layout

\begin_layout Standard
The best way to see where sharding is possible is to draw a diagram of your
 table relationships.
 Places in the diagram which look like individual trees---trunks spreading
 out into branches and twigs---are good candidates for sharding.
\end_layout

\begin_layout Standard
How to decide which data goes in which shard?
\end_layout

\begin_layout Standard
Sometimes the best strategy is arbitrary.
 For example, put all the even-numbered IDs in one shard, and the odd-numbered
 ones in another.
 This allows for straightforward growth because you can just switch it to
 division by three if you want three shards.
 
\end_layout

\begin_layout Standard
Another strategy might seem obvious: If you're running a site which shows
 different sets of data to different users, then why not implement it as
 essentially separate sites? For example, a social networking site strictly
 organized around individual cities could have separate database clusters
 per city.
\end_layout

\begin_layout Standard
A “region” can be geographical, but also topical.
 For example, a site hosting dance-related discussion forums might have
 one cluster for ballet and one for tango.
 A “region” can also refer to user types.
 For example, your social networking site could be partitioned according
 to age groups.
\end_layout

\begin_layout Standard
The only limitation is queries.
 You can still let users access profiles in other regions, but cross-regional
 relational queries won't be possible.
 Depending on what your application does, this could be a reasonable solution.
\end_layout

\begin_layout Standard
A great side-benefit to geographical partitioning is that you can host your
 servers at data centers within the geographical location, leading to better
 user experiences.
 Regional partitioning is useful even for “NoSQL” databases.
\end_layout

\begin_layout Subsubsection*
Coding Tips for Partitioning
\end_layout

\begin_layout Standard
If you organize your code well, it would be very easy to implement partitioning.
 You simply assign different database operations to use different connection
 pools.
 If it's by feature, then you can hard code it for those features.
 If it's sharding, then you add a switch before each operation telling it
 which connection pool to use.
\end_layout

\begin_layout Standard
For example:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "breaklines=true"
inline false
status open

\begin_layout Plain Layout

def get_blogger_profile(user_id):
\end_layout

\begin_layout Plain Layout

	connection = blogger_pool.get_connection()
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	connection.close()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def get_blog_post_and_comments(blog_post_id):
\end_layout

\begin_layout Plain Layout

	shard_id = object.id % 3
\end_layout

\begin_layout Plain Layout

	connection = blog_pools[shard_id].get_connection()
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

	connection.close()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Unfortunately, some programming practices make such an effective, clean
 organization difficult.
\end_layout

\begin_layout Standard
Some developers prefer to use ORMs (object-relational mappers) rather than
 access the database directly.
 Many ORMs do not easily allow for partitioning, either because they support
 only a single database connection pool, or because they don't allow your
 objects to be easily shared between connections.
\end_layout

\begin_layout Standard
For example, your logic might require you to retrieve an “object” from the
 database, and only then decide if you need to alter it or not.
 If you're doing read/write partitioning, then you obviously want to read
 from the read partition.
 Some ORMs, though, have the object tied so strongly to an internal connection
 object that you can't trivially read it from one connection and save it
 into another.
 You'd either have to read the object initially from the write partition,
 minimizing the usefulness of read/write partitioning, or re-read it from
 the write partition when you realize you need to alter it, causing unnecessary
 overhead.
 (Note that you'll need to do this anyway if you need the write to happen
 in a transaction.)
\end_layout

\begin_layout Standard
Object oriented design is also problematic in a more general sense.
 The first principle of object orientation is “encapsulation,” putting your
 code and data structure in one place: the class.
 This might make sense for business logic, but, for the purposes of re-factoring
 your data backend for partitioning or other strategies, you really don't
 want the data access code to be spread out among dozens of classes in your
 application.
 You want it all in one place, preferably even one source code file.
 It would let you plug in a whole new data backend strategy by replacing
 this source code file.
 For data-driven web development, you are better off not being too object
 oriented.
\end_layout

\begin_layout Standard
Even more generally speaking, organizing code together by mechanism or technolog
y, rather than by “object” encapsulation, will let you apply all kinds of
 re-factorizations more easily, especially if you manage to decouple your
 application's data structures from any library-specific data structures.
\end_layout

\begin_layout Subsection
Data Backends
\begin_inset CommandInset label
LatexCommand label
name "scaling-tips-data-backends"

\end_inset


\end_layout

\begin_layout Standard
Relational (SQL) databases such as MySQL were, for decades, the backbone
 of the web.
 They were originally developed as minimal alternatives to enterprise database
 servers such as Oracle Database and IBM's DB2.
 Their modest feature set allowed for better performance, smaller footprints,
 and low investment costs---perfect for web applications.
 The free software LAMP stack (Linux, Apache, MySQL and PHP) 
\emph on
was
\emph default
 the web.
\end_layout

\begin_layout Standard
Relational databases require a lot of synchronization overhead for clusters,
 limiting their scalability.
 Though partitioning can take you far, using a “NoSQL” database could take
 you even further.
\end_layout

\begin_layout Subsubsection
Graph Databases
\end_layout

\begin_layout Standard
If your relational data structure contains arbitrary-depth relationships
 or many “generic” relationships forced into a relational model, then consider
 using a graph database instead.
 Not only will traversing your data be faster, but also the database structure
 will allow for more efficient performance.
 The implications for scalability can be dramatic.
\end_layout

\begin_layout Standard
Social networking applications are often used as examples of graph structures,
 but there are many others: forums with threaded and cross-referenced discussion
s, semantic knowledge bases, warehouse and parts management, music “genomes,”
 user-tagged media sharing sites, and many science and engineering applications.
\end_layout

\begin_layout Standard
Though fast, querying a complex graph can be difficult to prototype.
 Fortunately, the 
\begin_inset CommandInset href
LatexCommand href
name "Gremlin"
target "http://wiki.github.com/tinkerpop/gremlin/"

\end_inset

 and 
\begin_inset CommandInset href
LatexCommand href
name "SPARQL"
target "http://www.w3.org/TR/rdf-sparql-query/"

\end_inset

 languages do for graphs what SQL does for relational databases.
 Your query becomes coherent and portable.
\end_layout

\begin_layout Standard
A popular graph database is 
\begin_inset CommandInset href
LatexCommand href
name "Neo4j"
target "http://neo4j.org/"

\end_inset

, and it's especially easy to use with Prudence.
 Because it's JVM-based, you can access it internally from Prudence.
 It also has embedded bindings for many of Prudence's supported languages,
 and supports a network REST interface which you can easily access via Prudence'
s document.external.
\end_layout

\begin_layout Subsubsection
Document Databases
\end_layout

\begin_layout Standard
If your data is composed mostly of “documents”---self-contained records
 with few relationships to other documents---then consider a document database.
 
\end_layout

\begin_layout Standard
Document databases allow for straightforward distribution and very fine-grained
 replication, requiring considerably less overhead than relational and graph
 databases.
 Document databases are as scalable as data storage gets: variants are used
 by all the super-massive Internet services.
\end_layout

\begin_layout Standard
The cost of this scalability is the loss of your ability to do relational
 queries of your data.
 Instead, you'll be using distributed map/reduce, or rely on an indexing
 service.
 These are powerful tools, but they do not match relational queries in sheer
 flexibility of complex queries.
 Implementing something as simple as a many-to-many connection, the bread-and-bu
tter of relational databases, is non-trivial in document databases.
 Where document databases shine is at listing, sorting and searching through
 very large catalogs of documents.
\end_layout

\begin_layout Standard
Candidate applications include online retail, blogs, wikis, archives, newspapers
, contact lists, calendars, photo galleries, dating profiles\SpecialChar \ldots{}
 The list is
 actually quite long, making document databases very attractive for many
 products.
 But, it's important to always be aware of their limitations: for example,
 merely adding social networking capabilities to a dating site would require
 complex relations that might be better handled with a graph database.
 The combination of a document database with a graph database might, in
 fact, be enough to remove any benefit a relational database could bring.
\end_layout

\begin_layout Standard
A popular document database is 
\begin_inset CommandInset href
LatexCommand href
name "MongoDB"
target "http://www.mongodb.org/"

\end_inset

.
 Though document-based, it has a few basic relational features that might
 be just good enough for your needs.
 Another is 
\begin_inset CommandInset href
LatexCommand href
name "CouchDB"
target "http://couchdb.apache.org/"

\end_inset

, which is a truly distributed database.
 With CouchDB it's trivial to replicate and synchronize data with clients'
 desktops or mobile devices, and to distribute it to partners.
 It also supports a REST interface which you can easily access via Prudence's
 document.external.
 And, both MongoDB and CouchDB use JavaScript extensively, making it natural
 to use with Prudence's JavaScript flavor.
\end_layout

\begin_layout Quote
We've started a project 
\begin_inset CommandInset href
LatexCommand href
name "to better integrate Prudence JavaScript with MongoDB"
target "http://code.google.com/p/mongodb-json/"

\end_inset

.
 It is included in the “Savory JavaScript” edition.
\end_layout

\begin_layout Subsubsection
Column Databases
\end_layout

\begin_layout Standard
These can be considered as subsets of document databases.
 The “document,” in this case, is required to have an especially simple,
 one-dimensional structure.
\end_layout

\begin_layout Standard
This requirement allows optimization for a truly massive scale.
\end_layout

\begin_layout Standard
Column databases occupy the “cloud” market niche: they allow companies like
 Google and Amazon to offer cheap database storage and services for third
 parties.
 See Google's 
\begin_inset CommandInset href
LatexCommand href
name "Datastore"
target "http://code.google.com/appengine/docs/java/datastore/"

\end_inset

 (based on 
\begin_inset CommandInset href
LatexCommand href
name "Bigtable"
target "http://labs.google.com/papers/bigtable.html"

\end_inset

) and Amazon's 
\begin_inset CommandInset href
LatexCommand href
name "SimpleDB"
target "http://aws.amazon.com/simpledb/"

\end_inset

 (based on 
\begin_inset CommandInset href
LatexCommand href
name "Dynamo"
target "http://www.allthingsdistributed.com/2007/10/amazons_dynamo.html"

\end_inset

; actually, Dynamo is a “key/value” database, which is even more opaque
 than a column database).
\end_layout

\begin_layout Standard
Though you can run your own column database via open source projects like
 
\begin_inset CommandInset href
LatexCommand href
name "Cassandra"
target "http://cassandra.apache.org/"

\end_inset

 (originally developed by/for Facebook), 
\begin_inset CommandInset href
LatexCommand href
name "HBase"
target "http://hadoop.apache.org/hbase/"

\end_inset

 and 
\begin_inset CommandInset href
LatexCommand href
name "Redis"
target "http://redis.io/"

\end_inset

, the document databases mentioned above offer richer document structures
 and more features.
 Consider column databases only if you need truly massive scale, or if you
 want to make use of the cheap storage offered by “cloud” vendors.
\end_layout

\begin_layout Subsubsection
Best of All Worlds
\end_layout

\begin_layout Standard
Of course, consider that it's very possible to use both SQL and “NoSQL”
 (graph, document, column) databases together for different parts of your
 application.
 See 
\bar under
backend partitioning (page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "scaling-tips-backend-partitioning"

\end_inset

)
\bar default
.
\end_layout

\end_body
\end_document
