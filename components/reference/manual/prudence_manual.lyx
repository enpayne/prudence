#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{prettyref}
\newrefformat{}{section~\ref{#1}}
\sloppy
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 0
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
The Prudence Manual
\end_layout

\begin_layout Author
Version @VERSION@
\begin_inset Newline newline
\end_inset

Main text written by Tal Liron
\end_layout

\begin_layout Standard
\noindent
\align center
Copyright 2009-2013 by Three Crickets LLC.
\begin_inset Newline newline
\end_inset

This work is licensed under a
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License"
target "http://creativecommons.org/licenses/by-nc-sa/3.0/"

\end_inset

.
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Tutorial
\end_layout

\begin_layout Subsection
Installing Prudence
\end_layout

\begin_layout Standard
Download a distribution
\end_layout

\begin_layout Standard
Starting Prudence
\end_layout

\begin_layout Subsubsection
Further Exploration
\end_layout

\begin_layout Itemize
Start Prudence as a system service
\end_layout

\begin_layout Itemize
Logging
\end_layout

\begin_layout Subsection
At a Glance
\end_layout

\begin_layout Subsubsection
/component/
\end_layout

\begin_layout Standard
A 
\begin_inset Quotes eld
\end_inset

component
\begin_inset Quotes erd
\end_inset

 is the largest logical entity REST.
 It can encapsulate many servers and clients.
\end_layout

\begin_layout Standard
In Prudence, the component is bootstrapped using straightforward JavaScript
 code, starting with default.js.
 The code makes sure to initialize all your applications, servers and clients,
 as well as related services, and bind them to your component.
\end_layout

\begin_layout Subsubsection
/component/applications/
\end_layout

\begin_layout Subsubsection
/component/libraries/scripturian/
\end_layout

\begin_layout Subsubsection
/component/libraries/prudence/
\end_layout

\begin_layout Subsubsection
/component/libraries/web/
\end_layout

\begin_layout Standard
Here you can put static resources that you wish to have shared by all your
 applications.
\end_layout

\begin_layout Standard
It's a good place to put client-side JavaScript frameworks such as Ext JS
 and jQuery.
\end_layout

\begin_layout Subsubsection
/component/libraries/jars/
\end_layout

\begin_layout Standard
This is where JVM libraries are installed.
 This includes all of Prudence's dependencies, and you can add your own,
 too.
\end_layout

\begin_layout Standard
You can use JVM APIs from JavaScript almost identically to how they are
 used in Java.
\end_layout

\begin_layout Subsubsection
/cache/
\end_layout

\begin_layout Subsubsection
Further Exploration
\end_layout

\begin_layout Itemize
Learn about bootstrapping with Sincerity
\end_layout

\begin_layout Itemize
Configure your component
\end_layout

\begin_layout Subsection
Your First Application
\end_layout

\begin_layout Subsubsection
The 
\begin_inset Quotes eld
\end_inset

prudence
\begin_inset Quotes erd
\end_inset

 Command
\end_layout

\begin_layout Subsubsection
/resources/
\end_layout

\begin_layout Subsubsection
/fragments/
\end_layout

\begin_layout Subsubsection
/libraries/
\end_layout

\begin_layout Subsubsection
Further Exploration
\end_layout

\begin_layout Itemize
Configure your application
\end_layout

\begin_layout Itemize
Managing the URI-space
\end_layout

\begin_layout Subsection
Generating HTML
\end_layout

\begin_layout Subsubsection
Further Exploration
\end_layout

\begin_layout Itemize
Textual Resources
\end_layout

\begin_layout Itemize
Adding more languages
\end_layout

\begin_layout Subsection
A Manual Resource
\end_layout

\begin_layout Subsubsection
Further Exploration
\end_layout

\begin_layout Itemize
Manual Resources
\end_layout

\begin_layout Section
Managing the URI-space
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

URI-space
\begin_inset Quotes erd
\end_inset

 represents the published (publicly or internally: more on that later) set
 of all URIs supported by your server.
 
\begin_inset Quotes eld
\end_inset

Supported
\begin_inset Quotes erd
\end_inset

 here means that unsupported URIs should return a 
\begin_inset Quotes eld
\end_inset

not found
\begin_inset Quotes erd
\end_inset

 error (404).
\end_layout

\begin_layout Standard
Importantly, the URI-space can be potentially 
\emph on
infinite
\emph default
, in that you may support URI templates that match any number of actual
 URIs (within the limitations of maximum URI length).
 For example, 
\begin_inset Quotes eld
\end_inset

/service/{id}/
\begin_inset Quotes erd
\end_inset

 could match 
\begin_inset Quotes eld
\end_inset

/service/1/
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

/service/23664/
\begin_inset Quotes erd
\end_inset

, etc.
\end_layout

\begin_layout Standard
The URI-space is mostly configured in the application's routing.js.
 However, the resource implementations can add their own special handling.
 For example, in the above example we can make sure in code that 
\begin_inset Quotes eld
\end_inset

{id}
\begin_inset Quotes erd
\end_inset

 would always be a decimal integer, this limiting the extent of the URI-space.
\end_layout

\begin_layout Standard
Prudence offers three built-in ways for you to support a URI or a URI template:
\end_layout

\begin_layout Enumerate

\series bold
Resource Dispatching
\series default
: In your application's routing.js you can map URIs or URI templates to a
 custom ID, which is then dispatched to your resource handling code.
 Dispatching provides the cleanest and most flexible separation between
 URIs and their implementation.
\end_layout

\begin_layout Enumerate

\series bold
Resource Mapping
\series default
: The filesystem hierarchy under an application's 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

 subdirectory is directly mapped to URIs (but not URI templates).
 Both directory- and file-names are mapped in order of depth.
 By default, Prudence hides filename extensions from the published URIs,
 but uses these extensions to extracts MIME-type information for the resources.
 Also, mapping adds trailing slashes by default, by redirecting URIs without
 trailing slash to include them (on the client's side).
 Filesystem mapping provides the most 
\begin_inset Quotes eld
\end_inset

transparent
\begin_inset Quotes erd
\end_inset

 management of your URI-space, because you do not need to edit any configuration
 file: to change URIs, you simply move or rename files and directories.
\end_layout

\begin_layout Enumerate

\series bold
URI Capturing
\series default
: Capturing lets you map URI templates to fixed URIs, as well as perform
 other kinds of internal URI rewrites that are invisible to clients, allowing
 you to provide a published URI-space, which is different from your internal
 mapping structure.
 Its most common use case is to provide a convenient way to combine the
 transparency of filesystem mapping with support for URI templates.
\end_layout

\begin_layout Standard
A common question when embarking on a new project is whether you should
 organize your code around 
\emph on
dispatching
\emph default
 or 
\emph on
mapping
\emph default
.
\end_layout

\begin_layout Standard
Generally, we would say that dispatching should be preferred for larger
 applications, because it allows you full control over you code organization.
 Mapping forces you into the filesystem structure, at least in the final,
 front-facing URI handler---of course, these files can import libraries
 that are structured as you see fit, but the requirement of having an individual
 file per supported URI can be cumbersome, even with smart use of 
\emph on
capturing
\emph default
.
\end_layout

\begin_layout Standard
Note that some Prudence features work 
\emph on
only
\emph default
 in mapping, such as textual and static resources, so it may make sense
 to use both methods in a single application.
\end_layout

\begin_layout Subsection
Routes
\end_layout

\begin_layout Standard
Routes are configured in your application's routing.js, in the 
\begin_inset Quotes eld
\end_inset

app.routes
\begin_inset Quotes erd
\end_inset

 dict.
\end_layout

\begin_layout Standard
The keys of this dict are 
\emph on
URI templates
\emph default
, which look like URIs, but support the following two features:
\end_layout

\begin_layout Itemize

\series bold
Variables
\series default
 are strings wrapped in curly brackets.
 For example, here is a URI template with two variables: 
\begin_inset Quotes eld
\end_inset

/profile/{user}/{service}/
\begin_inset Quotes erd
\end_inset

.
 The variables will match [TODO].
 You can access the string values of there variables in your resource via
 the conversation.locals API.
\end_layout

\begin_layout Itemize
A 
\series bold
wildcard
\series default
 can be used as the last character in the URI template.
 For example, 
\begin_inset Quotes eld
\end_inset

/archive/*
\begin_inset Quotes erd
\end_inset

 will match 
\emph on
any
\emph default
 URI that begins with 
\begin_inset Quotes eld
\end_inset

/archive/
\begin_inset Quotes erd
\end_inset

.
 You can access the remainder of the URI via the [TODO] API.
 Note that Prudence will attempt to match 
\emph on
non
\emph default
-wildcard URI templates first, so a wildcard URI template can be used as
 a general fallback for when other URI templates do not match.
\end_layout

\begin_layout Standard
The possible values of the 
\begin_inset Quotes eld
\end_inset

app.routes
\begin_inset Quotes erd
\end_inset

 dict are very diverse, and some of them allow nesting of further values.
\end_layout

\begin_layout Standard
The standard value is a dict, where the 
\begin_inset Quotes eld
\end_inset

type
\begin_inset Quotes erd
\end_inset

 key defines the type of the value, and the rest of the keys are defined
 according to the type.
 There are also shortcuts and alternate forms for some of the commonly used
 types.
\end_layout

\begin_layout Standard
Almost all of the value types are implemented as classes in the Prudence.Routing
 API namespace (note that the class names have the first character of the
 type capitalized).
 The values set in the dict are sent to the class constructor.
\end_layout

\begin_layout Standard
We will summarize their usage briefly here, but please refer to the API
 documentation for a complete reference.
\end_layout

\begin_layout Subsubsection
static
\end_layout

\begin_layout Itemize
root (defaults to the 
\begin_inset Quotes eld
\end_inset

resources
\begin_inset Quotes erd
\end_inset

 subdirectory under the application directory)
\end_layout

\begin_layout Itemize
listingAllowed (defaults to false)
\end_layout

\begin_layout Itemize
negotiate (defaults to true)
\end_layout

\begin_layout Itemize
compress (defaults to true)
\end_layout

\begin_layout Subsubsection
manual
\end_layout

\begin_layout Subsubsection
textual
\end_layout

\begin_layout Subsubsection
dispatch
\end_layout

\begin_layout Standard
Starting with 
\begin_inset Quotes eld
\end_inset

@
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsubsection
capture
\end_layout

\begin_layout Standard
Just a URI, starting with 
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Possibly ending in 
\begin_inset Quotes eld
\end_inset

!
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsubsection
router
\end_layout

\begin_layout Subsubsection
chain
\end_layout

\begin_layout Standard
Array
\end_layout

\begin_layout Subsubsection
resource
\end_layout

\begin_layout Subsubsection
addSlash
\end_layout

\begin_layout Subsubsection
filter
\end_layout

\begin_layout Subsubsection
javaScriptUnifyMinify
\end_layout

\begin_layout Subsubsection
cssUnifyMinify
\end_layout

\begin_layout Subsubsection
zuss
\end_layout

\begin_layout Subsubsection
chacheControl
\end_layout

\begin_layout Standard

\series bold
hidden
\end_layout

\begin_layout Standard
Special! Not actually handled by a class.
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

!
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsection
Resource Dispatching
\end_layout

\begin_layout Subsection
Resource Mapping
\end_layout

\begin_layout Subsection
URI Capturing
\end_layout

\begin_layout Subsection
Virtual Hosts
\end_layout

\begin_layout Subsection
Architecture Tips
\end_layout

\begin_layout Standard
REST does not standardize URI-spaces, and indeed has little to say about
 URI design.
 However, it does 
\emph on
imply
\emph default
 a preference for certain architectural principles.
\end_layout

\begin_layout Standard
It's a good idea to think very carefully about your URI-space.
 A RESTful URI-space can help you define well-encapsulated RESTful resources.
\end_layout

\begin_layout Subsubsection
Nouns vs.
 Verbs
\end_layout

\begin_layout Standard
It's useful to think of URIs as syntactic 
\emph on
nouns
\emph default
, a grammatical counterpart to HTTP's 
\emph on
verbs
\emph default
.
 In other worlds, make sure that you do not include verbs in your URIs.
 Examples:
\end_layout

\begin_layout Itemize
Good: 
\begin_inset Quotes eld
\end_inset

/service/{id}/status/
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Bad: 
\begin_inset Quotes eld
\end_inset

/service/{id}/start/
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

/service/{id}/stop/
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
What is wrong with verbs in URIs?
\end_layout

\begin_layout Standard
One potential problem is clarity.
 Which HTTP verb should be used on a verb URI? Do you need to POST, PUT
 or DELETE to 
\begin_inset Quotes eld
\end_inset

/service/{id}/stop/
\begin_inset Quotes erd
\end_inset

 in order to stop the service? Of course, you can support all and document
 this, but it won't be immediately obvious to the user.
\end_layout

\begin_layout Standard
A second potential problem is that you need to keep increasing the size
 of your URI-space the more actions of this sort you want to support.
 [SO?]
\end_layout

\begin_layout Standard
A third, more serious potential problem is idempotency.
 The idempotent verbs PUT and DELETE may be optimized by the HTTP infrastructure
 (for example, a smart load balancer) such that requests arrive more than
 once: this is allowed by the very definition of idempotency.
 However, your operations 
\emph on
may
\emph default
 not be semantically idempotent.
 For example, if a 
\begin_inset Quotes eld
\end_inset

stop
\begin_inset Quotes erd
\end_inset

 is sent to an already-stopped service, it may return an 
\begin_inset Quotes eld
\end_inset

already stopped
\begin_inset Quotes erd
\end_inset

 500 error.
 In this case, if the infrastructure allows for two 
\begin_inset Quotes eld
\end_inset

stop
\begin_inset Quotes erd
\end_inset

 commands to come through, then the user may get an error even though the
 operation succeeded for the first 
\begin_inset Quotes eld
\end_inset

stop.
\begin_inset Quotes erd
\end_inset

 There's an easy way around this: simply allow 
\emph on
only
\emph default
 POST, the non-idempotent verb, for all such operations.
 The infrastructure will never allow more than request to come through per
 POST.
 However, if you enforce the use of POST, you will lose the ability of the
 infrastructure to optimize for non-idempotency.
 POST is the least scalable HTTP verb.
\end_layout

\begin_layout Standard
The bottom line is that if you standardize on only using nouns for your
 URIs, you will avoid many of these semantic entanglements.
\end_layout

\begin_layout Standard
Note: Beware of gerunds! A URI such as 
\begin_inset Quotes eld
\end_inset

/service/{id}/stopping/
\begin_inset Quotes erd
\end_inset

 is technically a noun, but allows for some verb-related problems to creep
 in.
\end_layout

\begin_layout Subsubsection
Do You Really Need REST?
\end_layout

\begin_layout Standard
In the above section, it was suggested that you prefer nouns to verbs.
 However, this preference may not make much sense to apply in your application.
 Your application may be very command-oriented, such that you will end up
 with a very small set of 
\begin_inset Quotes eld
\end_inset

noun
\begin_inset Quotes erd
\end_inset

 URIs that need to support a vast amount of commands.
\end_layout

\begin_layout Standard
REST shines because it is based on a tiny set of very tightly defined verbs:
 GET, POST, PUT, DELETE.
 The entire infrastructure is highly optimized around them: load balancers,
 caches, browsers, gateways, etc., all should know how best to handle each
 of these for maximum scalability and reliability.
 But, it's entirely possible that your needs cannot be easily satisfied
 by just four verbs.
\end_layout

\begin_layout Standard
And that's OK.
 REST is not always the best solution for APIs.
\end_layout

\begin_layout Standard
Instead, take a look at RPC (Remote Procedure Call) mechanisms.
 The Diligence framework, based on Prudence, provides robust and powerful
 support for JSON-RPC, XML-RPC and ExtDirect, allowing you to hook a JavaScript
 function on the server directly to a URI.
 In terms of HTTP, these protocols all use HTTP POST, and do not leverage
 the HTTP infrastructure as well as a more fully RESTful API.
 But, one size does not fit all, an an RPC-based solution may prove a better
 match for your project.
\end_layout

\begin_layout Standard
It's also perfectly possible to allow for both REST and RPC.
 Use each approach where it is most appropriate.
\end_layout

\begin_layout Subsubsection
Hierarchies
\end_layout

\begin_layout Standard
It's entirely a matter of convention that the use of 
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset

 in URIs implies hierarchy.
 Historically, the convention was likely imported from filesystem paths,
 where a name before a 
\begin_inset Quotes eld
\end_inset

/
\begin_inset Quotes erd
\end_inset

 signifies a directory rather than a file.
\end_layout

\begin_layout Standard
This convention is useful because it's very familiar to users, but additionally
 it implies semantic properties that can add clarity and power to your resource
 design.
 There are two possible semantic principles you may consider:
\end_layout

\begin_layout Enumerate
A descendant resource 
\emph on
belongs to
\emph default
 its ancestor, such that resources have cascading relationships in the hierarchy.
 This implies two rules:
\end_layout

\begin_deeper
\begin_layout Enumerate
Operations on a resource 
\emph on
may
\emph default
 affect descendants.
 This rule is most obvious when applied to the DELETE verb: for example,
 if you delete 
\begin_inset Quotes eld
\end_inset

/user/{id}/
\begin_inset Quotes erd
\end_inset

, then it is expected that the resources at 
\begin_inset Quotes eld
\end_inset

/user/{id}/profile/
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

/user/{id}/preferences/
\begin_inset Quotes erd
\end_inset

 also be deleted.
 A PUT, too, would also affect the descendant resources.
\end_layout

\begin_layout Enumerate
Operations on a resource 
\emph on
should not
\emph default
 affect ancestors.
 In other words, a descendant's state is isolated from its ancestors.
 For example, if I send a POST to 
\begin_inset Quotes eld
\end_inset

/user/{id}/profile/
\begin_inset Quotes erd
\end_inset

, the representation at 
\begin_inset Quotes eld
\end_inset

/user/{id}/
\begin_inset Quotes erd
\end_inset

 should remain unaltered.
\end_layout

\end_deeper
\begin_layout Enumerate
A descendant resource 
\emph on
belongs to
\emph default
 its ancestor and also represents 
\emph on
an aspect of
\emph default
 its ancestor, such that operations on a resource can be fine-tuned to particula
r aspects of it.
 This implies three rules:
\end_layout

\begin_deeper
\begin_layout Enumerate
Descendant representations 
\emph on
are included
\emph default
 in ancestor representations.
 For example, a GET on 
\begin_inset Quotes eld
\end_inset

/service/{id}/
\begin_inset Quotes erd
\end_inset

 would include information about the status that you would see if you GET
 on 
\begin_inset Quotes eld
\end_inset

/service/{id}/status/
\begin_inset Quotes erd
\end_inset

.
 The latter URI makes it easier for the client to direct operations at the
 status aspect.
\end_layout

\begin_layout Enumerate
Operations on a resource 
\emph on
may
\emph default
 affect descendants.
 See above.
\end_layout

\begin_layout Enumerate
Operations on a resource 
\emph on
will
\emph default
 affect ancestors.
 This is the 
\emph on
opposite 
\emph default
of the above: the descendant's state is 
\emph on
not isolated 
\emph default
from its ancestors.
 For example, a POST to 
\begin_inset Quotes eld
\end_inset

/service/{id}/status/
\begin_inset Quotes erd
\end_inset

 would surely also affect 
\begin_inset Quotes eld
\end_inset

/service/{id}/
\begin_inset Quotes erd
\end_inset

, which includes the status.
\end_layout

\end_deeper
\begin_layout Standard
You can see from the difference between rule 1.b and 2.c.
 that it's important to carefully define the 
\emph on
nature
\emph default
 of your hierarchical relationships.
 Unlike filesystem directory hierarchies, in a URI-space there is no single
 standard or interpretation of what of a hierarchy means.
\end_layout

\begin_layout Standard
Note that a format should not be considered 
\begin_inset Quotes eld
\end_inset

an aspect
\begin_inset Quotes erd
\end_inset

 in the sense used in principle 2.
 For example, 
\begin_inset Quotes eld
\end_inset

/service/{id}/html/
\begin_inset Quotes erd
\end_inset

 would not be a good way to support an HTML format for 
\begin_inset Quotes eld
\end_inset

/service/{id}/
\begin_inset Quotes erd
\end_inset

.
 The reason is that you would be allowing for more than one URI for the
 same encapsulated resource, creating confusion for users.
 For example, it's not immediately clear what would happen if they DELETE
 
\begin_inset Quotes eld
\end_inset

/service/{id}/html/
\begin_inset Quotes erd
\end_inset

.
 Would that just remove the ability to represent the service as HTML? Or
 delete the service itself?
\end_layout

\begin_layout Standard
Supporting multiple formats is best handled with content negotiation, within
 the REST architecture.
 If further formatting is required, URI query parameters can be used.
 For example: 
\begin_inset Quotes eld
\end_inset

/service/{id}/?indent=2
\begin_inset Quotes erd
\end_inset

 might return a JSON representation with 2-space indentation.
\end_layout

\begin_layout Subsubsection
Plural vs.
 Singular
\end_layout

\begin_layout Subsubsection
Documentation
\end_layout

\begin_layout Standard
If you create a programming language API, you will surely want to document
 it in a human language.
 You will want to define the acceptable types and usages of function arguments,
 describe return values, possible raises exceptions, add implementation
 and performance notes, etc.
 Many programming languages include tools for embedding such documentation
 as comments in the source code, and generating a reference manual from
 it.
\end_layout

\begin_layout Standard
Consider that documenting your URI-space is just as important.
 A tool to generate such documentation for you is being considered for a
 future version of Prudence.
 Until it is available, consider adopting a resource documentation standard
 for your project.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

 * This resource represents a service running on the server.
 Servers have unique
\end_layout

\begin_layout Plain Layout

 * IDs defined by integers.
 A service can be either active or inactive.
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * Use POST to change the name or status of an existing service.
 You may
\end_layout

\begin_layout Plain Layout

 * not use it change the ID of an existing service.
 PUT will create a new
\end_layout

\begin_layout Plain Layout

 * service, and DELETE will stop and remove it.
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * Implementation note: if you PUT a service with an ID that already exists,
 then
\end_layout

\begin_layout Plain Layout

 * it will only stop and restart the service rather than removing/recreate
 it,
\end_layout

\begin_layout Plain Layout

 * which would be too resource intensive.
 Use DELETE if you absolutely need the
\end_layout

\begin_layout Plain Layout

 * service to be removed first, or set the "clean" query param to "true"
 to
\end_layout

\begin_layout Plain Layout

 * force removal.
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * URI: /service/{id:decimal}/
\end_layout

\begin_layout Plain Layout

 * Aspects: /service/{id:decimal}/status/
\end_layout

\begin_layout Plain Layout

 * Verbs: GET, POST, PUT, DELETE
\end_layout

\begin_layout Plain Layout

 * Media types: application/json, application/xml, text/plain (as JSON)
\end_layout

\begin_layout Plain Layout

 * Query params:
\end_layout

\begin_layout Plain Layout

 *  indent: decimal - if non-zero will return a human-readable indented
 version
\end_layout

\begin_layout Plain Layout

 *          of the representation with lines indented by the integer value
\end_layout

\begin_layout Plain Layout

 *  clean: boolean - if "true" or "yes" or "1" wil force removal of an existing
\end_layout

\begin_layout Plain Layout

 *         service during a PUT operation on an existing service
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * Representation as application/json:
\end_layout

\begin_layout Plain Layout

 *  {
\end_layout

\begin_layout Plain Layout

 *   "id": number,
\end_layout

\begin_layout Plain Layout

 *   "name": string (the service name),
\end_layout

\begin_layout Plain Layout

 *   "status": string:"active"|"inactive"
\end_layout

\begin_layout Plain Layout

 *  }
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * POST/PUT payload as application/json:
\end_layout

\begin_layout Plain Layout

 *  {
\end_layout

\begin_layout Plain Layout

 *   "name": ...
\end_layout

\begin_layout Plain Layout

 *   "status": ...
\end_layout

\begin_layout Plain Layout

 *  }
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/*
\end_layout

\begin_layout Plain Layout

 * This resource represents the status of a service.
 
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * DELETE on this resource is identical to PUT or POST with "inactive".
\end_layout

\begin_layout Plain Layout

 * PUT and POST are handled identically.
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * URI: /service/{id:decimal}/status/
\end_layout

\begin_layout Plain Layout

 * Aspect of: /service/{id:decimal}/
\end_layout

\begin_layout Plain Layout

 * Verbs: GET, POST, PUT, DELETE
\end_layout

\begin_layout Plain Layout

 * Media types: text/plain
\end_layout

\begin_layout Plain Layout

 *
\end_layout

\begin_layout Plain Layout

 * Representation as text/plain:
\end_layout

\begin_layout Plain Layout

 *   "active"|"inactive"
\end_layout

\begin_layout Plain Layout

 */
\end_layout

\end_inset


\end_layout

\begin_layout Section
Implementing Resources
\end_layout

\begin_layout Subsection
Comparison Table
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top" width="4cm">
<column alignment="center" valignment="top" width="4cm">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Manual
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Scriptlet
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Static
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Supports URI Mapping
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Supports URI Dispatching
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Yes
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
No
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Filename Extension
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Determines programming language
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Determines MIME type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Determines MIME type
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Filename Pre-extension
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*.m.*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
*.s.*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Programming Languages
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Determined by filename extension
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Determined by scriptlet tags (multiple languages possible per resource)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Content Negotiation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Manually determined in handleInit; multiple MIME types possible
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Single MIME type determined by filename extension; multiple encodings automatica
lly supported and cached
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Single MIME type determined by filename extension; multiple encodings automatica
lly supported
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Server-Side Caching
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Manual (via API)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Automatic (handled by Prudence)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
n/a
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\emph on
Client-Side Caching
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Manual (via API)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Automatic (determined by server-side caching)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Can be added with CacheControlFilter
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Manual Resources
\end_layout

\begin_layout Subsubsection
Mapping vs.
 Dispatching
\end_layout

\begin_layout Subsubsection
handleGetInfo
\end_layout

\begin_layout Subsubsection
Controlling the Formats
\end_layout

\begin_layout Standard
Negotiated via handleInit: the order matters
\end_layout

\begin_layout Standard
You can check what was negotiated
\end_layout

\begin_layout Standard
But you can set it to whatever you want later
\end_layout

\begin_layout Subsubsection
Client-Side Caching
\end_layout

\begin_layout Standard
conversation.modificationDate, conversation.tag
\end_layout

\begin_layout Subsubsection
Server-Side Caching
\end_layout

\begin_layout Standard
Not supported directly.
\end_layout

\begin_layout Subsubsection
Integrating Textual Resources
\end_layout

\begin_layout Subsection
Scriptlet Resources
\end_layout

\begin_layout Standard
Must be mapped.
 In the future may be dispatched.
\end_layout

\begin_layout Subsubsection
Scriptlets
\end_layout

\begin_layout Subsubsection
Working with Different Programming Languages
\end_layout

\begin_layout Subsubsection
Controlling the Format
\end_layout

\begin_layout Standard
Rely on the extension (see static resources) or change it in code.
\end_layout

\begin_layout Subsubsection
Server-Side Caching
\end_layout

\begin_layout Subsubsection
Client-Side Caching
\end_layout

\begin_layout Subsubsection
Scriptlet Plugins
\end_layout

\begin_layout Subsection
Static Resources
\end_layout

\begin_layout Standard
Must be mapped.
\end_layout

\begin_layout Subsubsection
Controlling the Format
\end_layout

\begin_layout Subsubsection
Client-Side Caching
\end_layout

\begin_layout Subsubsection
CSS and JavaScript
\end_layout

\begin_layout Subsection
Integrating Java
\end_layout

\begin_layout Standard
Resources
\end_layout

\begin_layout Standard
Other Restlets
\end_layout

\begin_layout Section
Caching
\end_layout

\begin_layout Subsection
Introduction: Integrated Caching
\end_layout

\begin_layout Subsection
Server-Side Caching
\end_layout

\begin_layout Subsection
Client-Side Caching
\end_layout

\begin_layout Subsubsection
Content Negotiation
\end_layout

\begin_layout Section
Programming
\end_layout

\begin_layout Subsection
Introduction: Scripturian
\end_layout

\begin_layout Subsection
JavaScript
\end_layout

\begin_layout Subsection
Other Languages
\end_layout

\begin_layout Subsection
Execution Environments
\end_layout

\begin_layout Subsubsection
Bootstrap
\end_layout

\begin_layout Standard
Straightforward beginning-to-end script
\end_layout

\begin_layout Standard
Except for initialization tasks
\end_layout

\begin_layout Subsubsection
Manual Resources and Handlers
\end_layout

\begin_layout Subsubsection
Textual Resources
\end_layout

\begin_layout Subsubsection
Cron Tasks
\end_layout

\begin_layout Standard
Two options!
\end_layout

\begin_layout Subsection
APIs
\end_layout

\begin_layout Subsubsection
Scripturian API
\end_layout

\begin_layout Standard
executable
\end_layout

\begin_layout Subsubsection
Resource API
\end_layout

\begin_layout Standard
application
\end_layout

\begin_layout Standard
document
\end_layout

\begin_layout Subsubsection
JavaScript Libraries
\end_layout

\begin_layout Paragraph
Sincerity JavaScript Library
\end_layout

\begin_layout Itemize
/sincerity/calendar/
\end_layout

\begin_layout Itemize
/sincerity/classes/
\end_layout

\begin_layout Itemize
/sincerity/cryptography/
\end_layout

\begin_layout Itemize
/sincerity/files/
\end_layout

\begin_layout Itemize
/sincerity/iterators/
\end_layout

\begin_layout Itemize
/sincerity/json/
\end_layout

\begin_layout Itemize
/sincerity/jvm/
\end_layout

\begin_layout Itemize
/sincerity/localization/
\end_layout

\begin_layout Itemize
/sincerity/lucene/
\end_layout

\begin_layout Itemize
/sincerity/mail/
\end_layout

\begin_layout Itemize
/sincerity/objects/
\end_layout

\begin_layout Itemize
/sincerity/rhino/
\end_layout

\begin_layout Itemize
/sincerity/templates/
\end_layout

\begin_layout Itemize
/sincerity/xml/
\end_layout

\begin_layout Paragraph
Prudence JavaScript Library
\end_layout

\begin_layout Itemize
/prudence/blocks/
\end_layout

\begin_layout Itemize
/prudence/lazy/
\end_layout

\begin_layout Itemize
/prudence/logging/
\end_layout

\begin_layout Itemize
/prudence/resources/
\end_layout

\begin_layout Itemize
/prudence/tasks/
\end_layout

\begin_layout Paragraph
Libraries for Bootstrap and Configuration
\end_layout

\begin_layout Itemize
/sincerity/annotations/
\end_layout

\begin_layout Itemize
/sincerity/container/
\end_layout

\begin_layout Itemize
/prudence/routing/
\end_layout

\begin_layout Itemize
/prudence/lazy/
\end_layout

\begin_layout Section
Working in a Cluster
\end_layout

\begin_layout Subsection
Shared Globals
\end_layout

\begin_layout Subsection
Task Farming
\end_layout

\begin_layout Section
Accepting Uploads
\end_layout

\begin_layout Section
Cookies
\end_layout

\begin_layout Section
Filtering
\end_layout

\begin_layout Subsection
How Routing Works
\end_layout

\begin_layout Subsection
Injection
\end_layout

\begin_layout Subsection
Built-in Filters
\end_layout

\begin_layout Section
Configuring Applications
\end_layout

\begin_layout Subsection
settings.js
\end_layout

\begin_layout Subsubsection
app.settings
\end_layout

\begin_layout Subsubsection
app.settings.description
\end_layout

\begin_layout Subsubsection
app.settings.errors
\end_layout

\begin_layout Subsubsection
app.settings.code
\end_layout

\begin_layout Subsubsection
app.settings.uploads
\end_layout

\begin_layout Subsubsection
app.settings.mediaTypes
\end_layout

\begin_layout Subsubsection
app.globals
\end_layout

\begin_layout Subsection
routing.js
\end_layout

\begin_layout Subsubsection
app.hosts
\end_layout

\begin_layout Subsubsection
app.routes
\end_layout

\begin_layout Subsubsection
app.errors
\end_layout

\begin_layout Subsubsection
app.dispatchers
\end_layout

\begin_layout Subsection
Scheduling Tasks (Cron)
\end_layout

\begin_layout Subsection
Default Directories
\end_layout

\begin_layout Standard
/resources/
\end_layout

\begin_layout Standard
/fragments/
\end_layout

\begin_layout Standard
/libraries/
\end_layout

\begin_layout Standard
/uploads/
\end_layout

\begin_layout Section
Configuring the Component
\end_layout

\begin_layout Standard
Order: applications, services, starts component, then runs initialization
 tasks
\end_layout

\begin_layout Subsection
/component/servers/
\end_layout

\begin_layout Subsection
/component/clients/
\end_layout

\begin_layout Subsection
/component/hosts/
\end_layout

\begin_layout Standard
See virtual hosts in managing URI space.
\end_layout

\begin_layout Subsection
/component/services/
\end_layout

\begin_layout Standard
Run 
\emph on
after
\emph default
 the component is configured but 
\emph on
before
\emph default
 it is started.
\end_layout

\begin_layout Subsubsection
caching
\end_layout

\begin_layout Standard
Configure the caching backend
\end_layout

\begin_layout Subsubsection
distributed
\end_layout

\begin_layout Standard
Load the Hazelcast configuration
\end_layout

\begin_layout Subsubsection
executor
\end_layout

\begin_layout Standard
Configures thread pools for task execution.
\end_layout

\begin_layout Subsubsection
log
\end_layout

\begin_layout Standard
Configures the component's log service, which is used for logging client
 requests.
 (By default web.log)
\end_layout

\begin_layout Subsubsection
singleton
\end_layout

\begin_layout Standard
Prudence assumes a single Restlet Component instance.
 If for some reason you have a more complex setup, you can configure Prudence's
 initialization here.
\end_layout

\begin_layout Subsubsection
scheduler
\end_layout

\begin_layout Standard
Configure the cron scheduler (cron4j)
\end_layout

\begin_layout Subsubsection
status
\end_layout

\begin_layout Standard
Configures Restlet's status service to use Prudence's implementation.
\end_layout

\begin_layout Subsubsection
version
\end_layout

\begin_layout Standard
Provides access to Prudence and Restlet versions.
\end_layout

\begin_layout Subsection
/component/templates/
\end_layout

\begin_layout Section
Debugging
\end_layout

\begin_layout Subsection
Logging
\end_layout

\begin_layout Subsubsection
application.logger
\end_layout

\begin_layout Subsubsection
application.getSubLogger
\end_layout

\begin_layout Subsubsection
Configuring Logging
\end_layout

\begin_layout Standard
/configuration/logging/
\end_layout

\begin_layout Standard
See Sincerity Manual
\end_layout

\begin_layout Subsection
Debug Page
\end_layout

\begin_layout Section
Deployment
\end_layout

\begin_layout Subsection
The Joys of Sincerity
\end_layout

\begin_layout Subsubsection
Configuration-by-Script
\end_layout

\begin_layout Subsubsection
Plugins
\end_layout

\begin_layout Subsection
Deployment Strategies
\end_layout

\begin_layout Subsubsection
Synchronization
\end_layout

\begin_layout Standard
Unison, rsync
\end_layout

\begin_layout Subsubsection
Packaging
\end_layout

\begin_layout Paragraph
Maven
\end_layout

\begin_layout Standard
Using your own repository (Nexus)
\end_layout

\begin_layout Paragraph
Debian/RPM
\end_layout

\begin_layout Subsubsection
Version Control
\end_layout

\begin_layout Paragraph
Subversion
\end_layout

\begin_layout Paragraph
Git
\end_layout

\begin_layout Standard
What to ignore
\end_layout

\begin_layout Subsection
Directory Organization
\end_layout

\begin_layout Subsubsection
Sincerity Standalone
\end_layout

\begin_layout Subsection
Operating System Service
\end_layout

\begin_layout Standard
See Sincerity Manual
\end_layout

\begin_layout Subsection
Monitoring
\end_layout

\begin_layout Subsection
Security
\end_layout

\begin_layout Subsubsection
SSL
\end_layout

\begin_layout Standard
Howto
\end_layout

\begin_layout Subsubsection
HTTP Authentication
\end_layout

\begin_layout Subsubsection
Locked-Down User
\end_layout

\begin_layout Standard
Service Plugin
\end_layout

\begin_layout Subsubsection
Firewall
\end_layout

\begin_layout Standard
HTTP ports
\end_layout

\begin_layout Standard
Hazelcast ports
\end_layout

\begin_layout Standard
Cache backends
\end_layout

\begin_layout Standard
Database and other services
\end_layout

\begin_layout Subsection
Proxying
\end_layout

\begin_layout Subsubsection
Nginx
\end_layout

\begin_layout Subsubsection
Apache
\end_layout

\begin_layout Subsection
Deploying Clusters
\end_layout

\begin_layout Subsubsection
Loadbalancing
\end_layout

\begin_layout Standard
Perlbal
\end_layout

\begin_layout Subsubsection
Security Concerns
\end_layout

\begin_layout Subsubsection
Configuring Hazelcast
\end_layout

\begin_layout Standard
/configuration/hazelcast/prudence/
\end_layout

\begin_layout Standard
or
\end_layout

\begin_layout Standard
/configuration/hazelcast.alt.conf
\end_layout

\begin_layout Subsection
Cache Backends
\end_layout

\begin_layout Section
Upgrading from Prudence 1.1
\end_layout

\begin_layout Subsection
Upgrading Applications
\end_layout

\begin_layout Enumerate
Start with a new application
\end_layout

\begin_deeper
\begin_layout Enumerate
Rename old application (add 
\begin_inset Quotes eld
\end_inset

-old
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Enumerate
Use the 
\begin_inset Quotes eld
\end_inset

prudence
\begin_inset Quotes erd
\end_inset

 tool to create a new application
\end_layout

\end_deeper
\begin_layout Enumerate
Copy over individual settings from settings.js
\end_layout

\begin_layout Enumerate
Copy over individual settings from routing.js
\end_layout

\begin_layout Enumerate
Merge 
\begin_inset Quotes eld
\end_inset

/web/dynamic/
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

/web/static/
\begin_inset Quotes erd
\end_inset

 into 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_deeper
\begin_layout Enumerate
Rename 
\begin_inset Quotes eld
\end_inset

/web/dynamic/
\begin_inset Quotes erd
\end_inset

 files to add a 
\begin_inset Quotes eld
\end_inset

.s.
\begin_inset Quotes erd
\end_inset

 pre-extension (they are now called 
\begin_inset Quotes eld
\end_inset

scriptlet resources
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Enumerate
Rename original 
\begin_inset Quotes eld
\end_inset

/resources/
\begin_inset Quotes erd
\end_inset

 files to add a 
\begin_inset Quotes eld
\end_inset

.m.
\begin_inset Quotes erd
\end_inset

 pre-extension (they are now called 
\begin_inset Quotes eld
\end_inset

manual resources
\begin_inset Quotes erd
\end_inset

)
\end_layout

\end_deeper
\begin_layout Enumerate
Move 
\begin_inset Quotes eld
\end_inset

/web/fragments/
\begin_inset Quotes erd
\end_inset

 to 
\begin_inset Quotes eld
\end_inset

/fragments/
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsection
Upgrading the Component
\end_layout

\end_body
\end_document
