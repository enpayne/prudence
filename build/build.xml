<?xml version="1.0"?>
<project name="Prudence" default="build" xmlns:ivy="antlib:org.apache.ivy.ant">

	<property name="root" location="${basedir}/.." />

	<property file="${root}/build/private.properties" />
	<property file="${root}/build/custom.properties" />
	
	<property name="component.source" location="${root}/components/${component}/source" />
	<property name="component.notices" value="${root}/components/notices" />
	<property name="component.reference" location="${root}/components/reference" />
	<property name="component.javascript-library" location="${root}/components/prudence-javascript-library" />
	<property name="component.skeleton" location="${root}/components/skeleton" />
	<property name="component.example" location="${root}/components/example" />
	<property name="component.admin" location="${root}/components/admin" />
	<property name="component.three-crickets-style" location="${root}/components/three-crickets-style" />
	<property name="component.stickstick-common" location="${root}/components/stickstick-common" />
	<property name="component.stickstick-javascript" location="${root}/components/stickstick-javascript" />
	
	<property name="dependencies" location="${root}/dependencies" />

	<property name="cache" location="${root}/build/cache" />
	<property name="cache.ivy" location="${cache}/ivy" />
	<property name="cache.classes" location="${cache}/classes" />
	<property name="cache.jars" location="${cache}/jars" />
	<property name="cache.api" location="${cache}/api" />
	<property name="cache.manual" location="${cache}/skeleton/reference/manuals/${component.group}/${component.artifact}/${component.version}${component.version.postfix}" />
	<property name="cache.css" location="${cache}/three-crickets-style/libraries/web/style/three-crickets" />
	<property name="cache.maven.pom" location="${cache}/maven/pom" />
	<property name="cache.maven.build" location="${cache}/maven/build" />

	<property name="distribution" location="${root}/build/distribution" />
	<property name="distribution.content" location="${distribution}/content" />
	
	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpath="${dependencies}/libraries/jars/org.apache.ivy/ivy/${ivy.version}/ivy.jar" />

	<macrodef name="less4j">
		<attribute name="src" />
		<attribute name="css" />
		<sequential>
			<java classname="com.github.sommeri.less4j.commandline.CommandLine">
				<classpath>
					<file file="${dependencies}/libraries/jars/com.github.sommeri/less4j/${less4j.version}/less4j.jar" />
					<file file="${dependencies}/libraries/jars/com.beust/jcommander/${jcommander.version}/jcommander.jar" />
					<file file="${dependencies}/libraries/jars/org.antlr/antlr-runtime/${antlr.version}/antlr-runtime.jar" />
					<file file="${dependencies}/libraries/jars/org.apache.commons/commons-io/${commons-io.version}/commons-io.jar" />
					<file file="${dependencies}/libraries/jars/org.apache.commons/commons-beanutils/${commons-beanutils.version}/commons-beanutils.jar" />
					<file file="${dependencies}/libraries/jars/org.apache.commons/commons-logging/${commons-logging.version}/commons-logging.jar" />
				</classpath>
				<arg value="@{src}" />
				<arg value="@{css}" />
			</java>
		</sequential>
	</macrodef>

	<macrodef name="zuss">
		<attribute name="src" />
		<attribute name="css" />
		<sequential>
			<java
				classpath="${dependencies}/libraries/jars/org.zkoss.zuss/zuss/${zuss.version}/zuss.jar"
				classname="org.zkoss.zuss.Zuss">
				<arg value="-o" />
				<arg value="@{src}" />
				<arg value="@{css}" />
			</java>
		</sequential>
	</macrodef>

	<macrodef name="googledrive">
		<attribute name="suffix" />
		<sequential>
			<copy
				file="${distribution}/${component}-${component.version}${component.version.postfix}@{suffix}"
				todir="${googledrive.repo}/${googledrive.section}/${component.version}${component.version.postfix}"
				failonerror="false" />
		</sequential>
	</macrodef>
	
	<property name="googlecode" location="${dependencies}/libraries/python/googlecode_upload.py" />
	<macrodef name="googlecode">
		<attribute name="description" />
		<attribute name="label" />
		<attribute name="suffix" />
		<sequential>
			<exec executable="${googlecode}">
				<arg value="--project=${component}" />
				<arg value="--user=${googlecode.username}" />
				<arg value="--password=${googlecode.password}" />
				<arg value="--summary=@{description} for version ${component.version}${component.version.postfix}" />
				<arg value="--labels=${component.version.short}${component.version.short.postfix},@{label}" />
				<arg value="${distribution}/${component}-${component.version}${component.version.postfix}@{suffix}" />
			</exec>
		</sequential>
	</macrodef>

	<target name="ivy" description="Settings for Ivy">
		<ivy:settings file="${root}/build/ivy/settings.xml" />
	</target>

	<target name="dependencies" depends="ivy" description="Resolve dependencies">
		<ivy:resolve file="${root}/build/ivy/${component}.xml" type="jar" log="download-only" resolveId="${component}" />
		<ivy:cachepath pathid="dependencies" type="jar" resolveId="${component}" />
	</target>

	<target name="classes" depends="dependencies" description="Compile Java code">
		<mkdir dir="${cache.classes}" />
		<javac srcdir="${component.source}" destdir="${cache.classes}" source="${compile.version}" target="${compile.version}" includeAntRuntime="no" debug="${compile.debug}" bootclasspath="${compile.boot}">
			<classpath refid="dependencies" />
			<!--<compilerarg line="-Xlint" />-->
		</javac>
	</target>

	<target name="version">
		<mkdir dir="${cache.classes}" />
		<propertyfile file="${cache.classes}/com/threecrickets/prudence/version.conf">
			<entry key="version" value="${component.version}${component.version.postfix}" />
			<entry key="built" type="date" value="now" pattern="MMM dd yyyy, HH:mm:ss, 'TZ'Z" />
		</propertyfile>
	</target>

	<target name="javadocs" description="Create API documentation if not present">
		<available file="${cache.api}" property="javadocs-present" />
		<antcall target="javadocs-overwrite" />
	</target>

	<target name="javadocs-overwrite" depends="dependencies" description="Create API documentation" unless="javadocs-present">
		<javadoc
			destdir="${cache.api}" sourcepath="${component.source}" excludepackagenames="**.internal.*"
			access="protected" source="${compile.version}"
			windowtitle="${documentation.title} ${component.version}${component.version.postfix}" doctitle="${documentation.title} ${component.version}${component.version.postfix}"
			author="true" splitindex="true" use="true" version="true" nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false"
			bootclasspath="${compile.boot}">

			<link href="${documentation.jvm}" />
			<link href="http://commons.apache.org/daemon/apidocs/" />
			<link href="http://commons.apache.org/proper/commons-dbcp/apidocs/" />
			<link href="http://commons.apache.org/fileupload/apidocs/" />
			<link href="http://commons.apache.org/pool/api-1.6/" />
			<link href="http://www.sauronsoftware.it/projects/cron4j/api/" />
			<link href="http://groboutils.sourceforge.net/docs/projects/5/api/" />
			<link href="http://www.hazelcast.org/docs/latest/javadoc/" />
			<!-- <link href="http://www.h2database.com/javadoc/" /> --><!-- missing package-list -->
			<link href="http://junit.sourceforge.net/javadoc/" />
			<!-- Jygments has no online javadocs -->
			<link href="http://api.mongodb.org/java/current/" />
			<link href="http://www.orientechnologies.com/javadoc/latest/" />
			<link href="http://www.restlet.org/documentation/2.1/jse/api/" />
			<link href="http://threecrickets.com/api/java/scripturian/" />
			<link href="http://docs.oracle.com/cd/E17802_01/products/products/servlet/2.5/docs/servlet-2_5-mr2/" />
			<link href="http://dustin.github.com/java-memcached-client/apidocs/" />
			<link href="http://www.zkoss.org/javadoc/latest/zuss/" />
			<classpath refid="dependencies" />
			<bottom>
				<![CDATA[<i>${documentation.copyright}</i>]]>
			</bottom>
		</javadoc>
		<mkdir dir="${cache.jars}" />
		<jar destfile="${cache.jars}/javadoc.jar" basedir="${cache.api}" />
	</target>

	<target name="manual" description="Create manual if not present">
		<available file="${cache.manual}" property="manual-present" />
		<antcall target="manual-overwrite" />
	</target>
	
	<target name="clean-manual" description="Clean manual">
		<delete dir="${cache.manual}" />
	</target>

	<target name="manual-lyx" if="lyx">
		<exec executable="${lyx}">
			<arg value="--export" />
			<arg value="pdf" />
			<arg value="${cache.manual}/${component}_manual.lyx" />
		</exec>
	</target>

	<target name="manual-elyxer" if="elyxer">
		<exec executable="${elyxer}">
			<arg value="--unicode" />
			<arg value="--title" />
			<arg value="${documentation.title} Manual" />
			<arg value="--css" />
			<arg value="dark-cricket-documentation.css" />
			<arg value="${cache.manual}/${component}_manual.lyx" />
			<arg value="${cache.manual}/${component}_manual.html" />
		</exec>
	</target>

	<target name="manual-overwrite" description="Create manual" unless="manual-present">
		<mkdir dir="${cache.manual}" />
		<copy todir="${cache.manual}">
			<fileset dir="${component.reference}/manual" excludes="**/*~" />
			<filterchain>
				<replacetokens>
					<token key="VERSION" value="${component.version}${component.version.postfix}" />
				</replacetokens>
			</filterchain>
		</copy>
		<antcall target="manual-lyx" />
		<antcall target="manual-elyxer" />
	</target>
	
	<target name="css" description="Create CSS">
		<mkdir dir="${cache.css}/dark-cricket" />
		<less4j
			src="${component.three-crickets-style}/libraries/web/style/three-crickets/dark-cricket/dark-cricket.less"
			css="${cache.css}/dark-cricket/dark-cricket.original.css" />
		<mkdir dir="${cache.css}/soft-cricket" />
		<less4j
			src="${component.three-crickets-style}/libraries/web/style/three-crickets/soft-cricket/soft-cricket.less"
			css="${cache.css}/soft-cricket/soft-cricket.original.css" />
	</target>

	<target name="libraries" depends="classes, version" description="Create jar">
		<mkdir dir="${cache.jars}" />
		<jar destfile="${cache.jars}/${component.artifact}.jar" basedir="${cache.classes}" />
		<jar destfile="${cache.jars}/sources.jar" basedir="${component.source}" />
	</target>

	<target name="components" depends="libraries, javadocs, manual, css" description="Assemble components" />

	<target name="distribution-overwrite" description="Create Sincerity container" unless="content-present">
		<antcall target="deploy-maven" />
		<copy todir="${distribution.content}/configuration/sincerity">
			<fileset dir="sincerity" />
			<filterchain>
				<replacetokens>
					<token key="VERSION" value="${component.version}${component.version.postfix}" />
					<token key="SINCERITY.VERSION" value="${sincerity.version}" />
				</replacetokens>
			</filterchain>
		</copy>
		<copy todir="${distribution.content}">
			<fileset dir="${component.notices}" />
		</copy>
		<exec executable="${sincerity}">
			<arg value="container:create" />
			<arg value="--force" />
			<arg value="${distribution.content}" />
			<arg value="${sincerity.template}" />
			<arg value=":" />
			<arg value="repositories:attach" />
			<arg value="public" />
			<arg value="${component}" />
			<arg value="maven" />
			<arg value="${dependencies.repo}" />
			<arg value=":" />
			<arg value="artifacts:install" />
			<arg value=":" />
			<arg value="repositories:detach" />
			<arg value="public" />
			<arg value="${component}" />
			<arg value=":" />
			<arg value="repositories:attach" />
			<arg value="three-crickets" />
		</exec>
	</target>

	<target name="distribution" description="Create Sincerity container if not present">
		<available file="${distribution.content}" property="content-present" />
		<antcall target="distribution-overwrite" />
	</target>

	<target name="package-zip" depends="distribution" description="Create zip distribution package">
		<zip destfile="${distribution}/${component}-${component.version}${component.version.postfix}.zip">
			<zipfileset dir="${distribution.content}" excludes="cache/, logs/, sincerity" />
			<zipfileset dir="${distribution.content}" includes="sincerity" filemode="755" />
		</zip>
	</target>

	<target name="package-platform-installers" depends="distribution" description="Create InstallBuilder installer" if="installbuilder">
		<copy todir="${cache}" file="${root}/build/installbuilder/${component}.xml">
			<filterchain>
				<replacetokens>
					<token key="VERSION" value="${component.version}${component.version.postfix}" />
				</replacetokens>
			</filterchain>
		</copy>
		<exec executable="${installbuilder}">
			<arg value="build" />
			<arg value="${cache}/${component}.xml" />
			<arg value="windows" />
			<arg value="--license" />
			<arg value="./installbuilder/license.xml" />
		</exec>
		<exec executable="${installbuilder}">
			<arg value="build" />
			<arg value="${cache}/${component}.xml" />
			<arg value="osx" />
			<arg value="--license" />
			<arg value="${root}/build/installbuilder/license.xml" />
			<arg value="--setvars" />
			<arg value="project.outputDirectory=${cache}" />
		</exec>
		<zip destfile="${distribution}/${component}-${component.version}${component.version.postfix}-osx-installer.zip">
			<zipfileset dir="${cache}/${component}-${component.version}${component.version.postfix}-osx-installer.app" prefix="${component}-${component.version}${component.version.postfix}-osx-installer.app" />
		</zip>
		<chmod perm="ugo+rx">
			<fileset dir="${distribution}" includes="*.run" />
		</chmod>
	</target>

	<target name="package-manual-examples" description="Examples to accompany the manual">
		<zip destfile="${distribution}/${component}-manual-examples-${component.version}${component.version.postfix}.zip">
			<zipfileset dir="${component.reference}/manual-examples" />
		</zip>
	</target>

	<target name="package" depends="package-zip, package-platform-installers, package-manual-examples" description="Create all packages and installers" />

	<target name="deploy-maven" if="maven" depends="components" description="Deploy to Maven repository">
		<delete dir="${cache.maven.pom}" />
		<delete dir="${cache.maven.build}" />
		<copy todir="${cache.maven.pom}">
			<fileset dir="${root}/build/maven" excludes="**/*~" />
			<filterchain>
				<replacetokens>
					<token key="VERSION" value="${component.version}${component.version.postfix}" />
					<token key="DEPENDENCIES" value="${dependencies.repo}" />
					<token key="SINCERITY.VERSION" value="${sincerity.version}" />
					<token key="ROOT" value="${root}" />
					<token key="CACHE" value="${cache.maven.build}" />
					<token key="JARS" value="${cache.jars}" />
				</replacetokens>
			</filterchain>
		</copy>
		<exec executable="${maven}" dir="${cache.maven.pom}">
			<arg value="deploy" />
			<arg value="-DaltDeploymentRepository=default::default::${distribution.repo}" />
		</exec>
	</target>

	<target name="deploy-googledrive" if="googledrive.repo" description="Deploy to Google Drive">
		<googledrive suffix="-installer.jar" />
		<googledrive suffix=".zip" />
		<googledrive suffix=".rpm" />
		<googledrive suffix=".deb" />
		<googledrive suffix="-osx-installer.zip" />
		<googledrive suffix="-windows-installer.exe" />
	</target>
	
	<target name="deploy-googlecode" if="googlecode.password" description="Deploy to Google Code">
		<googlecode description="Universal installer" label="universal" suffix="-installer.jar" />
		<googlecode description="Zip distribution" label="zip" suffix=".zip" />
		<googlecode description="RPM package" label="rpm" suffix=".rpm" />
		<googlecode description="Debian package" label="deb" suffix=".deb" />
		<googlecode description="Mac OS X installer" label="mac" suffix="-osx-installer.zip" />
		<googlecode description="Windows installer" label="windows" suffix="-windows-installer.exe" />
	</target>
	
	<target name="build" depends="distribution" description="Build distribution" />
	
	<target name="clean" description="Clean">
		<delete dir="${cache}" />
		<delete dir="${distribution}" />
	</target>
	
	<target name="rebuild" depends="clean, build" description="First clean and then build distribution" />

	<target name="dirty" description="Quick-and-dirty update of the content">
		<copy todir="${distribution.content}">
			<fileset dir="${component.skeleton}" />
			<fileset dir="${component.admiin}" />
			<fileset dir="${component.example}" />
			<fileset dir="${component.javascript-library}" />
			<fileset dir="${component.stickstick-common}" />
			<fileset dir="${component.stickstick-javascript}" />
		</copy>
	</target>

</project>
